<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hotel.mapper.RoleAuthMapper">
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"> 
    <property name="timeToIdleSeconds" value="3600" /><!--1 hour-->
    <property name="timeToLiveSeconds" value="3600" /><!--1 hour-->
    <property name="maxEntriesLocalHeap" value="1000" />
    <property name="maxEntriesLocalDisk" value="10000000" />
    <property name="memoryStoreEvictionPolicy" value="LRU" />
    </cache>
  <resultMap id="BaseResultMap" type="org.hotel.model.RoleAuth">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="element_id" jdbcType="VARCHAR" property="elementId" />
    <result column="operate_flag" jdbcType="VARCHAR" property="operateFlag" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="modify_user" jdbcType="VARCHAR" property="modifyUser" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    <result column="del_flag" jdbcType="TINYINT" property="delFlag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.hotel.model.RoleAuth">
    <result column="elements" jdbcType="LONGVARBINARY" property="elements" />
  </resultMap>
  <sql id="Base_Column_List">
    id, role_id, element_id, operate_flag, create_user, create_time, modify_user, modify_time, 
    del_flag
  </sql>
  <sql id="Blob_Column_List">
    elements
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from role_auth
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from role_auth
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="org.hotel.model.RoleAuth">
    insert into role_auth (id, role_id, element_id, 
      operate_flag, create_user, create_time, 
      modify_user, modify_time, del_flag, 
      elements)
    values (#{id,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, #{elementId,jdbcType=VARCHAR}, 
      #{operateFlag,jdbcType=VARCHAR}, #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyUser,jdbcType=VARCHAR}, #{modifyTime,jdbcType=TIMESTAMP}, #{delFlag,jdbcType=TINYINT}, 
      #{elements,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="org.hotel.model.RoleAuth">
    insert into role_auth
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="elementId != null">
        element_id,
      </if>
      <if test="operateFlag != null">
        operate_flag,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="modifyUser != null">
        modify_user,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="elements != null">
        elements,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="elementId != null">
        #{elementId,jdbcType=VARCHAR},
      </if>
      <if test="operateFlag != null">
        #{operateFlag,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUser != null">
        #{modifyUser,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="elements != null">
        #{elements,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.hotel.model.RoleAuth">
    update role_auth
    <set>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="elementId != null">
        element_id = #{elementId,jdbcType=VARCHAR},
      </if>
      <if test="operateFlag != null">
        operate_flag = #{operateFlag,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUser != null">
        modify_user = #{modifyUser,jdbcType=VARCHAR},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="elements != null">
        elements = #{elements,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.hotel.model.RoleAuth">
    update role_auth
    set role_id = #{roleId,jdbcType=VARCHAR},
      element_id = #{elementId,jdbcType=VARCHAR},
      operate_flag = #{operateFlag,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_user = #{modifyUser,jdbcType=VARCHAR},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=TINYINT},
      elements = #{elements,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hotel.model.RoleAuth">
    update role_auth
    set role_id = #{roleId,jdbcType=VARCHAR},
      element_id = #{elementId,jdbcType=VARCHAR},
      operate_flag = #{operateFlag,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_user = #{modifyUser,jdbcType=VARCHAR},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=TINYINT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
	
  <select id="findRoleAuthByRoleId" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
     <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from role_auth
    where del_flag=0 and role_id = #{roleId,jdbcType=VARCHAR}
  </select>
   
  
</mapper>