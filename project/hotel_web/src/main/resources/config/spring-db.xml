<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL  -->
        <property name="slowSqlMillis" value="3000" />
        <!--慢SQL统计日志输出  -->
        <property name="logSlowSql" value="true" />
        <!--合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计  -->
        <property name="mergeSql" value="true" />
    </bean>
	<!-- druid 数据源 -->
	<bean id="druidDateSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${mysql.driver}" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />       
        <!-- 初始化连接数量 -->
        <property name="initialSize" value ="${initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${maxIdle}" /> 
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />    
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                
                     监控统计用的filter:stat
               	 日志用的filter:log4j
             	  防御SQL注入的filter:wall -->
        <property name="filters" value="${filters}" />  
	</bean>    
	
	<!-- 将数据源设置事物   如果定义的事务管理器名称为transactionManager，那么就可以直接使用<tx:annotation-driven/>-->
	<bean id="druidTransaction" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"  abstract="false" lazy-init="default" autowire="default" >
		<property name="dataSource" ref="druidDateSource" />
	</bean>
	
	<!-- 注册事物  -->
	<tx:annotation-driven transaction-manager="druidTransaction"/>
	
	<!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="druidDateSource" />
        <!-- 由于plugins参数类型是数组所以可以设多个 -->
        <property name="mapperLocations" >
        <!-- 由于mapperLocation参数类型是数组所以可以设多个 -->
        	<list>
        		<value>classpath:org/hotel/mapping/*.xml</value>
        		<!-- <value>classpath:com/xinqch/shiro/mapping/*.xml</value> -->
        	</list>
        </property>
          <!-- mybatis 插件加载（拦截器）  -->
		<property name="plugins" >
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- <property name="autoDialect" value="mysql"/>
			        该参数默认为false
			        设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用
			        和startPage中的pageNum效果一样
			        <property name="offsetAsPageNum" value="true"/>
			        该参数默认为false
			        设置为true时，使用RowBounds分页会进行count查询
			        <property name="rowBoundsWithCount" value="true"/> -->
			        <property name="properties">
			          <value>
			            dialect=mysql
			            <!-- reasonable=true -->
			          </value>
			        </property>
			      </bean>
			</array>
        </property>
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.xinqch.**这个包以及它的子包下的所有映射接口类  basePackage 参数类型是string类型的所以可以用逗号连接却不可以用list-->
        <property name="basePackage" value="org.hotel.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
       <!--  <property name="markerInterface" value="com.xinqch.common.CommonSqlMapper"></property> -->
    </bean>
</beans>
