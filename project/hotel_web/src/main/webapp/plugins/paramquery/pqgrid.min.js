/**
 * ParamQuery Pro
 * 
 * Copyright (c) 2012-2016 Paramvir Dhindsa (http://paramquery.com)
 * Released under Evaluation license
 * http://paramquery.com/pro/license/evaluate
 * 
 */
(function (k) {
    var n = k.ui.autocomplete.prototype,
    g = n._renderMenu,
    c = n._renderItem;
    n._renderMenu = function (a, b) {
        g.call(this, a, b);
        var f = this.options.selectItem;
        if (f && f.on) {
            var f = f.cls,
            f = void 0 === f ? 'ui-state-highlight' : f,
            m = this.element.val();
            m && f && k('a', a).filter(function () {
                return k(this).text() === m
            }).addClass(f)
        }
    };
    n._renderItem = function (a, b) {
        var f = c.call(this, a, b),
        m = this.options.highlightText;
        if (m && m.on) {
            var l = this.element.val();
            if (l) {
                var l = new RegExp('(' + l + ')', 'i'),
                e = b.label;
                if (l.test(e)) {
                    var h = m.style,
                    m = m.cls,
                    e = e.replace(l, '<span style=\'' + (void 0 === h ? 'font-weight:bold;' : h) + '\' class=\'' + (void 0 === m ? '' : m) + '\'>$1</span>');
                    f.find('a').html(e)
                }
            }
        }
        return f
    };
    var n = k.paramquery = k.paramquery || {
    },
    a = function (a, b, f, m) {
        b = b.slice();
        for (var l = [
        ], e = 0, h = b.length; e < h; e++) {
            var w = b[e],
            A = w.cb,
            t = w.one;
            if (t) {
                if (w._oncerun) continue;
                w._oncerun = !0
            }
            !1 === A.call(a, f, m) && (f.preventDefault(), f.stopPropagation());
            t && l.push(e);
            if (f.isImmediatePropagationStopped()) break
        }
        if (l.length) for (e = l.length - 1; 0 <= e; e--) b.splice(l[e], 1)
    };
    n._trigger = function (d, b, f) {
        var m,
        l,
        e = this.listeners,
        h = e[d],
        w = this.options,
        A = w.allEvents,
        t = w.bubble,
        c = this.element,
        q = w[d];
        f = f || {
        };
        b = k.Event(b);
        b.type = this.widgetName + ':' + d;
        b.target = c[0];
        if (l = b.originalEvent) for (m in l) m in b || (b[m] = l[m]);
        A && 'function' == typeof A && A.call(this, b, f);
        if (h && h.length && (a(this, h, b, f), b.isImmediatePropagationStopped()) || w.trigger && (c[t ? 'trigger' : 'triggerHandler'](b, f), b.isImmediatePropagationStopped())) return !b.isDefaultPrevented();
        q && !1 === q.call(this, b, f) && (b.preventDefault(), b.stopPropagation());
        (h = e[d + 'Done']) && h.length && a(this, h, b, f);
        return !b.isDefaultPrevented()
    };
    n.on = function () {
        var a = arguments;
        if ('boolean' == typeof a[0]) var b = a[0],
        f = a[1],
        m = a[2],
        a = a[3];
         else f = a[0],
        m = a[1],
        a = a[2];
        for (var f = f.split(' '), c = 0; c < f.length; c++) {
            var e = f[c];
            if (e) {
                var h = m,
                w = a,
                A = b,
                t = this.listeners[e];
                t || (t = this.listeners[e] = [
                ]);
                t[A ? 'unshift' : 'push']({
                    cb: h,
                    one: w
                })
            }
        }
        return this
    };
    n.one = function () {
        for (var a = arguments.length, b = [
        ], f = 0; f < a; f++) b[f] = arguments[f];
        b[a] = !0;
        return this.on.apply(this, b)
    };
    n.off = function (a, b) {
        for (var f = a.split(' '), m = 0; m < f.length; m++) {
            var c = f[m];
            if (c) {
                var e = c;
                if (c = b) {
                    if (e = this.listeners[e]) {
                        for (var h = [
                        ], w = 0, A = e.length; w < A; w++) c == e[w].cb && h.push(w);
                        if (h.length) for (w = h.length - 1; 0 <= w; w--) e.splice(h[w], 1)
                    }
                } else delete this.listeners[e]
            }
        }
        return this
    };
    k.widget('paramquery.pqTooltip', k.ui.tooltip, {
        options: {
            items: 'td.pq-has-tooltip,td[title]',
            position: {
                my: 'center top',
                at: 'center bottom'
            },
            content: function () {
                var a = k(this),
                b = a.closest('.pq-grid').pqGrid('getInstance').grid,
                f = b.getCellIndices({
                    $td: a
                });
                return (b = b.data({
                    rowIndx: f.rowIndx,
                    dataIndx: f.dataIndx,
                    data: 'pq_valid'
                }).data) ? (a = b.icon, b = b.msg, ('' == a ? '' : '<span class=\'ui-icon ' + a + ' pq-tooltip-icon\'></span>') + (null != b ? b : ''))  : a.attr('title')
            }
        },
        _create: function () {
            this._super();
            var a = this.element,
            b = this.eventNamespace;
            a.on('pqtooltipopen' + b, function (b, a) {
                var d = k(b.target),
                e = k(b.originalEvent.target);
                e.on('remove', function (e) {
                    d.pqTooltip('close', e, !0)
                });
                a.tooltip.css('zIndex', e.zIndex() + 5);
                if (d.is('.pq-grid')) {
                    var h = d.pqGrid('getCellIndices', {
                        $td: e
                    }),
                    w = h.dataIndx,
                    A;
                    (A = d.pqGrid('getRowData', {
                        rowIndx: h.rowIndx
                    })) && (A = A.pq_celldata) && (A = A[w]) && (A = A.pq_valid) && (w = A, h = w.style, a.tooltip.addClass(w.cls), w = a.tooltip.attr('style'), a.tooltip.attr('style', w + ';' + h));
                    d.find('div.pq-sb-horiz,div.pq-sb-vert').on('pqscrollbardrag', function (h, w) {
                        h.currentTarget = e[0];
                        d.pqTooltip('close', h, !0)
                    })
                }
            });
            a.on('pqtooltipclose' + b, function (b, a) {
                var d = k(b.target);
                k(b.originalEvent.target).off('remove');
                d.is('.pq-grid') && d.find('div.pq-sb-horiz,div.pq-sb-vert').off('pqscrollbardrag')
            })
        }
    })
}) (jQuery);
(function (k) {
    var n = window.pq = n || {
    },
    g = k.paramquery;
    n.arrayUnique = function (b, f) {
        var a = [
        ],
        d,
        e = b.length,
        h,
        w = {
        },
        A;
        for (d = 0; d < e; d++) h = b[d],
        A = f ? h[f] : h,
        w.hasOwnProperty(A) || (w[A] = 1, a.push(h));
        return a
    };
    g.select = function (b) {
        var f = b.options,
        a = b.groupIndx,
        d = b.labelIndx,
        e = b.valueIndx,
        h = null != d && null != e,
        w = null != a,
        A = b.prepend,
        t = b.dataMap,
        c,
        q,
        x;
        b = [
            '<select ',
            b.attr,
            ' >'
        ];
        if (A) for (var g in A) b.push('<option value="', g, '">', A[g], '</option>');
        if (f && f.length) {
            for (var A = 0, k = f.length; A < k; A++) {
                var r = f[A];
                if (h) {
                    var y = r[e],
                    s = r.pq_disabled ? 'disabled="disabled" ' : '',
                    z = r.pq_selected ? 'selected="selected" ' : '';
                    if (null != y) {
                        if (t) {
                            c = {
                            };
                            for (x = 0; x < t.length; x++) {
                                var n = t[x];
                                c[n] = r[n]
                            }
                            c = 'data-map=\'' + JSON.stringify(c) + '\''
                        } else c = '';
                        x = c;
                        w && (n = r.pq_disabled_group ? 'disabled="disabled" ' : '', c = r[a], q != c && (null != q && b.push('</optgroup>'), b.push('<optgroup label="', c, '" ', n, ' >'), q = c));
                        d == e ? b.push('<option ', z, s, x, '>', y, '</option>')  : b.push('<option ', z, s, x, ' value="', y, '">', r[d], '</option>')
                    }
                } else if ('object' == typeof r) for (g in r) b.push('<option value="', g, '">', r[g], '</option>');
                 else b.push('<option>', r, '</option>')
            }
            w && b.push('</optgroup>')
        }
        b.push('</select>');
        return b.join('')
    };
    k.fn.pqval = function (b) {
        if (b) {
            if (b.incr) return b = this.data('pq_value'),
            this.prop('indeterminate', !1),
            b ? (b = !1, this.prop('checked', !1))  : !1 === b ? (b = null, this.prop('indeterminate', !0), this.prop('checked', !1))  : (b = !0, this.prop('checked', !0)),
            this.data('pq_value', b),
            b;
            b = b.val;
            this.data('pq_value', b);
            this.prop('indeterminate', !1);
            null == b ? (this.prop('indeterminate', !0), this.prop('checked', !1))  : b ? this.prop('checked', !0)  : this.prop('checked', !1);
            return this
        }
        return this.data('pq_value')
    };
    g.xmlToArray = function (b, f) {
        var a = f.itemParent,
        d = f.itemNames,
        e = [
        ];
        k(b).find(a).each(function (h, w) {
            var b = k(w),
            f = [
            ];
            k(d).each(function (e, h) {
                f.push(b.find(h).text().replace(/\r|\n|\t/g, ''))
            });
            e.push(f)
        });
        return e
    };
    g.xmlToJson = function (b, f) {
        var a = f.itemParent,
        d = f.itemNames,
        e = [
        ];
        k(b).find(a).each(function (h, w) {
            for (var b = k(w), f = {
            }, a = 0, m = d.length; a < m; a++) {
                var c = d[a];
                f[c] = b.find(c).text().replace(/\r|\n|\t/g, '')
            }
            e.push(f)
        });
        return e
    };
    g.tableToArray = function (b) {
        var f = [
        ],
        a = [
        ];
        b = k(b).children('tbody').children('tr');
        var d = b.length ? k(b[0])  : k(),
        e = 1 < b.length ? k(b[1])  : k();
        d.children('th,td').each(function (h, w) {
            var b = k(w),
            a = b.html(),
            b = b.width(),
            d = 'left';
            if (e.length) var m = e.find('td:eq(' + h + ')').attr('align'),
            d = m ? m : d;
            f.push({
                title: a,
                width: b,
                dataType: 'string',
                align: d,
                dataIndx: h
            })
        });
        b.each(function (e, w) {
            if (0 != e) {
                var b = [
                ];
                k(w).children('td').each(function (e, h) {
                    b.push(k.trim(k(h).html()))
                });
                a.push(b)
            }
        });
        return {
            data: a,
            colModel: f
        }
    };
    var c = {
    };
    g.formatCurrency = function (b, f) {
        var a = parseFloat(b);
        if (!isNaN(a)) {
            var d = 0 > a,
            e;
            a: {
                var h = f,
                w,
                A;
                if (h) {
                    h = h.split(':');
                    h = d && 1 < h.length ? h[1] : h[0];
                    if (w = c[h]) {
                        e = w;
                        break a
                    }
                    A = /^([^#]*|&#[^#]*)?[\,\.#0]*?([\,\s\.]?)([#0]*)([\,\s\.]?)([0]*?)(\s*[^#^0]*|&#[^#]*)?$/;
                    (A = h.match(A)) && A.length && (w = {
                        symbol: A[1] || '',
                        thouSep: A[2],
                        thousand: A[3].length,
                        decSep: A[4],
                        decimal: A[5].length,
                        symbolEnd: A[6] || ''
                    }, c[h] = w)
                }
                e = w = w || {
                    symbol: '',
                    symbolEnd: '',
                    thouSep: ',',
                    thousand: 3,
                    decSep: '.',
                    decimal: 2
                }
            }
            h = e.symbol;
            w = e.symbolEnd;
            A = e.thousand;
            var t = e.thouSep,
            p = e.decSep,
            q = e.decimal,
            a = a.toFixed(q);
            e = a.length;
            var x = q + p.length,
            q = a.substring(0, e - x),
            a = a.substring(e - x + p.length, e);
            e = q.match(/\d/g).reverse();
            q = [
            ];
            for (x = 0; x < e.length; x++) 0 < x && 0 == x % A && q.push(t),
            q.push(e[x]);
            q = q.reverse();
            q = q.join('');
            return (d ? '-' : '') + h + q + p + a + w
        }
    };
    n.formatNumber = g.formatCurrency;
    n.validation = {
        is: function (b, a) {
            if ('string' == b || !b) return !0;
            b = b.substring(0, 1).toUpperCase() + b.substring(1, b.length);
            return this['is' + b](a)
        },
        isFloat: function (b) {
            var a = parseFloat(b);
            return isNaN(a) || a != b ? !1 : !0
        },
        isInteger: function (b) {
            var a = parseInt(b);
            return isNaN(a) || a != b ? !1 : !0
        },
        isDate: function (b) {
            b = Date.parse(b);
            return isNaN(b) ? !1 : !0
        }
    };
    var a = [
    ],
    d = g.toLetter = function (b) {
        var f = a[b];
        if (!f) {
            b++;
            var m = b % 26,
            f = b / 26 | 0,
            m = m ? String.fromCharCode(64 + m)  : (--f, 'Z'),
            f = f ? d(f - 1) + m : m;
            b--;
            a[b] = f
        }
        return f
    };
    g.generateData = function (b, a) {
        for (var m = [
        ], c = 0; c < a; c++) m[c] = d(c);
        for (var e = [
        ], c = 0; c < b; c++) for (var h = e[c] = [
        ], w = 0; w < a; w++) h[w] = m[w] + (c + 1);
        return e
    }
}) (jQuery);
(function (k) {
    function n(b, a, d) {
        return b ? k('<span tabindex=\'0\' rel=\'tooltip\' data-placement=\'top\' title=\'' + a + '\' class=\'btn btn-xs ' + d + '\'></span>')  : k('<span class=\'pq-ui-button ui-widget-header\' tabindex=\'0\' rel=\'tooltip\' title=\'' + a + '\'><span class=\'ui-icon ui-icon-' + d + '\'></span></span>')
    }
    function g(b, a) {
        b.bind('click keydown', function (b) {
            if ('keydown' != b.type || b.keyCode == k.ui.keyCode.ENTER) return a.call(this, b)
        })
    }
    function c(b, a, d) {
        a[d ? 'addClass' : 'removeClass']('disabled').css('pointer-events', d ? 'none' :
        '').attr('tabindex', d ? '' : '0')
    }
    var a = {
        options: {
            bootstrap: {
                on: !1,
                pager: '',
                nextIcon: 'glyphicon glyphicon-forward',
                prevIcon: 'glyphicon glyphicon-backward',
                firstIcon: 'glyphicon glyphicon-step-backward',
                lastIcon: 'glyphicon glyphicon-step-forward',
                refreshIcon: 'glyphicon glyphicon-refresh'
            },
            curPage: 0,
            totalPages: 0,
            totalRecords: 0,
            msg: '',
            rPPOptions: [
                10,
                20,
                30,
                40,
                50,
                100
            ],
            rPP: 20
        },
        _regional: {
            strDisplay: 'Displaying {0} to {1} of {2} items.',
            strFirstPage: 'First Page',
            strLastPage: 'Last Page',
            strNextPage: 'Next Page',
            strPage: 'Page {0} of {1}',
            strPrevPage: 'Previous Page',
            strRefresh: 'Refresh',
            strRpp: 'Records per page:{0}'
        }
    };
    k.extend(a.options, a._regional);
    a._create = function () {
        var b = this,
        a = this.options,
        d = this.element,
        c = a.bootstrap,
        e = c.on;
        this.listeners = {
        };
        d.addClass('pq-pager ' + (e ? c.pager : ''));
        this.first = n(e, a.strFirstPage, e ? c.firstIcon : 'seek-first').appendTo(d);
        g(this.first, function (e) {
            1 < a.curPage && b._onChange(e, 1)
        });
        this.prev = n(e, a.strPrevPage, e ? c.prevIcon : 'seek-prev').appendTo(d);
        g(this.prev, function (e) {
            1 < a.curPage && b._onChange(e, a.curPage - 1)
        });
        k('<span class=\'pq-separator\'></span>').appendTo(d);
        this.pageHolder = k('<span class=\'pq-page-placeholder\'></span>').appendTo(d);
        k('<span class=\'pq-separator\'></span>').appendTo(d);
        this.next = n(e, a.strNextPage, e ? c.nextIcon : 'seek-next').appendTo(d);
        g(this.next, function (e) {
            a.curPage < a.totalPages && b._onChange(e, a.curPage + 1)
        });
        this.last = n(e, a.strLastPage, e ? c.lastIcon : 'seek-end').appendTo(d);
        g(this.last, function (e) {
            a.curPage !== a.totalPages && b._onChange(e, a.totalPages)
        });
        k('<span class=\'pq-separator\'></span>').appendTo(d);
        this.rPPHolder = k('<span class=\'pq-page-placeholder\'></span>').appendTo(d);
        this.$refresh = n(e, a.strRefresh, e ? c.refreshIcon : 'refresh').appendTo(d);
        g(this.$refresh, function (e) {
            if (!1 === b._trigger('beforeRefresh', e)) return !1;
            b._trigger('refresh', e)
        });
        k('<span class=\'pq-separator\'></span>').appendTo(d);
        this.$msg = k('<span class=\'pq-pager-msg\'></span>').appendTo(d);
        this._refresh()
    };
    a._destroy = function () {
        this.element.empty().removeClass('pq-pager').enableSelection()
    };
    a._setOption = function (b, a) {
        if ('curPage' ==
        b || 'totalPages' == b) a *= 1;
        this._super(b, a)
    };
    a._setOptions = function (a) {
        var f,
        d = !1,
        c = this.options;
        for (f in a) {
            var e = a[f],
            h = typeof e;
            'string' == h || 'number' == h ? e != c[f] && (this._setOption(f, e), d = !0)  : 'function' == typeof e.splice || k.isPlainObject(e) ? JSON.stringify(e) != JSON.stringify(c[f]) && (this._setOption(f, e), d = !0)  : e != c[f] && (this._setOption(f, e), d = !0)
        }
        d && this._refresh();
        return this
    };
    k.widget('paramquery.pqPager', a);
    pq.pager = function (a, f) {
        var d = k(a).pqPager(f);
        return d.data('paramqueryPqPager') || d.data('paramquery-pqPager')
    };
    var d = k.paramquery;
    d.pqPager.regional = {
    };
    d.pqPager.regional.en = a._regional;
    a = d.pqPager.prototype;
    d.pqPager.defaults = a.options;
    a._refreshPage = function () {
        var a = this;
        this.pageHolder.empty();
        for (var f = this.options, d = f.bootstrap, c = f.strPage.split(' '), e = [
        ], h = 0, w = c.length; h < w; h++) {
            var A = c[h];
            '{0}' == A ? e.push('<input type=\'text\' tabindex=\'0\' class=\'pq-pager-input ', d.on ? '' : 'ui-corner-all', '\' />')  : '{1}' == A ? e.push('<span class=\'total\'></span>')  : e.push('<span>', A, '</span>')
        }
        d = e.join('');
        d = k(d).appendTo(this.pageHolder);
        this.page = d.filter('input').bind('change', function (e) {
            var h = k(this),
            w = h.val();
            if (isNaN(w) || 1 > w) return h.val(f.curPage),
            !1;
            w = parseInt(w);
            if (w > f.totalPages || !1 === a._onChange(e, w)) return h.val(f.curPage),
            !1
        });
        this.$total = d.filter('span.total')
    };
    a._onChange = function (a, f) {
        if (!1 === this._trigger('beforeChange', a, {
            curPage: f
        }) || !1 === this._trigger('change', a, {
            curPage: f
        })) return !1;
        this.option({
            curPage: f
        })
    };
    a._refresh = function () {
        this._refreshPage();
        var a = this,
        f = this.options,
        d = f.bootstrap;
        this.rPPHolder.empty();
        if (f.strRpp) {
            var l = f.rPPOptions,
            e = f.strRpp;
            if ( - 1 != e.indexOf('{0}')) {
                for (var d = [
                    '<select class=\'',
                    d.on ? '' : 'ui-corner-all',
                    '\'>'
                ], h = 0, w = l.length; h < w; h++) {
                    var A = l[h];
                    d.push('<option value="', A, '">', A, '</option>')
                }
                d.push('</select>');
                l = d.join('');
                e = e.replace('{0}', '</span>' + l);
                e = '<span>' + e + '<span class=\'pq-separator\'></span>'
            } else e = '<span>' + e + '</span><span class=\'pq-separator\'></span>';
            this.$rPP = k(e).appendTo(this.rPPHolder).filter('select').val(f.rPP).change(function (e) {
                var h = k(this),
                w = h.val();
                if (!1 ===
                a._trigger('beforeChange', e, {
                    rPP: w
                })) return h.val(a.options.rPP),
                !1;
                !1 !== a._trigger('change', e, {
                    rPP: w
                }) && (a.options.rPP = w)
            })
        }
        e = f.bootstrap.on;
        l = f.curPage >= f.totalPages;
        c(e, this.next, l);
        c(e, this.last, l);
        l = 1 >= f.curPage;
        c(e, this.first, l);
        c(e, this.prev, l);
        this.page.val(f.curPage);
        this.$total.text(f.totalPages);
        0 < this.options.totalRecords ? (e = f.rPP, l = f.curPage, d = f.totalRecords, h = l * e, h > d && (h = d), f = f.strDisplay, f = f.replace('{0}', (l - 1) * e + 1), f = f.replace('{1}', h), f = f.replace('{2}', d), this.$msg.html(f))  : this.$msg.html('')
    };
    a.getInstance = function () {
        return {
            pager: this
        }
    };
    a._trigger = d._trigger;
    a.on = d.on;
    a.one = d.one;
    a.off = d.off
}) (jQuery);
(function (k) {
    function n(a, b) {
        return a ? '<div class=\'' + b + '\'></div>' : '<div class=\'ui-icon ui-icon-' + b + '\'></div>'
    }
    var g = k.paramquery,
    c = {
        options: {
            length: 200,
            num_eles: 3,
            trigger: !1,
            cur_pos: 0,
            ratio: 0,
            timeout: 350,
            pace: 'optimum',
            direction: 'vertical',
            bootstrap: {
                on: !1,
                slider: 'btn btn-default',
                up: 'glyphicon glyphicon-chevron-up',
                down: 'glyphicon glyphicon-chevron-down',
                left: 'glyphicon glyphicon-chevron-left',
                right: 'glyphicon glyphicon-chevron-right'
            },
            theme: !1
        },
        _destroy: function () {
            k(document).off('.' + this.eventNamespace);
            this.element.removeClass('pq-sb pq-sb-vert pq-sb-vert-t pq-sb-vert-wt').enableSelection().removeClass('pq-sb-horiz pq-sb-horiz-t pq-sb-horiz-wt').unbind('click.pq-scrollbar').empty();
            this.element.removeData()
        },
        _create: function () {
            this.listeners = {
            };
            this._createLayout()
        },
        _setOption: function (a, b) {
            var f = this.options;
            'disabled' == a ? (this._super(a, b), !0 == b ? this.$slider.draggable('disable')  : this.$slider.draggable('enable'))  : 'theme' == a ? (f[a] = b, this._createLayout())  : 'ratio' == a ? 0 <= b && 1 >= b && (f[a] = b)  : f[a] = b
        },
        _setOptions: function () {
            this._super.apply(this, arguments);
            this.refresh()
        }
    };
    k.widget('paramquery.pqScrollBar', c);
    pq.scrollbar = function (a, b) {
        var f = k(a).pqScrollBar(b);
        return f.data('paramqueryPqScrollBar') || f.data('paramquery-pqScrollBar')
    };
    c = g.pqScrollBar.prototype;
    g.pqScrollBar.defaults = c.options;
    c._createLayout = function () {
        var a = this,
        b = this.options,
        f = b.bootstrap,
        m = f.on,
        c = b.direction,
        e = this.eventNamespace,
        h = b.theme,
        w = this.element.empty();
        'vertical' == c ? (w.removeClass('pq-sb-vert-t pq-sb-vert-wt').addClass('pq-sb pq-sb-vert'), h ? (w.addClass('pq-sb-vert-t'), w[0].innerHTML = [
            '<div class=\'top-btn pq-sb-btn ',
            m ? '' : 'ui-state-default ui-corner-top',
            '\'>',
            n(m, m ? f.up : 'triangle-1-n'),
            '</div><div class=\'pq-sb-slider ',
            m ? f.slider : 'ui-corner-all ui-state-default',
            '\'></div><div class=\'bottom-btn pq-sb-btn ',
            m ? '' : 'ui-state-default ui-corner-bottom',
            '\'>',
            n(m, m ? f.down : 'triangle-1-s'),
            '</div>'
        ].join(''))  : (w.addClass('pq-sb-vert-wt'), w[0].innerHTML = '<div class=\'top-btn pq-sb-btn\'></div><div class=\'pq-sb-slider\'><div class=\'vert-slider-top\'></div><div class=\'vert-slider-bg\'></div><div class=\'vert-slider-center\'></div><div class=\'vert-slider-bg\'></div><div class=\'vert-slider-bottom\'></div></div><div class=\'bottom-btn pq-sb-btn\'></div>'))  : (w.removeClass('pq-sb-horiz-t pq-sb-horiz-wt').addClass('pq-sb pq-sb-horiz'), h ? (w.addClass('pq-sb-horiz-t'), w[0].innerHTML = [
            '<div class=\'left-btn pq-sb-btn ',
            m ? '' : 'ui-state-default ui-corner-left',
            '\'>',
            n(m, m ? f.left : 'triangle-1-w'),
            '</div><div class=\'pq-sb-slider pq-sb-slider-h ',
            m ? f.slider : 'ui-state-default ui-corner-all',
            '\'></div><div class=\'right-btn pq-sb-btn ',
            m ? '' : 'ui-state-default ui-corner-right',
            '\'>',
            n(m, m ? f.right : 'triangle-1-e'),
            '</div>'
        ].join(''))  : (w.addClass('pq-sb-horiz-wt'), w.width(this.width), w[0].innerHTML = '<div class=\'left-btn pq-sb-btn\'></div><div class=\'pq-sb-slider pq-sb-slider-h\'><span class=\'horiz-slider-left\'></span><span class=\'horiz-slider-bg\'></span><span class=\'horiz-slider-center\'></span><span class=\'horiz-slider-bg\'></span><span class=\'horiz-slider-right\'></span></div><div class=\'right-btn pq-sb-btn\'></div>'));
        w.disableSelection().unbind('.pq-scrollbar').on('mousedown.pq-scrollbar', function (h) {
            if (!b.disabled && !a.$slider.is(':hidden')) if (k(document).off('.' + e).on('mouseup.' +
            e, function (e) {
                a._mouseup(e)
            }), 'vertical' == c) {
                var w = h.pageY,
                f = a.element.offset().top,
                m = f + b.length,
                x = a.$slider,
                g = x.offset().top,
                u = x.height(),
                x = g + u;
                w < g && w > f + 17 ? a._setTimerPageLeft(w, u, h, 0)  : w > x && w < m - 17 && a._setTimerPageRight(w, u, h, 0)
            } else w = h.pageX,
            f = a.element.offset().left,
            m = f + b.length,
            g = a.$slider.offset().left,
            x = g + a.$slider.width(),
            w < g && w > f + 17 ? (a.$slider.css('left', w - a.element.offset().left), a._updateCurPosAndTrigger(h))  : w > x && w < m - 17 && (a.$slider.css('left', w - a.element.offset().left - a.$slider.width()), a._updateCurPosAndTrigger(h))
        });
        f = this.$slider = k('div.pq-sb-slider', this.element);
        f.attr('tabindex', '0');
        this._bindSliderEvents(f);
        this.$top_btn = k('div.top-btn,div.left-btn', this.element).click(function (e) {
            if (!a.options.disabled) return a.decr_cur_pos(e),
            !1
        }).mousedown(function (e) {
            if (!a.options.disabled) return a.mousedownTimeout = setTimeout(function () {
                a.mousedownInterval = setInterval(function () {
                    a.decr_cur_pos(e)
                }, 0)
            }, a.options.timeout),
            !1
        }).bind('mouseup mouseout', function (e) {
            a._mouseup(e)
        });
        this.$bottom_btn = k('div.bottom-btn,div.right-btn', this.element).click(function (e) {
            if (!a.options.disabled) return a.incr_cur_pos(e),
            !1
        }).mousedown(function (e) {
            if (!a.options.disabled) return a.mousedownTimeout = setTimeout(function () {
                a.mousedownInterval = setInterval(function () {
                    a.incr_cur_pos(e)
                }, 0)
            }, a.options.timeout),
            !1
        }).bind('mouseup mouseout', function (e) {
            a._mouseup(e)
        });
        this.refresh()
    };
    var a = 0;
    c._setTimerPageLeft = function (d, b, f, m) {
        var c = this,
        e = c.options;
        this.mousedownTimeout = window.setTimeout(function () {
            if (d >= c.$slider.offset().top) c._mouseup();
             else {
                c._pageLeft(f);
                var h = a ? 0 : e.timeout;
                a++;
                c._setTimerPageLeft(d, b, f, h)
            }
        }, m)
    };
    c._setTimerPageRight = function (d, b, f, c) {
        var l = this;
        this.mousedownTimeout = window.setTimeout(function () {
            if (d <= l.$slider.offset().top + b) l._mouseup();
             else {
                l._pageRight(f);
                var e = a ? 0 : l.options.timeout;
                a++;
                l._setTimerPageRight(d, b, f, e)
            }
        }, c)
    };
    c._bindSliderEvents = function (a) {
        var b = this,
        f = 'x';
        'vertical' == this.options.direction && (f = 'y');
        a.draggable({
            axis: f,
            helper: function (a, f) {
                b._setDragLimits();
                return this
            },
            start: function (a) {
                b.topWhileDrag = null;
                b.dragging = !0
            },
            drag: function (a) {
                b.dragging = !0;
                var f = b.options.pace;
                'optimum' == f ? b._setNormalPace(a)  : 'fast' == f && b._updateCurPosAndTrigger(a)
            },
            stop: function (a) {
                'fast' != b.options.pace && b._updateCurPosAndTrigger(a);
                b.dragging = !1;
                b.refresh()
            }
        }).on('keydown.pq-scrollbar', function (a) {
            var f = a.keyCode,
            e = b.options,
            h = e.cur_pos,
            w = e.ratio,
            A = e.num_eles,
            d = k.ui.keyCode;
            null == b.keydownTimeout && (b.keydownTimeout = window.setTimeout(function () {
                f == d.DOWN || f == d.RIGHT ? b.incr_cur_pos(a)  : f == d.UP || f == d.LEFT ? b.decr_cur_pos(a)  :
                f == d.HOME ? e.steps ? 0 < h && (e.cur_pos = 0, b.updateSliderPos(), b.scroll(a))  : 0 < w && (e.ratio = 0, b.updateSliderPos(), b.drag(a))  : f == d.END ? e.steps ? h < A && (e.cur_pos = A, b.updateSliderPos(), b.scroll(a))  : 1 > w && (e.ratio = 1, b.updateSliderPos(), b.drag(a))  : 'vertical' == e.direction && (f == d.PAGE_DOWN ? b._pageRight(a)  : f == d.PAGE_UP && b._pageLeft(a));
                b.keydownTimeout = null
            }, 0));
            if (f == d.DOWN || f == d.RIGHT || f == d.UP || f == d.LEFT || f == d.PAGE_DOWN || f == d.PAGE_UP || f == d.HOME || f == d.END) return a.preventDefault(),
            !1
        })
    };
    c.decr_cur_pos = function (a) {
        var b = this.options;
        if (b.steps) 0 < b.cur_pos && (b.cur_pos--, this.updateSliderPos(), this.scroll(a));
         else if (0 < b.ratio) {
            var f = b.ratio - 1 / (b.num_eles - 1);
            0 > f && (f = 0);
            b.ratio = f;
            this.updateSliderPos();
            this.drag(a)
        }
    };
    c.incr_cur_pos = function (a) {
        var b = this.options;
        if (b.steps) b.cur_pos < b.num_eles - 1 && b.cur_pos++,
        this.updateSliderPos(),
        this.scroll(a);
         else {
            if (1 > b.ratio) {
                var f = b.ratio + 1 / (b.num_eles - 1);
                1 < f && (f = 1);
                b.ratio = f
            }
            this.updateSliderPos();
            this.drag(a)
        }
    };
    c._mouseup = function (d) {
        this.options.disabled || (a = 0, window.clearTimeout(this.mousedownTimeout), this.mousedownTimeout = null, window.clearInterval(this.mousedownInterval), this.mousedownInterval = null)
    };
    c._setDragLimits = function () {
        var a = this.options;
        if ('vertical' == a.direction) {
            var b = this.element.offset().top + 17,
            a = b + a.length - 34 - this.slider_length;
            this.$slider.draggable('option', 'containment', [
                0,
                b,
                0,
                a
            ])
        } else b = this.element.offset().left + 17,
        a = b + a.length - 34 - this.slider_length,
        this.$slider.draggable('option', 'containment', [
            b,
            0,
            a,
            0
        ])
    };
    c._validateCurPos = function () {
        var a = this.options;
        a.cur_pos >= a.num_eles && (a.cur_pos = a.num_eles - 1);
        0 > a.cur_pos && (a.cur_pos = 0)
    };
    c._updateSliderPosRatio = function () {
        var a = this.options,
        b = a.direction,
        f = a.ratio,
        c = this.$slider[0],
        a = a.length - 34 - this.slider_length;
        if (null == f) throw 'updateSliderPosRatio ratio N/A';
        f = f * a + 17;
        'vertical' == b ? c.style.top = f + 'px' : c.style.left = f + 'px'
    };
    c._updateSliderPosCurPos = function () {
        var a = this.options,
        b = this.$slider[0],
        f = this.scroll_space * a.cur_pos / (a.num_eles - 1);
        'vertical' == a.direction ? b.style.top = 17 + f + 'px' : b.style.left = 17 + f + 'px'
    };
    c.updateSliderPos = function () {
        var a = this.options;
        if (void 0 === a.steps) throw 'updateSliderPos. steps N/A';
        a.steps ? this._updateSliderPosCurPos()  : this._updateSliderPosRatio()
    };
    c.scroll = function (a) {
        var b = this.options;
        this._trigger('scroll', a, {
            cur_pos: b.cur_pos,
            num_eles: b.num_eles
        })
    };
    c.drag = function (a) {
        this._trigger('drag', a, {
            ratio: this.options.ratio
        })
    };
    c._pageRight = function (a) {
        this._trigger('pageRight', a, null)
    };
    c._pageLeft = function (a) {
        this._trigger('pageLeft', a, null)
    };
    c._setSliderBgLength = function () {
        var a = this.options,
        b = a.theme,
        f = this.$slider,
        c = a.length,
        c = Math.round(((c - 34) * c / (40 * a.num_eles + c) - 14) / 2);
        1 > c && (c = 1);
        var l = 14 + 2 * c;
        this.scroll_space = a.length - 34 - l;
        if (l !== this.slider_length) if (this.slider_length = l, a = 'vertical' === a.direction ? {
            dim: 'height',
            cls: '.vert-slider-bg'
        }
         : {
            dim: 'width',
            cls: '.horiz-slider-bg'
        }, b) f[a.dim](l - 2);
         else k(a.cls, this.element) [a.dim](c),
        f[a.dim](l)
    };
    c._updateCurPosAndTrigger = function (a, b) {
        var f = this.options,
        c = f.direction,
        l = this.$slider;
        null == b && (b = parseInt(l[0].style['vertical' === c ? 'top' : 'left']));
        c = (b - 17) / (f.length -
        34 - this.slider_length);
        if (f.steps) {
            if (c *= f.num_eles - 1, c = Math.round(c), f.cur_pos != c) {
                if (this.dragging) {
                    if (null != this.topWhileDrag && (this.topWhileDrag < b && f.cur_pos > c || this.topWhileDrag > b && f.cur_pos < c)) return;
                    this.topWhileDrag = b
                }
                this.options.cur_pos = c;
                this.scroll(a)
            }
        } else f.ratio = c,
        this.drag(a)
    };
    c._setNormalPace = function (a) {
        this.timer && (window.clearInterval(this.timer), this.timer = null);
        var b = this,
        f = this.options.direction;
        b.timer = window.setInterval(function () {
            var c = parseInt(b.$slider[0].style['vertical' ===
            f ? 'top' : 'left']);
            b.prev_top === c && (b._updateCurPosAndTrigger(a, c), window.clearInterval(b.timer), b.timer = null);
            b.prev_top = c
        }, 20)
    };
    c.refresh = function () {
        var a = this.options,
        b = this.$slider[0],
        f = this.element;
        1 >= a.num_eles ? f[0].style.display = 'none' : (f[0].style.display = '', this._validateCurPos(), this.dragging || (f['vertical' === a.direction ? 'height' : 'width'](a.length), this._setSliderBgLength(), b.style.display = 4 > this.scroll_space || 1 >= a.num_eles ? 'none' : ''), this.updateSliderPos())
    };
    c._trigger = g._trigger;
    c.on = g.on;
    c.one = g.one;
    c.off = g.off
}) (jQuery);
(function (k) {
    k.paramquery = k.paramquery || {
    };
    k.paramquery.onResize = function (n, g) {
        var c = k(n);
        'static' === c.css('position') && c.css('position', 'relative');
        var a = k('<iframe type="text/html" src="about:blank" class="pq-resize-iframe" style="display:block;width:100%;height:100%;position:absolute;top:0;left:0;z-index:-1;overflow: hidden; pointer-events: none;" />').appendTo(c);
        a[0].data = 'about:blank';
        a.css('opacity', '0');
        for (var d = 0; d < c.length; d++) k(a[d].contentWindow).on('resize', function (a) {
            g()
        })
    }
}) (jQuery);
(function (k) {
    function n(e) {
        return '<span class=\'btn btn-xs glyphicon glyphicon-' + e + '\' ></span>'
    }
    function g(e) {
        return '<span class=\'ui-widget-header pq-ui-button\'><span class=\'ui-icon ui-icon-' + e + '\'></span></span>'
    }
    var c = function () {
    };
    c.prototype.belongs = function (e) {
        if (e.target == this.that.element[0]) return !0
    };
    var a = k.paramquery;
    a.cClass = c;
    var d = function (e) {
        this.that = e;
        var h = this.options = e.options,
        w = this;
        w.odd = [
        ];
        if (null != h.postRenderInterval) e.on('refresh', function () {
            w.prColDef.length && w.postRenderAll()
        }).on('refreshRow', function (e, h) {
            w.prColDef.length && w.postRenderRow(h)
        }).on('refreshCell', function (e, h) {
            h.column.postRender && w.postRenderRow(h)
        }).on('refreshColumn', function (e, h) {
            h.column.postRender && w.setTimerPostRender(0, h.colIndx, h.column)
        });
        if (!h.mergeModel.flex) e.on('refresh refreshCell refreshRow refreshColumn', w.onRefreshMerge(e))
    };
    a.cGenerateView = d;
    c = d.prototype = new c;
    c.onRefreshMerge = function (e) {
        return function () {
            for (var h = e.$cont.find('.pq-merge-cell-div'), w, a, b, f, d = h.length, c = [
            ], m = [
            ]; d--; ) w = h[d],
            w = w.parentNode,
            a || (a = 2 * parseInt(k(w).css('paddingTop')), b = 2 * parseInt(k(w).css('paddingLeft'))),
            f = Math.max(w.offsetHeight, 28),
            f -= a,
            w = w.offsetWidth - b,
            c[d] = f - 1 + 'px',
            m[d] = w + 'px';
            for (d = h.length; d--; ) w = h[d],
            w.style.height = c[d],
            w.style.width = m[d]
        }
    };
    c.generateView = function (e) {
        e = e || {
        };
        var h = this.that,
        w = h.options,
        b = 'flex' === w.width,
        f = 'flex' === w.height,
        d = w.cls,
        c = d.cont_inner,
        m = d.cont_inner_b,
        l,
        g,
        k = h.initH,
        y = h.finalH,
        s = h.pqpanes;
        if (e.$cont) l = this._generateTables(null, null, e),
        d = e.$cont,
        d.empty(),
        d[0].innerHTML = s.v ? [
            '<div class=\'',
            c,
            '\'>',
            l,
            '</div><div class=\'',
            c,
            '\'>',
            l,
            '</div>'
        ].join('')  : [
            '<div class=\'',
            c,
            '\'>',
            l,
            '</div>'
        ].join(''),
        w = d.children('div').children('table'),
        h.tables[0] = {
            $tbl: w,
            $cont: d
        };
         else {
            l = h.initV;
            g = h.finalV;
            var z = h.pdata,
            d = h.$cont;
            null != w.editModel.indices && h.blurEditor({
                force: !0
            });
            k = {
                pageData: z,
                initV: l,
                finalV: g,
                initH: k,
                finalH: y,
                source: e.source
            };
            h._trigger('beforeTableView', null, k);
            l = this._generateTables(l, g, e);
            d.empty();
            0 === h.totalVisibleRows ? d.append('<div class=\'' + c + ' pq-grid-norows\' >' + w.strNoRows + '</div>')  : (e = f || b ? 'style=\'position:relative;\'' : '', d[0].innerHTML = s.h && s.v ? [
                '<div class=\'',
                c,
                '\'>',
                l,
                '</div><div class=\'',
                c,
                '\'>',
                l,
                '</div><div class=\'',
                c,
                ' ',
                m,
                '\'>',
                l,
                '</div><div class=\'',
                c,
                ' ',
                m,
                '\'>',
                l,
                '</div>'
            ].join('')  : s.v ? [
                '<div class=\'',
                c,
                '\' ',
                e,
                ' >',
                l,
                '</div><div class=\'',
                c,
                '\' >',
                l,
                '</div>'
            ].join('')  : s.h ? [
                '<div class=\'',
                c,
                '\' style=\'position:static;\' >',
                l,
                '</div><div class=\'',
                c,
                ' ',
                m,
                '\' style=\'position:static;\' >',
                l,
                '</div>'
            ].join('')  : [
                '<div class=\'',
                c,
                '\' ',
                e,
                ' >',
                l,
                '</div>'
            ].join(''));
            h.$tbl = d.children('div').children('table');
            if (w.scrollModel.flexContent && h.$tbl[0]) a.onResize(h.$tbl[0], function () {
                var e = h.iRefresh;
                e.ignoreTResize || e.softRefresh()
            });
            this.setPaneEvents();
            h._trigger('refresh', null, k)
        }
        this.setPanes()
    };
    c.postRenderRow = function (e) {
        var h = this.that,
        w = this.prColDef,
        a = h.iMerge,
        b = e.rowIndx,
        f;
        null != e.colIndx && (w = [
            {
                colIndx: e.colIndx,
                column: e.column
            }
        ]);
        for (var d = 0, c = w.length; d < c; d++) e = w[d],
        f = e.column.postRender,
        e = e.colIndx,
        a.ismergedCell(b, e) ? a.isRootCell(b, e, 'a') && (e = a.getRootCell(b, e), f.call(h, e))  : (e = h.normalize({
            rowIndx: b,
            colIndx: e
        }), f.call(h, e))
    };
    c.setTimerPostRender = function (e, h, w) {
        var a = this.that,
        b = this,
        f = a.pdata,
        d = function (e) {
            return - 1 == a.options.postRenderInterval ? e()  : setTimeout(e, 0)
        };
        f && f.length && (b.postRenderTimeoutID = d(function () {
            var d = a.initV,
            c = a.options.freezeRows;
            e < d && e >= c && (e = d);
            f[e].pq_hidden || b.postRenderRow({
                column: w,
                colIndx: h,
                rowIndx: e + a.rowIndxOffset
            });
            e++;
            e <= a.finalV && b.setTimerPostRender(e)
        }))
    };
    c.postRenderAll = function () {
        var e = this.that,
        h = this,
        w = e.pdata,
        a = e.options.postRenderInterval,
        e = function (e) {
            return - 1 ==
            a ? e()  : setTimeout(e, a)
        };
        w && w.length && (clearTimeout(h.postRenderTimeoutID), h.postRenderTimeoutID = e(function () {
            h.setTimerPostRender(0)
        }))
    };
    c.scrollView = function () {
        var e = this.that,
        h = this.options,
        w = h.virtualY;
        h.virtualX || e.hscroll.drag();
        w || e.vscroll.drag()
    };
    c.setPaneEvents = function () {
        var e = this.that,
        h = e.pqpanes,
        w = e.$cont.children('div'),
        a = e.iMouseSelection;
        if ((e = e.$tbl) && e.length) if (h.h && h.v) {
            var h = k(w[0]),
            e = k(w[1]),
            b = k(w[2]),
            w = k(w[3]);
            h.on('scroll', function (e) {
                this.scrollLeft = this.scrollTop = 0
            });
            e.on('scroll', function (e) {
                this.scrollTop = 0;
                this.scrollLeft = a.getScrollLeft(!0)
            });
            b.on('scroll', function (e) {
                this.scrollTop = a.getScrollTop(!0);
                this.scrollLeft = 0
            });
            w.on('scroll', function (e) {
                this.scrollTop = a.getScrollTop(!0);
                this.scrollLeft = a.getScrollLeft(!0)
            })
        } else if (h.v) h = k(w[0]),
        w = k(w[1]),
        h.on('scroll', function (e) {
            this.scrollTop = a.getScrollTop(!0);
            this.scrollLeft = 0
        }),
        w.on('scroll', function (e) {
            this.scrollTop = a.getScrollTop(!0);
            this.scrollLeft = a.getScrollLeft(!0)
        });
         else if (h.h) h = k(w[0]),
        w = k(w[1]),
        h.on('scroll', function (e) {
            this.scrollTop = 0;
            this.scrollLeft = a.getScrollLeft(!0)
        }),
        w.on('scroll', function (e) {
            this.scrollTop = a.getScrollTop(!0);
            this.scrollLeft = a.getScrollLeft(!0)
        });
         else w.on('scroll', function (e) {
            this.scrollTop = a.getScrollTop(!0);
            this.scrollLeft = a.getScrollLeft(!0)
        })
    };
    c.setPanes = function () {
        var e = this.that,
        h = e.pqpanes,
        w = e.$cont.children('div'),
        a = e.iRefresh,
        b = e.$tbl,
        f = e.options,
        d = e.calcWidthCols( - 1, 1 * f.freezeCols) + 1,
        c = 'flex' !== f.width || f.maxWidth ? a.getEContWd()  : '';
        if (e.tables.length) {
            var m = e.tables[0].$tbl,
            l = e.tables[0].$cont,
            g = m.parent('div');
            h.v ? (k(g[0]).css({
                width: d
            }), k(g[1]).css({
                left: d,
                width: c - d
            }), k(m[1]).css({
                left: - 1 * d
            }))  : k(g[0]).css({
                width: c
            });
            l.height(m[0].scrollHeight - 1);
            a.setContHeight()
        }
        if (b && b.length) if (a = 'flex' !== f.height || f.maxHeight ? a.getEContHt()  : '', h.h && h.v) {
            var m = k(w[0]),
            l = k(w[1]),
            g = k(b[1]),
            y = k(w[2]),
            s = k(b[2]),
            w = k(w[3]),
            z = k(b[3]),
            b = e.calcHeightFrozenRows();
            m.css({
                width: d,
                height: b
            });
            l.css({
                left: d,
                width: c - d,
                height: b
            });
            g.css({
                left: - 1 * d
            });
            y.css({
                width: d,
                top: b,
                height: a - b
            });
            s.css({
                marginTop: - (b +
                1)
            });
            w.css({
                left: d,
                width: c - d,
                top: b,
                height: a - b
            });
            z.css({
                marginTop: - (b + 1),
                left: - 1 * d
            })
        } else h.v ? (m = k(w[0]), w = k(w[1]), b = k(b[1]), m.css({
            width: d,
            height: a
        }), w.css({
            left: d,
            width: c - d,
            height: a
        }), b.css({
            left: - 1 * d
        }))  : h.h ? (m = k(w[0]), w = k(w[1]), l = k(b[1]), b = e.calcHeightFrozenRows(), m.css({
            height: b,
            width: c
        }), w.css({
            width: c,
            top: b,
            height: a - b
        }), l.css({
            marginTop: - (b + 1)
        }))  : w.css({
            width: c,
            height: a
        });
        f.showHeader && (h.vH ? (e.$header_left.css({
            width: d
        }), e.$header_right.css({
            left: d,
            width: c - d
        }), e.$header_right_inner.css({
            left: - d
        }))  :
        e.$header_left.css({
            width: c
        }))
    };
    c.createColDefs = function () {
        for (var e = this.that, h = e.colModel, a = e.initH, b = e.finalH, e = e.options.freezeCols, f = [
        ], d = [
        ], c = 0; c <= b; c++) {
            if (c < a && c >= e && (c = a, c > b)) throw 'initH>finalH';
            var m = h[c];
            m.hidden || (f.push({
                column: m,
                colIndx: c
            }), m.postRender && 'function' == typeof m.postRender && d.push({
                column: m,
                colIndx: c
            }))
        }
        this.colDef = f;
        this.prColDef = d
    };
    c._generateTables = function (e, h, a) {
        a = a || {
        };
        var b = this.that,
        f = b.options,
        d = f.bootstrap,
        c = f.numberCell,
        m = !0,
        l = 1 * f.freezeRows,
        g = 0,
        k = a.other,
        y = this.odd;
        h = k ? a.data.length - 1 : h;
        k ? a = a.data : (a = b.pdata, this.setFrozenRip(a, l));
        if (k || null != e && null != h) {
            g = [
                'pq-grid-table'
            ];
            d.on && g.push(d.tbody);
            f.columnBorders && g.push('pq-td-border-right');
            f.rowBorders && g.push('pq-td-border-top');
            g.push(f.wrap ? 'pq-wrap' : 'pq-no-wrap');
            f = [
                '<table class=\'' + g.join(' ') + '\' >'
            ];
            f.push('<tr class=\'pq-row-hidden\'>');
            if (c.show) {
                var s = c.width;
                f.push('<td style=\'width:' + s + 'px;\' ></td>')
            }
            g = this.colDef;
            c = 0;
            for (d = g.length; c < d; c++) s = g[c],
            b = s.colIndx,
            s = s.column.outerWidth,
            f.push('<td style=\'width:', s, 'px;\' pq-col-indx=\'', b, '\'></td>');
            f.push('</tr>');
            for (g = 0; g <= h; g++) g < e && g >= l && (g = e),
            c = a[g],
            d = g,
            c && c.pq_hidden || (y[d] = m = !m, b = c.pq_detail && c.pq_detail.show, this._generateRow(c, d, f, k, b), b && this._generateDetailRow(c, d, f));
            f.push('</table>');
            return f.join('')
        }
    };
    c.appendRow = function (e) {
        var h = this.that,
        a = h.pdata,
        b = h.colModel,
        f = h.finalV;
        f + e > a.length && (e = a.length - f);
        if (e) {
            if (1 < e) throw 'noRows > 1';
            h._trigger('beforeTableView', null, {
                pageData: a,
                initV: f,
                finalV: f,
                initH: h.initH,
                finalH: h.finalH,
                colModel: b
            });
            h.refreshRow({
                rowIndxPage: f,
                refresh: !1
            })
        }
        return e
    };
    c.prependRow = function (e) {
        var h = this.that,
        a = h.options.freezeRows,
        b = h.calcVisibleRows(h.pdata, 0, a),
        f = h.pdata,
        d = h.initV,
        c = h.colModel;
        if (h._mergeCells) {
            if (b) for (b = 0; b < a; b++) h.refreshRow({
                rowIndxPage: b,
                refresh: !1
            });
            h.refreshRow({
                rowIndxPage: d + 1,
                refresh: !1
            })
        }
        h._trigger('beforeTableView', null, {
            pageData: f,
            initV: d,
            finalV: d,
            initH: h.initH,
            finalH: h.finalH,
            colModel: c
        });
        h.refreshRow({
            rowIndxPage: d,
            refresh: !1
        });
        return e
    };
    c.removeTopRow = function (e) {
        for (var h = this.that, a = h.options.freezeRows, b = h.calcVisibleRows(h.pdata, 0, a), f = h.$tbl, d = k([]), c = 0; c < f.length; c++) var m = k(f[c]).children('tbody').children('tr:gt(0)').slice(b, e + b),
        d = d.add(m);
        d.remove();
        if (h._mergeCells) {
            if (b) for (c = 0; c < a; c++) h.refreshRow({
                rowIndxPage: c,
                refresh: !1
            });
            h.refreshRow({
                rowIndxPage: h.initV,
                refresh: !1
            })
        }
    };
    c.removeBottomRow = function (e) {
        var h = this.that.$tbl;
        if (e) for (var a = 0; a < h.length; a++) k(h[a]).children('tbody').children('tr:gt(0)').slice( - e).remove()
    };
    c.format = function () {
        var e = k.datepicker,
        h = pq.formatNumber;
        return function (a, b, f) {
            if ('date' == f) {
                if (!isNaN(Date.parse(a))) return e.formatDate(b, new Date(a))
            } else return h(a, b)
        }
    }();
    c.renderCell = function (e) {
        var h = this.that,
        a = [
        ],
        b = [
        ],
        f = e.Export,
        d = !1,
        c = this.options,
        l = [
            'pq-grid-cell'
        ];
        if (!e.other && !f && h._mergeCells) {
            e = h.iMerge.renderCell(e);
            if (null == e) return '';
            e.rowspan && (a.push('rowspan=\'' + e.rowspan + '\'', 'colspan=\'' + e.colspan + '\''), c.mergeModel.flex || (d = !0, l.push('pq-merge-cell')));
            e.style && b.push(e.style);
            e.cls && l.push(e.cls)
        }
        var g = e.rowData,
        k = e.column,
        r = e.colIndx,
        y = k.dataIndx,
        s = c.freezeCols,
        c = c.columnBorders;
        if (g) {
            f || (a.push('pq-col-indx=\'' + r + '\''), 'right' == k.align ? l.push('pq-align-right')  : 'center' == k.align && l.push('pq-align-center'), r == s - 1 && c && l.push('pq-last-frozen-col'), (r = k.cls) && l.push(r), (r = h.iSelection.dirty ? null : g.pq_cellselect) && r[y] && l.push(h.iCells.hclass));
            var z,
            s = g[y],
            r = (r = k.format) ? this.format(s, r, k.dataType)  : s;
            e.dataIndx = y;
            e.cellData = s;
            e.formatVal = r;
            if (k.render && (z = k.render.call(h, e)) && 'string' != typeof z) {
                var s = z.attr,
                c = z.cls,
                n = z.style;
                s && a.push(s);
                c && l.push(c);
                n && b.push(n);
                z = z.text
            }
            null == z && k._render && (z = k._render.call(h, e));
            z && 'string' != typeof z && (s = z.attr, c = z.cls, n = z.style, s && a.push(s), c && l.push(c), n && b.push(n), z = z.text);
            null == z && (z = r);
            if (f) return z;
            if ('' === z || void 0 == z) z = '&nbsp;';
            (e = g.pq_cellcls) && (e = e[y]) && l.push(e);
            if (g = g.pq_cellattr) if (y = g[y]) {
                var y = m(y),
                B;
                for (B in y) g = y[B],
                'style' == B ? b.push(g)  : a.push(B + '="' + g + '"')
            }
            b = b.length ? ' style=\'' + b.join('') + '\' ' : '';
            return ['<td class=\'',
            l.join(' '),
            '\' ',
            a.join(' '),
            b,
            ' >',
            d ? '<div class=\'pq-merge-cell-div\'><div><div class=\'pq-merge-inner\'>' :
            '',
            z,
            d ? '</div></div></div>' : '',
            '</td>'].join('')
        }
    };
    c.setFrozenRip = function (e, h) {
        if (e) {
            for (var a; h-- && (a = e[h]) && a.pq_hidden; );
            this.frozenRip = h
        }
    };
    c.refreshRow = function (e, h) {
        var a = this.that.pdata[e];
        this._generateRow(a, e, h, null, a.pq_detail && a.pq_detail.show)
    };
    c._generateRow = function (e, h, a, b, f) {
        var d = [
            'pq-grid-row'
        ];
        this.frozenRip === h && d.push('pq-last-frozen-row');
        f && d.push('pq-detail-master');
        var c = this.that,
        l = this.options,
        g = l.rowInit;
        f = l.numberCell;
        var k = '',
        r = '',
        y = c.rowIndxOffset,
        s = h + y;
        g && (g = g.call(c, {
            rowData: e,
            rowIndxPage: h,
            rowIndx: s
        })) && (g.cls && d.push(g.cls), k += g.attr ? ' ' + g.attr : '', r += g.style ? g.style : '');
        l.stripeRows && this.odd[h] && d.push('pq-grid-oddRow');
        e.pq_rowselect && d.push(c.iRows.hclass);
        c = e.pq_rowcls;
        null != c && d.push(c);
        if (c = e.pq_rowattr) {
            var c = m(c),
            z;
            for (z in c) k += ' ' + z + '="' + c[z] + '"'
        }
        r = r ? 'style=\'' + r + '\'' : '';
        a.push('<tr pq-row-indx=\'', h, '\' class=\'', d.join(' '), '\' ', k, ' ', r, ' >');
        f.show && a.push(['<td pq-col-indx=\'-1\' class=\'pq-grid-number-cell\'>',
        b ? '&nbsp;' : s + 1,
        '</td>'].join(''));
        e = {
            rowIndx: h +
            y,
            rowIndxPage: h,
            other: b,
            rowData: e
        };
        h = this.colDef;
        b = 0;
        for (d = h.length; b < d; b++) z = h[b],
        f = z.colIndx,
        e.column = z.column,
        e.colIndx = f,
        a.push(this.renderCell(e));
        a.push('</tr>');
        return a
    };
    c._generateDetailRow = function (e, h, a) {
        var b = [
            'pq-grid-row pq-detail-child'
        ],
        f = this.that,
        d = f.options,
        c = d.numberCell;
        d.stripeRows && this.odd[h] && b.push('pq-grid-oddRow');
        e.pq_rowselect && b.push(f.iRows.hclass);
        e = e.pq_rowcls;
        null != e && b.push(e);
        a.push('<tr pq-row-indx=\'' + h + '\' class=\'' + b.join(' ') + '\' >');
        c.show && a.push('<td class=\'pq-grid-number-cell\'>&nbsp;</td>');
        a.push('<td class=\'pq-grid-cell pq-detail-child\' colSpan=\'20\'></td>');
        a.push('</tr>');
        return a
    };
    c = {
        widgetEventPrefix: 'pqgrid',
        _create: function () {
            var e = this,
            h = this.options,
            w = h.dataModel,
            f = h.bootstrap,
            c = f.on,
            m = h.roundCorners && !c,
            q = h.ui,
            g = h.sortModel;
            this.BS_on = c;
            h.collapsible || (h.collapsible = {
                on: !1,
                collapsed: !1
            });
            h.flexHeight && (h.height = 'flex');
            h.flexWidth && (h.width = 'flex');
            if (w.sortIndx) {
                g.on = h.sortable;
                g.type = w.sorting;
                var v = [
                ],
                u = w.sortIndx,
                w = w.sortDir;
                if (k.isArray(u)) {
                    for (var r = 0; r < u.length; r++) {
                        var y = w && w[r] ? w[r] : 'up';
                        v.push({
                            dataIndx: u[r],
                            dir: y
                        })
                    }
                    g.single = !1
                } else v.push({
                    dataIndx: u,
                    dir: w ? w : 'up'
                }),
                g.single = !0;
                g.sorter = v
            }
            !1 === h.virtualXHeader && (h.virtualXHeader = null);
            this.setEditorPosTimer();
            this.iGenerateView = new d(this);
            this.iRefresh = new a.cRefresh(this);
            this.iKeyNav = new l(this);
            this.iIsValid = new b(this);
            this.tables = [
            ];
            this.$tbl = null;
            this.iColModel = new a.cColModel(this);
            this.iSort = new a.cSort(this);
            this.iHeader = new a.cHeader(this);
            this._initTypeColumns();
            g = this.element;
            g.on('scroll' + this.eventNamespace, function () {
                this.scrollTop = this.scrollLeft = 0
            });
            v = c ? f.grid : q.grid;
            u = c ? '' : q.header_o;
            w = c ? '' : q.bottom;
            f = c ? f.top : q.top;
            g.empty().addClass('pq-grid ' + v + ' ' + (m ? ' ui-corner-all' : '')).html(['<div class=\'pq-grid-top ',
            f,
            ' ',
            m ? ' ui-corner-top' : '',
            '\'><div class=\'pq-grid-title',
            m ? ' ui-corner-top' : '',
            '\'>&nbsp;</div></div><div class=\'pq-grid-center\' ><div class=\'pq-header-outer ',
            u,
            '\'></div><div class=\'pq-grid-cont-outer\' ><div class=\'pq-grid-cont\' tabindex=\'0\'></div></div></div><div class=\'pq-grid-bottom ',
            w,
            ' ',
            m ? ' ui-corner-bottom' : '',
            '\'><div class=\'pq-grid-footer\'></div></div>'].join(''));
            this.$bottom = k('div.pq-grid-bottom', g);
            this._trigger('render', null, {
                dataModel: this.options.dataModel,
                colModel: this.colModel
            });
            this.$top = k('div.pq-grid-top', g);
            h.showTop || this.$top.css('display', 'none');
            this.$title = k('div.pq-grid-title', g);
            h.showTitle || this.$title.css('display', 'none');
            m = this.$grid_center = k('div.pq-grid-center', g).on('scroll', function () {
                this.scrollTop = 0
            });
            this.$header_o = k('div.pq-header-outer', this.$grid_center).on('scroll', function () {
                this.scrollLeft = this.scrollTop = 0
            });
            this.$footer = k('div.pq-grid-footer', g);
            this.$cont_o = k('.pq-grid-cont-outer', m);
            f = this.$cont = k('div.pq-grid-cont', m);
            k(window).bind('resize' + e.eventNamespace + ' orientationchange' + e.eventNamespace, function (h, a) {
                e.onWindowResize(h, a)
            });
            f.on('click', '.pq-grid-cell,.pq-grid-number-cell', function (h) {
                if (!0 !== k.data(h.target, e.widgetName + '.preventClickEvent') && k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onClickCell(h)
            });
            f.on('click', 'tr.pq-grid-row', function (h) {
                if (!0 !== k.data(h.target, e.widgetName + '.preventClickEvent') && k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onClickRow(h)
            });
            f.on('contextmenu', 'td.pq-grid-cell', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onRightClickCell(h)
            });
            f.on('contextmenu', 'tr.pq-grid-row', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onRightClickRow(h)
            });
            f.on('dblclick', 'td.pq-grid-cell', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onDblClickCell(h)
            });
            f.on('dblclick', 'tr.pq-grid-row', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onDblClickRow(h)
            });
            f.on('blur', function () {
                e.onblur()
            });
            f.on('focus', function () {
                e.onfocus()
            });
            f.on('mousedown', function (h) {
                if (1 === h.which) {
                    var a = k(h.target);
                    if (a.closest('.pq-grid') [0] == e.element[0]) {
                        var w;
                        w = a.closest('.pq-grid-cell:not(.pq-detail-child)');
                        if (w.length && (h.currentTarget = w[0], w = e._onCellMouseDown(h), !1 === w)) return !1;
                        if (!h.isPropagationStopped()) {
                            a = a.closest('.pq-grid-row');
                            if (a.length && (h.currentTarget = a[0], w = e._onRowMouseDown(h), !1 === w)) return !1;
                            if (!h.isPropagationStopped()) return e._onContMouseDown(h)
                        }
                    }
                }
            });
            f.on('mouseenter', 'td.pq-grid-cell', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onCellMouseEnter(h, k(this))
            });
            f.on('mouseenter', 'tr.pq-grid-row', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onRowMouseEnter(h, k(this))
            });
            f.on('mouseleave', 'td.pq-grid-cell', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onCellMouseLeave(h, k(this))
            });
            f.on('mouseleave', 'tr.pq-grid-row', function (h) {
                if (k(h.target).closest('.pq-grid') [0] == e.element[0]) return e._onRowMouseLeave(h, k(this))
            });
            f.on('keyup', function (h) {
                k(h.target).closest('.pq-grid') [0] == e.element[0] && e._trigger('keyUp', h, null)
            });
            m.bind('mousewheel DOMMouseScroll', function (h) {
                return e._onMouseWheel(h)
            });
            this.$hvscroll = k('<div class=\'pq-hvscroll-square ui-widget-content\'></div>').appendTo(m);
            c = k('<div class=\'pq-vscroll\'></div>').appendTo(m);
            this.prevVScroll = 0;
            f = h.scrollModel;
            void 0 === f.lastColumn && h.virtualX && (f.lastColumn = 'auto');
            this.vscroll = pq.scrollbar(c, {
                pace: f.pace,
                theme: f.theme,
                bootstrap: h.bootstrap,
                steps: h.virtualY && !f.smooth,
                direction: 'vertical',
                cur_pos: 0,
                pageRight: function () {
                    e.iKeyNav.pageDown()
                },
                pageLeft: function () {
                    e.iKeyNav.pageUp()
                },
                drag: function (h, a) {
                    e.iMouseSelection.syncViewWithScrollBarVert(a.ratio)
                },
                scroll: function (h, a) {
                    e.iRefresh.refreshVscroll(a)
                }
            });
            c = k('<div class=\'pq-hscroll\'></div>').appendTo(m);
            'flex' === h.height && c.css('position', 'relative');
            this.hscroll = pq.scrollbar(c, {
                direction: 'horizontal',
                pace: f.pace,
                bootstrap: h.bootstrap,
                theme: f.theme,
                steps: h.virtualX && !f.smooth,
                cur_pos: 0,
                drag: function (h, a) {
                    e.iMouseSelection.syncViewWithScrollBarHor(a.ratio)
                },
                scroll: function () {
                    h.virtualX && !h.scrollModel.smooth && e.refresh()
                }
            });
            h.selectionModel['native'] || this.disableSelection();
            m.bind('keydown.pq-grid', function (h) {
                k(h.target).closest('.pq-grid') [0] == e.element[0] && e._onKeyPressDown(h)
            });
            this._refreshTitle();
            this.iRows = new a.cRows(this);
            this.iCells = new a.cCells(this);
            this.generateLoading();
            this._initPager();
            this._refreshResizable();
            this._refreshDraggable();
            this.iResizeColumns = new a.cResizeColumns(this);
            this._mouseInit()
        },
        _mouseDown: function (e) {
            var h = this;
            if (k(e.target).closest('.pq-editor-focus').length) this._blurEditMode = !0,
            window.setTimeout(function () {
                h._blurEditMode = !1
            }, 0);
             else return this._saveDims(),
            this._mousePQUpDelegate = function (e) {
                return h._mousePQUp(e)
            },
            k(document).bind('mouseup' + this.eventNamespace, this._mousePQUpDelegate),
            this._super(e)
        },
        destroy: function () {
            this._trigger('destroy');
            this._super();
            window.clearInterval(this._refreshEditorPosTimer);
            this.autoResizeTimeout && clearTimeout(this.autoResizeTimeout);
            for (var e in this) delete this[e];
            this.options = void 0;
            k.fragments = {
            }
        },
        _setOption: function (e, h) {
            var a = this.options,
            b = a.dataModel;
            if ('height' === e) 'flex' === h ? (b = this.vscroll, h && b && b.widget().hasClass('pq-sb-vert') && (a.virtualY ? b.option('cur_pos', 0)  : b.option('ratio', 0)), this.hscroll.widget().css('position', 'relative'))  : 'flex' === a.height && this.hscroll.widget().css('position', ''),
            a[e] = h;
             else if ('width' === e && 'flex' == h) a[e] = h,
            b = this.hscroll,
            h && b && b.widget().hasClass('pq-sb-horiz') && (a.virtualX ? b.option('cur_pos', 0)  : b.option('ratio', 0));
             else if ('title' == e) a[e] = h,
            this._refreshTitle();
             else if ('roundCorners' == e) (a[e] = h) ? (this.element.addClass('ui-corner-all'), this.$top.addClass('ui-corner-top'), this.$bottom.addClass('ui-corner-bottom'))  : (this.element.removeClass('ui-corner-all'), this.$top.removeClass('ui-corner-top'), this.$bottom.removeClass('ui-corner-bottom'));
             else if ('virtualX' ==
            e) a[e] = h,
            this.hscroll.option('steps', h);
             else if ('virtualY' == e) a[e] = h,
            this.vscroll.option('steps', h);
             else if ('freezeCols' == e) h = parseInt(h),
            !isNaN(h) && 0 <= h && h <= this.colModel.length - 2 && (a[e] = h);
             else if ('freezeRows' == e) h = parseInt(h),
            !isNaN(h) && 0 <= h && (a[e] = h);
             else if ('resizable' == e) a[e] = h,
            this._refreshResizable();
             else if ('draggable' == e) a[e] = h,
            this._refreshDraggable();
             else if ('scrollModel' == e) a[e] = h;
             else if ('dataModel' == e) h.data !== b.data && b.dataUF && (b.dataUF.length = 0),
            a[e] = h;
             else {
                if ('groupModel' == e) throw 'use groupOption() to set groupModel options.';
                'pageModel' == e ? a[e] = h : 'selectionModel' === e ? a[e] = h : 'colModel' === e || 'columnTemplate' == e ? (a[e] = h, this.iColModel.init())  : 'disabled' === e ? (this._super(e, h), !0 === h ? this._disable()  : this._enable())  : 'numberCell' === e ? (a[e] = h, this.iRefresh.decidePanes())  : 'strLoading' === e ? (a[e] = h, this._refreshLoadingString())  : 'showTop' === e ? (a[e] = h, this.$top.css('display', h ? '' : 'none'))  : 'showTitle' === e ? (a[e] = h, this.$title.css('display', h ? '' : 'none'))  : 'showToolbar' === e ? (a[e] = h, this._toolbar.widget().css('display', h ? '' : 'none'))  : 'toolbar' ==
                e ? a[e] = h : 'collapsible' === e ? (a[e] = h, this._createCollapse())  : 'showBottom' === e ? (a[e] = h, this.$bottom.css('display', h ? '' : 'none'))  : a[e] = h
            }
            return this
        }
    };
    c.options = {
        cancel: 'input,textarea,button,select,option,.pq-no-capture,.ui-resizable-handle',
        trigger: !1,
        bootstrap: {
            on: !1,
            thead: 'table table-striped table-condensed table-bordered',
            tbody: 'table table-condensed',
            grid: 'panel panel-default',
            top: '',
            btn: 'btn btn-default',
            groupModel: {
                icon: [
                    'glyphicon-triangle-bottom',
                    'glyphicon-triangle-right'
                ]
            },
            header_active: 'active'
        },
        ui: {
            on: !0,
            grid: 'ui-widget ui-widget-content',
            top: 'ui-widget-header',
            bottom: 'ui-widget-header',
            header_o: 'ui-widget-header',
            header: 'ui-state-default',
            header_active: 'ui-state-active'
        },
        cls: {
            cont_inner: 'pq-grid-cont-inner',
            cont_inner_b: 'pq-grid-cont-inner-b'
        },
        distance: 3,
        collapsible: {
            on: !0,
            toggle: !0,
            collapsed: !1,
            _collapsed: !1,
            refreshAfterExpand: !0,
            css: {
                zIndex: 1000
            }
        },
        colModel: null,
        columnBorders: !0,
        dataModel: {
            data: [
            ],
            dataUF: [
            ],
            cache: !1,
            dataType: 'JSON',
            location: 'local',
            sorting: 'local',
            sortDir: 'up',
            method: 'GET'
        },
        direction: '',
        draggable: !1,
        editable: !0,
        editModel: {
            cellBorderWidth: 0,
            pressToEdit: !0,
            clicksToEdit: 2,
            filterKeys: !0,
            keyUpDown: !0,
            reInt: /^([\-]?[1-9][0-9]*|[\-]?[0-9]?)$/,
            reFloat: /^[\-]?[0-9]*\.?[0-9]*$/,
            onBlur: 'validate',
            saveKey: k.ui.keyCode.ENTER,
            onSave: 'nextFocus',
            onTab: 'nextFocus',
            allowInvalid: !1,
            invalidClass: 'pq-cell-red-tr pq-has-tooltip',
            warnClass: 'pq-cell-blue-tr pq-has-tooltip',
            validate: !0
        },
        editor: {
            select: !1,
            type: 'textbox'
        },
        groupModel: {
            on: !1,
            title: [
            ],
            titleDefault: '{0} ({1})',
            header: !0,
            headerMenu: !0,
            menuItems: [
                'merge',
                'fixCols',
                'grandSummary'
            ],
            fixCols: !0,
            icon: [
                'ui-icon-triangle-1-se',
                'ui-icon-triangle-1-e'
            ],
            dataIndx: [
            ],
            collapsed: [
            ],
            dir: [
            ],
            showSummary: [
            ],
            summaryEdit: !0,
            refreshOnChange: !0
        },
        summaryOptions: {
            number: 'avg,sum,max,min',
            date: 'count,max,min',
            string: 'count'
        },
        summaryTitle: {
            avg: 'Avg: {0}',
            count: 'Count: {0}',
            max: 'Max: {0}',
            min: 'Min: {0}',
            sum: 'Sum: {0}'
        },
        validation: {
            icon: 'ui-icon-alert',
            cls: 'ui-state-error',
            style: 'padding:3px 10px;'
        },
        warning: {
            icon: 'ui-icon-info',
            cls: '',
            style: 'padding:3px 10px;'
        },
        freezeCols: 0,
        freezeRows: 0,
        freezeBorders: !0,
        calcDataIndxFromColIndx: !0,
        height: 400,
        hoverMode: 'null',
        _maxColWidth: '99%',
        _minColWidth: 50,
        minWidth: 100,
        numberCell: {
            width: 30,
            title: '',
            resizable: !0,
            minWidth: 30,
            maxWidth: 100,
            show: !0
        },
        pageModel: {
            curPage: 1,
            totalPages: 0,
            rPP: 10,
            rPPOptions: [
                10,
                20,
                50,
                100
            ]
        },
        resizable: !1,
        roundCorners: !0,
        rowBorders: !0,
        rowHeight: 25,
        scrollModel: {
            pace: 'fast',
            smooth: !1,
            horizontal: !0,
            lastColumn: 'auto',
            autoFit: !1,
            theme: !0
        },
        selectionModel: {
            type: 'cell',
            onTab: 'nextFocus',
            row: !0,
            mode: 'block'
        },
        swipeModel: {
            on: !0,
            speed: 20,
            ratio: 0.15,
            repeat: 20
        },
        showBottom: !0,
        showHeader: !0,
        showTitle: !0,
        showToolbar: !0,
        showTop: !0,
        sortable: !0,
        sql: !1,
        stripeRows: !0,
        title: '&nbsp;',
        treeModel: null,
        virtualX: !1,
        virtualY: !1,
        width: 'auto',
        wrap: !0,
        hwrap: !0
    };
    k.extend(!0, c.options, {
        strAdd: 'Add',
        strDelete: 'Delete',
        strEdit: 'Edit',
        strGroup_header: 'Drag a column here to group by that column',
        strGroup_merge: 'Merge cells',
        strGroup_fixCols: 'Fix columns',
        strGroup_grandSummary: 'Grand summary',
        strLoading: 'Loading',
        strNoRows: 'No rows to display.'
    });
    k.widget('paramquery._pqGrid', k.ui.mouse, c);
    c = a._pqGrid.prototype;
    c.readCell = function (e, h, a, b, f) {
        h = h.dataIndx;
        return a && !1 === a.isRootCell(b, f, 'o') ? void 0 : e[h]
    };
    c.saveCell = function (e, h, a) {
        e[h.dataIndx] = a
    };
    c._destroyResizable = function () {
        var e = this.element,
        h = e.data();
        (h.resizable || h.uiResizable || h['ui-resizable']) && e.resizable('destroy')
    };
    c._disable = function () {
        null == this.$disable && (this.$disable = k('<div class=\'pq-grid-disable\'></div>').css('opacity', 0.2).appendTo(this.element))
    };
    c._enable = function () {
        this.$disable && (this.element[0].removeChild(this.$disable[0]), this.$disable = null)
    };
    c._destroy = function () {
        this.loading && this.xhr.abort();
        this._destroyResizable();
        this._destroyDraggable();
        this._mouseDestroy();
        this.element.off(this.eventNamespace);
        k(window).unbind(this.eventNamespace);
        k(document).unbind(this.eventNamespace);
        this.element.empty().css('height', '').css('width', '').removeClass('pq-grid ui-widget ui-widget-content ui-corner-all').removeData()
    };
    c.collapse = function (e) {
        var h = this,
        a = this.element,
        b = this.options.collapsible,
        f = b.$collapse.children('span'),
        d = function () {
            a.css('overflow', 'hidden');
            f.addClass('ui-icon-circle-triangle-s').removeClass('ui-icon-circle-triangle-n');
            a.hasClass('ui-resizable') && a.resizable('destroy');
            h._toolbar && h._toolbar.disable();
            b.collapsed = !0;
            b._collapsed = !0;
            b.animating = !1;
            h._trigger('collapse')
        };
        e = e ? e : {
        };
        if (b._collapsed) return !1;
        b.htCapture = a.height();
        !1 === e.animate ? (a.height(23), d())  : (b.animating = !0, a.animate({
            height: '23px'
        }, function () {
            d()
        }))
    };
    c.expand = function (e) {
        var h = this,
        a = this.element,
        b = this.options.collapsible,
        f = b.htCapture,
        d = b.$collapse.children('span'),
        c = function () {
            a.css('overflow', '');
            b._collapsed = !1;
            b.collapsed = !1;
            h._refreshResizable();
            b.refreshAfterExpand && h.refresh();
            d.addClass('ui-icon-circle-triangle-n').removeClass('ui-icon-circle-triangle-s');
            h._toolbar && h._toolbar.enable();
            b.animating = !1;
            h._trigger('expand')
        };
        e = e ? e : {
        };
        if (!1 === b._collapsed) return !1;
        !1 === e.animate ? (a.height(f), c())  : (b.animating = !0, a.animate({
            height: f
        }, function () {
            c()
        }))
    };
    c._createCollapse = function () {
        var e = this,
        h = this.$top,
        a = this.BS_on,
        b = this.options.collapsible;
        b.$stripe || (h = k('<div class=\'pq-slider-icon pq-no-capture\'  ></div>').appendTo(h), b.$stripe = h);
        b.on ? b.$collapse || (b.$collapse = k(a ? n('collapse-down')  : g('circle-triangle-n')).appendTo(b.$stripe).click(function (h) {
            b.collapsed ? e.expand()  : e.collapse()
        }))  : b.$collapse && (b.$collapse.remove(), delete b.$collapse);
        b.collapsed && !b._collapsed ? e.collapse({
            animate: !1
        })  : !b.collapsed && b._collapsed && e.expand({
            animate: !1
        });
        b.toggle ? b.$toggle || (b.$toggle = k(a ? n('fullscreen')  :
        g('arrow-4-diag')).prependTo(b.$stripe).click(function (h) {
            e.toggle()
        }))  : b.$toggle && (b.$toggle.remove(), delete b.$toggle)
    };
    c.toggle = function () {
        var e = this.options,
        h = e.collapsible,
        a = this.element,
        b,
        f = this._maxim;
        b = f ? 'min' : 'max';
        var d = k(document.body);
        if (!1 === this._trigger('beforeToggle', null, {
            state: b
        })) return !1;
        'min' == b ? (e = f.eleObj, h = f.docObj, this.option({
            height: e.height,
            width: e.width,
            maxHeight: e.maxHeight,
            maxWidth: e.maxWidth
        }), a[0].style.cssText = e.cssText, d[0].style.cssText = h.cssText, k('html').css({
            overflow: 'visible'
        }), window.scrollTo(h.scrollLeft, h.scrollTop), this._maxim = null)  : (e = {
            height: e.height,
            width: e.width,
            cssText: a[0].style.cssText,
            maxHeight: e.maxHeight,
            maxWidth: e.maxWidth
        }, this.option({
            height: '100%',
            width: '100%',
            maxHeight: null,
            maxWidth: null
        }), a.css(k.extend({
            position: 'fixed',
            left: 0,
            top: 0,
            margin: 0
        }, h.css)), h = {
            scrollLeft: k(window).scrollLeft(),
            scrollTop: k(window).scrollTop(),
            cssText: d[0].style.cssText
        }, d.css({
            height: 0,
            width: 0,
            overflow: 'hidden',
            position: 'static'
        }), k('html').css({
            overflow: 'hidden'
        }), window.scrollTo(0, 0), this._maxim = {
            eleObj: e,
            docObj: h
        });
        this._trigger('toggle', null, {
            state: b
        });
        this._refreshResizable();
        this.refresh();
        k(window).trigger('resize', {
            $grid: a,
            state: b
        })
    };
    c._mouseCapture = function (e) {
        var h = this.options;
        return h.virtualX && h.virtualY && !h.scrollModel.smooth || !e.target ? !1 : k(e.target).closest('.pq-grid') [0] == this.element[0] ? (e = h.swipeModel, !1 == e.on || 'touch' == e.on && !k.support.touch ? !1 : !0)  : !1
    };
    c._saveDims = function () {
        var e = this.$tbl,
        h = this.$tbl_header;
        if (e) for (var a = 0; a < e.length; a++) {
            var b = e[a],
            f = k(b);
            f.data('offsetHeight', Math.round(b.offsetHeight) - 1);
            f.data('scrollWidth', Math.round(b.scrollWidth))
        }
        if (h) for (a = 0; a < h.length; a++) b = h[a],
        e = k(b).parent(),
        e.data('offsetHeight', Math.round(b.offsetHeight)),
        e.data('scrollWidth', Math.round(b.scrollWidth))
    };
    c._mousePQUp = function (e) {
        k(document).unbind('mouseup' + this.eventNamespace, this._mousePQUpDelegate);
        this._trigger('mousePQUp', e, null)
    };
    c._mouseStart = function (e) {
        this.blurEditor({
            force: !0
        });
        return !0
    };
    c._mouseDrag = function (e) {
        return !1 == this._trigger('mouseDrag', e, null) ? !1 : !0
    };
    c._mouseStop = function (e) {
        return !1 == this._trigger('mouseStop', e, null) ? !1 : !0
    };
    c.onWindowResize = function (e, h) {
        var a = this,
        b = a.options,
        f = a.element,
        d = f.parent();
        if (h) {
            var c = h.$grid;
            if (c && (c == f || 0 == f.closest(c).length)) return
        }
        d.length && (d[0] == document.body || 'fixed' == f.css('position') ? (f = window.innerHeight ? window.innerHeight : k(window).height(), d = k(window).width())  : (f = d.height(), d = d.width()), null == a._lastParentHt || f != a._lastParentHt || d != a._lastParentWd) && (a._lastParentHt = f, a._lastParentWd = d, k.support.touch && b.editModel.indices && k(document.activeElement).is('.pq-editor-focus') || (a.autoResizeTimeout && clearTimeout(a.autoResizeTimeout), a.autoResizeTimeout = window.setTimeout(function () {
            a._refreshAfterResize();
            delete a.autoResizeTimeout
        }, b.autoSizeInterval || 0)))
    };
    c._onMouseWheel = function (e) {
        this._saveDims();
        var h = this.options,
        a = 0,
        b = !1;
        e = e.originalEvent;
        var f = e.wheelDeltaX,
        d = e.wheelDeltaY,
        c = e.wheelDelta;
        if (f && Math.abs(f) > Math.abs(d)) {
            if ('flex' == h.width) return !0;
            b = !0;
            a = f / 120
        } else if (c) {
            if (!this.iRefresh.vscroll) return !0;
            a = c / 120
        } else if (e.detail) {
            if (!this.iRefresh.vscroll) return !0;
            a = - 1 * e.detail / 3
        }
        a *= 3;
        e = b ? this.hscroll : this.vscroll;
        d = parseInt(e.option('cur_pos'));
        f = parseInt(e.option('num_eles'));
        if (!h.scrollModel.smooth && (b && h.virtualX || !b && h.virtualY)) {
            a = 0 < a ? Math[1 > a ? 'ceil' : 'floor'](a)  : Math[ - 1 > a ? 'ceil' : 'floor'](a);
            h = d - a;
            0 > h ? h = 0 : h > f - 1 && (h = f - 1);
            if (h == d) return !0;
            e.option('cur_pos', d - a);
            e.scroll()
        } else {
            h = e.option('ratio');
            a = h - a / (f - 1);
            1 < a ? a = 1 : 0 > a && (a = 0);
            if (h == a) return !0;
            e.option('ratio', a);
            e.drag()
        }
        return !1
    };
    c._onDblClickCell = function (e) {
        var h = k(e.currentTarget),
        a = this.getCellIndices({
            $td: h
        }),
        b = a.rowIndxPage,
        f = b + this.rowIndxOffset,
        a = a.colIndx;
        if (null != a) {
            if (!1 == this._trigger('cellDblClick', e, {
                $td: h,
                rowIndxPage: b,
                rowIndx: f,
                colIndx: a,
                column: this.colModel[a],
                rowData: this.pdata[b]
            })) return !1;
            1 < this.options.editModel.clicksToEdit && this.isEditableRow({
                rowIndx: f
            }) && this.isEditableCell({
                colIndx: a,
                rowIndx: f
            }) && this.editCell({
                rowIndxPage: b,
                colIndx: a
            })
        }
    };
    c._onClickCont = function (e) {
    };
    c._onClickRow = function (e) {
        var h = k(e.currentTarget),
        a = parseInt(h.attr('pq-row-indx')),
        b = a + this.rowIndxOffset;
        if (!isNaN(a) && !1 == this._trigger('rowClick', e, {
            $tr: h,
            rowIndxPage: a,
            rowIndx: b,
            rowData: this.pdata[a]
        })) return !1
    };
    c._onRightClickRow = function (e) {
        var h = k(e.currentTarget),
        a = parseInt(h.attr('pq-row-indx')),
        b = a + this.rowIndxOffset;
        if (!isNaN(a) && !1 == this._trigger('rowRightClick', e, {
            $tr: h,
            rowIndxPage: a,
            rowIndx: b,
            rowData: this.pdata[a]
        })) return !1
    };
    c._onDblClickRow = function (e) {
        var h = k(e.currentTarget),
        a = parseInt(h.attr('pq-row-indx')),
        b = this.getRowIndxOffset();
        if (!1 == this._trigger('rowDblClick', e, {
            $tr: h,
            rowIndxPage: a,
            rowIndx: a + b,
            rowData: this.pdata[a]
        })) return !1
    };
    c.getValueFromDataType = function (e, h, a) {
        if ('date' == h) return h = Date.parse(e),
        isNaN(h) ? '' : a ? h : e;
        if ('object' == h) return e;
        if ('integer' == h) h = parseInt(e);
         else if ('float' == h) h = parseFloat(e);
         else return 'bool' == h ? (h = k.trim(e).toLowerCase(), 0 == h.length ? null : 'true' == h || 'yes' == h || '1' == h ? !0 : 'false' == h || 'no' == h || '0' == h ? !1 : Boolean(h))  : k.trim(e);
        return isNaN(h) || null == h ? null == e ? e : null : h
    };
    var b = function (e) {
        this.that = e
    },
    f = b.prototype;
    f._isValidCell = function (e) {
        var h = this.that,
        a = e.column,
        b = a.validations;
        if (!b || !b.length) return {
            valid: !0
        };
        var f = e.value,
        d = a.dataType,
        c = function (e) {
            return h.getValueFromDataType(e, d, !0)
        };
        e = e.rowData;
        if (!e) throw 'rowData required.';
        for (var m = 0; m < b.length; m++) {
            var l = b[m],
            g = l.type,
            k = !1,
            y = l.msg,
            s = l.value;
            if (!1 !== l.on && (null == f && 'function' != typeof g ? k = !1 : 'minLen' == g ? (f = c(f), s = c(s), f.length >= s && (k = !0))  : 'nonEmpty' == g ? null != f && '' !== f && (k = !0)  : 'maxLen' == g ? (f = c(f), s = c(s), f.length <= s && (k = !0))  : 'gt' ==
            g ? (f = c(f), s = c(s), f > s && (k = !0))  : 'gte' == g ? (f = c(f), s = c(s), f >= s && (k = !0))  : 'lt' == g ? (f = c(f), s = c(s), f < s && (k = !0))  : 'lte' == g ? (f = c(f), s = c(s), f <= s && (k = !0))  : 'neq' == g ? (f = c(f), s = c(s), f !== s && (k = !0))  : 'regexp' == g ? (new RegExp(s)).test(f) && (k = !0)  : 'function' == typeof g ? (s = {
                column: a,
                value: f,
                rowData: e,
                msg: y
            }, !1 == g.call(h, s) ? (k = !1, s.msg != y && (y = s.msg))  : k = !0)  : k = !0, !k)) return {
                valid: !1,
                msg: y,
                column: a,
                warn: l.warn,
                dataIndx: a.dataIndx,
                validation: l
            }
        }
        return {
            valid: !0
        }
    };
    f.isValidCell = function (e) {
        var h = this.that,
        a = e.rowData,
        b = e.rowIndx,
        f = e.value,
        d = e.valueDef,
        c = e.column,
        m = e.focusInvalid,
        l = h.options,
        g = l.bootstrap,
        r = e.allowInvalid,
        y = c.dataIndx,
        s = l.validation,
        z = l.warning,
        n = l.editModel,
        B = n.invalidClass,
        D = n.warnClass,
        n = document.activeElement;
        if (e.checkEditable && !1 == h.isEditableCell({
            rowIndx: b,
            dataIndx: y
        })) return {
            valid: !0
        };
        e = this._isValidCell({
            column: c,
            value: f,
            rowData: a
        });
        var f = e.valid,
        c = e.warn,
        E = e.msg;
        if (f) h.data({
            rowData: a,
            dataIndx: y,
            data: 'pq_valid'
        }) && (h.removeClass({
            rowData: a,
            rowIndx: b,
            dataIndx: y,
            cls: D + ' ' + B
        }), h.removeData({
            rowData: a,
            dataIndx: y,
            data: 'pq_valid'
        }));
         else var s = k.extend({
        }, c ? z : s, e.validation),
        F = s.css,
        K = s.cls,
        M = s.icon,
        L = s.style;
        if (r || c) {
            if (f) return {
                valid: !0
            };
            h.addClass({
                rowData: a,
                rowIndx: b,
                dataIndx: y,
                cls: c ? D : B
            });
            h.data({
                rowData: a,
                dataIndx: y,
                data: {
                    pq_valid: {
                        css: F,
                        icon: M,
                        style: L,
                        msg: E,
                        cls: K
                    }
                }
            });
            return e
        }
        if (!f) {
            if (null == b && (a = h.getRowIndx({
                rowData: a,
                dataUF: !0
            }), b = a.rowIndx, null == b || a.uf)) return e.uf = a.uf,
            e;
            if (m) {
                var H;
                if (!d) h.goToPage({
                    rowIndx: b
                }),
                b = {
                    rowIndx: b,
                    dataIndx: y
                },
                b = h.normalize(b),
                H = h.getCell(b),
                h['cell' == l.selectionModel.type ?
                'setSelection' : 'scrollCell'](b),
                h.focus(b);
                 else if (k(n).hasClass('pq-editor-focus') && (d = l.editModel.indices)) {
                    l = d.rowIndx;
                    d = d.dataIndx;
                    if (null != b && b != l) throw 'incorrect usage of isValid rowIndx: ' + b;
                    if (y != d) throw 'incorrect usage of isValid dataIndx: ' + y;
                    h.editCell({
                        rowIndx: l,
                        dataIndx: y
                    })
                }
                var G;
                if (H || (G = h.getEditCell()) && G.$cell) {
                    h = H || G.$cell;
                    h.attr('title', E);
                    H = 'tooltip';
                    G = 'open';
                    g.on && g.tooltip && (H = g.tooltip, G = 'show');
                    try {
                        h[H]('destroy')
                    } catch (O) {
                    }
                    h[H]({
                        trigger: 'manual',
                        position: {
                            my: 'left center+5',
                            at: 'right center'
                        },
                        content: function () {
                            return ('' == M ? '' : '<span class=\'ui-icon ' + M + ' pq-tooltip-icon\'></span>') + E
                        },
                        open: function (e, h) {
                            var a = h.tooltip;
                            K && a.addClass(K);
                            if (L) {
                                var b = a.attr('style');
                                a.attr('style', b + ';' + L)
                            }
                            F && a.tooltip.css(F)
                        }
                    }) [H](G)
                }
            }
            return e
        }
        if (d && (G = h.getEditCell()) && G.$cell) {
            h = G.$cell;
            h.removeAttr('title');
            try {
                h.tooltip('destroy')
            } catch (I) {
            }
        }
        return {
            valid: !0
        }
    };
    c.isValid = function (e) {
        return this.iIsValid.isValid(e)
    };
    f.isValid = function (e) {
        e = e || {
        };
        var h = this.that,
        a = e.allowInvalid,
        b = e.focusInvalid,
        f = e.checkEditable,
        a = null == a ? !1 : a,
        d = e.dataIndx;
        if (null != d) {
            var c = h.columns[d],
            m = e.rowData || h.getRowData(e),
            l = e.hasOwnProperty('value'),
            h = l ? e.value : m[d],
            h = this.isValidCell({
                rowData: m,
                checkEditable: f,
                rowIndx: e.rowIndx,
                value: h,
                valueDef: l,
                column: c,
                allowInvalid: a,
                focusInvalid: b
            });
            return h.valid || h.warn ? {
                valid: !0
            }
             : h
        }
        if (null != e.rowIndx || null != e.rowIndxPage || null != e.rowData) for (var m = e.rowData || h.getRowData(e), g = h.colModel, l = [
        ], k = 0, y = g.length; k < y; k++) {
            if (c = g[k], !c.hidden && (d = c.dataIndx, h = m[d], h = this.isValidCell({
                rowData: m,
                value: h,
                column: c,
                rowIndx: e.rowIndx,
                checkEditable: f,
                allowInvalid: a,
                focusInvalid: b
            }), !h.valid && !h.warn)) if (a) l.push({
                rowData: m,
                dataIndx: d,
                column: c
            });
             else return h
        } else {
            e = e.data ? e.data : h.options.dataModel.data;
            l = [
            ];
            if (!e) return null;
            k = 0;
            for (y = e.length; k < y; k++) {
                m = e[k];
                if (f && (c = this.getRowIndx({
                    rowData: m
                }).rowIndx, null == c || !1 == h.isEditableRow({
                    rowData: m,
                    rowIndx: c
                }))) continue;
                m = this.isValid({
                    rowData: m,
                    rowIndx: c,
                    checkEditable: f,
                    allowInvalid: a,
                    focusInvalid: b
                });
                d = m.cells;
                if (!1 === a) {
                    if (!m.valid) return m
                } else d && d.length && (l = l.concat(d))
            }
        }
        return a && l.length ? {
            cells: l,
            valid: !1
        }
         : {
            valid: !0
        }
    };
    c.isValidChange = function (e) {
        e = e || {
        };
        var h = this.getChanges(),
        h = h.updateList.concat(h.addList);
        e.data = h;
        return this.isValid(e)
    };
    c.isEditableRow = function (e) {
        var h = this.options.editable;
        return null != h ? 'function' == typeof h ? h.call(this, this.normalize(e))  : h : !0
    };
    c.isEditableCell = function (e) {
        e = this.normalize(e);
        var h = e.column,
        a = h.editable;
        return e.checkVisible && h.hidden ? !1 : null != a ? 'function' == typeof a ? a.call(this, e)  : a : !0
    };
    c._onContMouseDown = function (e) {
        this.blurEditor({
            blurIfFocus: !0
        });
        if (!1 === this._trigger('contMouseDown', e, null)) return !1;
        var h = k(e.target);
        e = h.closest('.pq-grid-cell,.pq-grid-number-cell');
        h = h.closest('.pq-grid-row');
        e.length || h.length || (e = this.$cont[0], e.setAttribute('tabindex', 0), e.focus());
        return !0
    };
    c._onCellMouseDown = function (e) {
        var h = k(e.currentTarget),
        a = this.getCellIndices({
            $td: h
        });
        if (null != a.rowIndx) return a = this.iMerge.getRootCell(a.rowIndx, a.colIndx, 'o'),
        a = this.normalize(a),
        a.$td = h,
        !1 == this._trigger('cellMouseDown', e, a) ? !1 : !0
    };
    c._onRowMouseDown = function (e) {
        var h = k(e.currentTarget),
        a = this.getRowIndx({
            $tr: h
        });
        a.$tr = h;
        return !1 == this._trigger('rowMouseDown', e, a) ? !1 : !0
    };
    c._onCellMouseEnter = function (e, h) {
        var a = this.options,
        b = this.getCellIndices({
            $td: h
        });
        if (null != b.rowIndx && null != b.colIndx) {
            if (!1 === this._trigger('cellMouseEnter', e, b)) return !1;
            'cell' == a.hoverMode && this.highlightCell(h);
            return !0
        }
    };
    c._onRowMouseEnter = function (e, h) {
        var a = this.options,
        b = this.getRowIndx({
            $tr: h
        }),
        f = b.rowIndxPage;
        if (!1 === this._trigger('rowMouseEnter', e, b)) return !1;
        'row' == a.hoverMode && this.highlightRow(f);
        return !0
    };
    c._onCellMouseLeave = function (e, h) {
        'cell' == this.options.hoverMode && this.unHighlightCell(h);
        return !0
    };
    c._onRowMouseLeave = function (e, h) {
        var a = this.getRowIndx({
            $tr: h
        }).rowIndxPage;
        'row' == this.options.hoverMode && this.unHighlightRow(a);
        return !0
    };
    c.enableSelection = function () {
        this.element.removeClass('pq-disable-select').off('selectstart' + this.eventNamespace)
    };
    c.disableSelection = function () {
        this.element.addClass('pq-disable-select').on('selectstart' +
        this.eventNamespace, function (e) {
            if (e.target) {
                var h = k(e.target);
                if (h.is('input,textarea,select') || h.closest('.pq-native-select').length) return !0;
                e.preventDefault()
            }
        })
    };
    c._onClickCell = function (e) {
        var h = this.options.editModel,
        a = k(e.currentTarget),
        b = this.getCellIndices({
            $td: a
        }),
        b = this.iMerge.getRootCell(b.rowIndx, b.colIndx, 'o'),
        b = this.normalize(b),
        f = b.rowIndx,
        d = b.colIndx;
        b.$td = a;
        b.evt = e;
        if (!1 == this._trigger('cellClick', e, b)) return !1;
        null == d || 0 > d || 1 == h.clicksToEdit && this.isEditableRow({
            rowIndx: f
        }) && this.isEditableCell({
            colIndx: d,
            rowIndx: f
        }) && this.editCell(b)
    };
    c._onRightClickCell = function (e) {
        var h = k(e.currentTarget),
        a = this.getCellIndices({
            $td: h
        }),
        b = a.rowIndxPage,
        f = b + this.rowIndxOffset,
        a = a.colIndx,
        d = this.colModel;
        if (null != a && (d = d[a], !1 == this._trigger('cellRightClick', e, {
            $td: h,
            rowIndxPage: b,
            rowIndx: f,
            colIndx: a,
            dataIndx: d.dataIndx,
            column: d,
            rowData: this.pdata[b]
        }))) return !1
    };
    c.highlightCell = function (e) {
        e.addClass('pq-grid-cell-hover ui-state-hover')
    };
    c.unHighlightCell = function (e) {
        e.removeClass('pq-grid-cell-hover ui-state-hover')
    };
    c.highlightRow = function (e) {
        isNaN(e) || (e = this.getRow({
            rowIndxPage: e
        })) && e.addClass('pq-grid-row-hover ui-state-hover')
    };
    c.unHighlightRow = function (e) {
        isNaN(e) || (e = this.getRow({
            rowIndxPage: e
        })) && e.removeClass('pq-grid-row-hover ui-state-hover')
    };
    c._getCreateEventData = function () {
        return {
            dataModel: this.options.dataModel,
            data: this.pdata,
            colModel: this.options.colModel
        }
    };
    c._findCellFromEvt = function (e) {
        e = k(e.target).closest('.pq-grid-cell');
        if (null == e || 0 == e.length) return {
            rowIndxPage: null,
            colIndx: null,
            $td: null
        };
        var h = this.getCellIndices({
            $td: e
        });
        h.$td = e;
        return h
    };
    c._initPager = function () {
        var e = this,
        h = e.options,
        a = h.pageModel;
        a.type && (h = {
            bootstrap: h.bootstrap,
            change: function (h, a) {
                e.blurEditor({
                    force: !0
                });
                var b = e.options.pageModel;
                void 0 != a.curPage && (b.prevPage = b.curPage, b.curPage = a.curPage);
                void 0 != a.rPP && (b.rPP = a.rPP);
                'remote' == b.type ? e.remoteRequest({
                    callback: function () {
                        e._onDataAvailable({
                            apply: !0,
                            header: !1
                        })
                    }
                })  : e.refreshView({
                    header: !1,
                    source: 'pager'
                })
            },
            refresh: function (h) {
                e.refreshDataAndView()
            }
        }, h = k.extend(h, a), this.pagerW = pq.pager(a.appendTo ? a.appendTo : this.$footer, h))
    };
    c.generateLoading = function () {
        this.$loading && this.$loading.remove();
        this.$loading = k('<div class=\'pq-loading\'></div>').appendTo(this.element);
        k(['<div class=\'pq-loading-bg\'></div><div class=\'pq-loading-mask ui-state-highlight\'><div>',
        this.options.strLoading,
        '...</div></div>'].join('')).appendTo(this.$loading);
        this.$loading.find('div.pq-loading-bg').css('opacity', 0.2)
    };
    c._refreshLoadingString = function () {
        this.$loading.find('div.pq-loading-mask').children('div').html(this.options.strLoading)
    };
    c.showLoading = function () {
        null == this.showLoadingCounter && (this.showLoadingCounter = 0);
        this.showLoadingCounter++;
        this.$loading.show()
    };
    c.hideLoading = function () {
        0 < this.showLoadingCounter && this.showLoadingCounter--;
        this.showLoadingCounter || this.$loading.hide()
    };
    c.refreshDataFromDataModel = function (e) {
        e = e || {
        };
        var h = this.options,
        a = h.pageModel,
        b = h.dataModel.data,
        f,
        d = a.type;
        f = this._queueATriggers;
        for (var c in f) {
            var m = f[c];
            delete f[c];
            this._trigger(c, m.evt, m.ui)
        }
        this._trigger('beforeRefreshData', null, {
        });
        this.rowIndxOffset = 0;
        'local' == d ? (a.totalRecords = b.length, a.totalPages = h = Math.ceil(b.length / a.rPP), a.curPage > h && (a.curPage = h), h && !a.curPage && (a.curPage = 1), h = (a.curPage - 1) * a.rPP, f = a.curPage * a.rPP, f > b.length && (f = b.length), this.pdata = b.slice(h, f))  : 'remote' == d ? (a.totalPages = h = Math.ceil(a.totalRecords / a.rPP), a.curPage > h && (a.curPage = h), h && !a.curPage && (a.curPage = 1), f = a.rPP, f > b.length && (f = b.length), this.pdata = b.slice(0, f))  : this.pdata = h.backwardCompat ? b.slice(0)  : b;
        if ('local' == d || 'remote' == d) this.rowIndxOffset = a.rPP * (a.curPage -
        1);
        this._trigger('dataReady', null, {
            source: e.source
        })
    };
    c.getQueryStringCRUD = function () {
        return ''
    };
    c.remoteRequest = function (e) {
        this.loading && this.xhr.abort();
        e = e || {
        };
        var h = this,
        a = '',
        b = '',
        f = this.options,
        d = !1,
        c = this.colModel,
        m = f.dataModel,
        l = f.sortModel,
        g = f.filterModel,
        r = f.pageModel;
        if ('function' == typeof m.getUrl) (f = m.getUrl.call(this, {
            colModel: c,
            dataModel: m,
            sortModel: l,
            groupModel: f.groupModel,
            pageModel: r,
            filterModel: g
        })) && f.url && (a = f.url),
        f && f.data && (b = f.data);
         else if ('string' == typeof m.url) {
            var a = m.url,
            b = {
            },
            f = {
            },
            y = {
            };
            'remote' == l.type && (e.initBySort || this.sort({
                initByRemote: !0
            }), (l = this.iSort.getQueryStringSort()) && (b = {
                pq_sort: l
            }));
            'remote' == r.type && (y = {
                pq_curpage: r.curPage,
                pq_rpp: r.rPP
            });
            'local' != g.type && (l = this.iFilterData.getQueryStringFilter()) && (d = !0, f = {
                pq_filter: l
            });
            var l = m.postData,
            s = m.postDataOnce;
            l && 'function' == typeof l && (l = l.call(this, {
                colModel: c,
                dataModel: m
            }));
            b = k.extend({
                pq_datatype: m.dataType
            }, f, y, b, l, s)
        }
        a && (this.loading = !0, this.showLoading(), this.xhr = k.ajax({
            url: a,
            dataType: m.dataType,
            async: null == m.async ? !0 : m.async,
            cache: m.cache,
            contentType: m.contentType,
            type: m.method,
            data: b,
            beforeSend: function (e, a) {
                if ('function' == typeof m.beforeSend) return m.beforeSend.call(h, e, a)
            },
            success: function (a, b, f) {
                'function' == typeof m.getData && (a = m.getData.call(h, a, b, f));
                m.data = a.data;
                'remote' == r.type && (a.curPage && (r.curPage = a.curPage), a.totalRecords && (r.totalRecords = a.totalRecords));
                h.hideLoading();
                h.loading = !1;
                h._trigger('load', null, {
                    dataModel: m,
                    colModel: c
                });
                e.callback && e.callback();
                d && (h._queueATriggers.filter = {
                    ui: {
                        type: 'remote',
                        filterModel: g
                    }
                })
            },
            error: function (e, a, b) {
                h.hideLoading();
                h.loading = !1;
                if ('function' == typeof m.error) m.error.call(h, e, a, b);
                 else if ('abort' != b) throw 'Error : ' + b;
            }
        }))
    };
    c._refreshTitle = function () {
        this.$title.html(this.options.title)
    };
    c._destroyDraggable = function () {
        var e = this.element,
        h = e.parent('.pq-wrapper');
        h.length && h.data('draggable') && (h.draggable('destroy'), this.$title.removeClass('pq-draggable pq-no-capture'), e.unwrap('.pq-wrapper'))
    };
    c._refreshDraggable = function () {
        var e = this.element,
        h = this.$title;
        this.options.draggable ? (h.addClass('pq-draggable pq-no-capture'), e.parent('.pq-wrapper').length || e.wrap('<div class=\'pq-wrapper\' />'), e.parent('.pq-wrapper').draggable({
            handle: h
        }))  : this._destroyDraggable()
    };
    c._refreshResizable = function () {
        var e = this,
        h = this.element,
        a = this.options,
        b = - 1 < (a.width + '').indexOf('%'),
        f = - 1 < (a.height + '').indexOf('%'),
        d = 'auto' == a.width,
        c = 'flex' == a.width,
        m = 'flex' == a.height;
        if (!a.resizable || (m || f) && (c || b || d)) this._destroyResizable();
         else {
            var l = 'e,s,se';
            if (m || f) l = 'e';
             else if (c || b || d) l = 's';
            b = !0;
            h.hasClass('ui-resizable') && (f = h.resizable('option', 'handles'), l == f ? b = !1 : this._destroyResizable());
            b && h.resizable({
                helper: 'ui-state-default',
                handles: l,
                minWidth: a.minWidth,
                minHeight: a.minHeight ? a.minHeight : 100,
                delay: 0,
                start: function (e, h) {
                    k(h.helper).css({
                        opacity: 0.5,
                        background: '#ccc',
                        border: '1px solid steelblue'
                    })
                },
                resize: function (e, h) {
                },
                stop: function (h, b) {
                    var f = e.element,
                    d = f[0],
                    c = a.width,
                    m = a.height,
                    A = - 1 < (c + '').indexOf('%'),
                    l = - 1 < (m + '').indexOf('%'),
                    t = !1;
                    d.style.width = d.offsetWidth + 3 + 'px';
                    d.style.height = d.offsetHeight + 3 + 'px';
                    l || 'flex' == m || (t = !0, a.height = d.offsetHeight);
                    A || 'auto' == c || 'flex' == c || (t = !0, a.width = d.offsetWidth);
                    e.refresh();
                    f.css('position', 'relative');
                    t && k(window).trigger('resize')
                }
            })
        }
    };
    c._refreshAfterResize = function () {
        var e = this.options,
        h = e.width,
        a = e.height,
        e = - 1 != (h + '').indexOf('%') ? !0 : !1,
        h = 'auto' === h,
        a = - 1 != (a + '').indexOf('%') ? !0 : !1;
        (e || h || a) && this.refresh()
    };
    c.refresh = function (e) {
        this.iRefresh.refresh(e)
    };
    c.refreshView = function (e) {
        null != this.options.editModel.indices && this.blurEditor({
            force: !0
        });
        this.refreshDataFromDataModel(e);
        this.refresh(e)
    };
    c._refreshPager = function () {
        var e = this.options,
        h = e.pageModel,
        a = h.rPP,
        b = h.totalRecords;
        h.type ? (h = e.pageModel, this.pagerW || this._initPager(), this.pagerW.option(h), b > a ? this.$bottom.css('display', '')  : e.showBottom || this.$bottom.css('display', 'none'))  : (this.pagerW && (this.pagerW.destroy(), this.pagerW = null), e.showBottom ? this.$bottom.css('display', '')  : this.$bottom.css('display', 'none'))
    };
    c.getInstance = function () {
        return {
            grid: this
        }
    };
    c.refreshDataAndView = function (e) {
        if ('remote' == this.options.dataModel.location) {
            var h = this;
            this.remoteRequest({
                callback: function () {
                    h._onDataAvailable(e)
                }
            })
        } else this._onDataAvailable(e)
    };
    c.getColIndx = function (e) {
        var h = e.dataIndx;
        e = e.column;
        var a;
        if (e) a = !0;
         else if (void 0 === h) throw 'dataIndx / column NA';
        var b = this.colModel,
        f = b.length;
        if (a) for (h = 0; h < f; h++) {
            if (b[h] == e) return h
        } else if (h = this.colIndxs[h], null != h) return h;
        return - 1
    };
    c.getColumn = function (e) {
        if (null == e.dataIndx) throw 'dataIndx N/A';
        return this.columns[e.dataIndx]
    };
    c._generateCellRowOutline = function () {
        var e = this.options,
        h = e.editModel;
        if (this.$div_focus) {
            if (e.debug) throw 'this.$div_focus already present assert failed';
        } else e = this.element,
        h.inline && (e = this.getCell(h.indices), e.css('padding', 0).empty()),
        this.$div_focus = k('<div class=\'pq-editor-outer\'><div class=\'pq-editor-inner\'></div></div>').appendTo(e),
        this.$div_focus.css('zIndex', e.zIndex() + 5),
        h = k.extend({
            all: !0
        }, h.indices),
        h = this.getCell(h),
        h.css('height', h[0].offsetHeight),
        h.empty(),
        this.refreshEditorPos()
    };
    c._removeEditOutline = function (e) {
        if (this.$div_focus) {
            e = this.$div_focus.find('.pq-editor-focus');
            e.hasClass('hasDatepicker') && e.datepicker('hide').datepicker('destroy');
            if (e[0] == document.activeElement) {
                var h = this._blurEditMode;
                this._blurEditMode = !0;
                e.blur();
                this._blurEditMode = h
            }
            this.$div_focus.remove();
            delete this.$div_focus;
            e = this.options.editModel;
            h = k.extend({
            }, e.indices);
            e.indices = null;
            h.rowData = void 0;
            this.refreshCell(h)
        }
    };
    c.refreshEditorPos = function () {
        var e = this.options.editModel,
        h = e.cellBorderWidth,
        a = this.$div_focus,
        b = this.getCell(e.indices);
        if (!b || !b.length) return !1;
        var e = b[0].offsetWidth,
        f = b[0].offsetHeight,
        d = this.element.offset(),
        b = b.offset();
        a.css({
            height: f,
            width: e - 1,
            borderWidth: h,
            left: b.left - d.left - 1,
            top: b.top - d.top - 1
        })
    };
    c.setEditorPosTimer = function () {
        var e = this,
        h = this.options;
        this._refreshEditorPosTimer && (window.clearInterval(this._refreshEditorPosTimer), this._refreshEditorPosTimer = null);
        this._refreshEditorPosTimer = window.setInterval(function () {
            h.editModel.indices && e.refreshEditorPos()
        }, 200)
    };
    c.get$Tbl = function (e, h) {
        var a = this.$tbl,
        b = [
        ];
        if (a && a.length) {
            var f = this.pqpanes,
            d = this.options,
            c = d.freezeRows,
            d = d.freezeCols;
            f.h && f.v ? null == h ? e >= c ? b.push(a[2], a[3])  : b.push(a[0], a[1])  : b = h >= d && e >= c ? a[3] : h < d && e >= c ? a[2] : h >= d && e < c ? a[1] : a[0] : b = f.v ? null == h ? a : h >= d ? a[1] : a[0] : f.h ? e >= c ? a[1] : a[0] : a[0];
            if (b) return k(b)
        }
    };
    c.scrollCell = function (e) {
        this.scrollRow(e);
        this.scrollColumn(e)
    };
    c.scrollY = function (e) {
        this.vscroll.option('cur_pos', e);
        this.vscroll.scroll()
    };
    c.scrollRow = function (e) {
        var h = this.options;
        e = this.normalize(e);
        var a = e.rowIndxPage,
        b = e.rowData;
        if (!this.pdata || a >= this.pdata.length || !b || b.pq_hidden) return !1;
        h.virtualY ? this._scrollRowVirtual(e)  : this.iMouseSelection.scrollRowNonVirtual(e)
    };
    c._scrollRowVirtual = function (e) {
        var h = this.options,
        a = e.rowIndxPage,
        b = this.iHierarchy ? !0 : !1,
        f = e.rowIndx;
        e = this.vscroll;
        var d = this.scrollCurPos,
        a = null == a ? f - this.rowIndxOffset : a,
        f = parseInt(h.freezeRows);
        if (!(a < f) && (h = this._calcCurPosFromRowIndxPage(a), null != h)) {
            h < d && (e.option('cur_pos', h), e.scroll());
            var c = this.get$Tbl(a);
            if (!c || !c.length) return null;
            var m = c.children('tbody').children('tr[pq-row-indx=' + a + ']'),
            l = a = m.last();
            1 < m.length && (l = m.first());
            var g = a[0],
            m = parseInt(c.css('marginTop'));
            if (void 0 == g) e.option('cur_pos', h),
            e.scroll();
             else {
                var g = g.offsetTop + g.offsetHeight,
                k = this.$cont[0].offsetHeight,
                y = this._getSBHeight(),
                l = l.prev('tr');
                if (!l.hasClass('pq-row-hidden') && !l.hasClass('pq-last-frozen-row') && g > k - y - m) {
                    l = g - (k - y - m);
                    m = c.children().children('tr');
                    g = c = 0;
                    f ? (f = m.filter('tr.pq-last-frozen-row').last().next(), 0 == f.length && (f = m.filter('tr.pq-row-hidden').next()))  : f = m.filter('tr.pq-row-hidden').next();
                    do {
                        if (!f.length) break;
                        c += f[0].offsetHeight;
                        if (f[0] == a[0]) break;
                         else if (b && !1 != f.hasClass('pq-detail-child') || g++, c >= l) break;
                        f = f.next()
                    } while (1);
                    b = d + g;
                    b > h && (b = h);
                    d = e.option('num_eles');
                    d < b + 1 && (d = b + 1);
                    e.option({
                        num_eles: d,
                        cur_pos: b
                    });
                    e.scroll()
                }
            }
        }
    };
    c.blurEditor = function (e) {
        if (this.$div_focus) {
            var h = this.$div_focus.find('.pq-editor-focus');
            if (e && e.blurIfFocus) document.activeElement == h[0] && h.blur();
             else return h.triggerHandler('blur', e)
        }
    };
    c._scrollColumnVirtual = function (e) {
        var h = e.colIndx,
        a = this.hscroll,
        h = null == h ? this.colIndxs[e.dataIndx] : h;
        e = this.options.freezeCols;
        var b = this._calcRightEdgeCol(h).width,
        f = this.iRefresh.getEContWd();
        if (b > f) {
            for (var b = this.calcWidthCols( - 1, h + 1) - f, f = this.colModel, d = f.length, c = 0, m = 0, l = e; l < d; l++) {
                var g = f[l];
                g.hidden || (c += g.outerWidth);
                if (l == h) {
                    m = l - e - this._calcNumHiddenUnFrozens(l);
                    break
                } else if (c >= b) {
                    m = l - e - this._calcNumHiddenUnFrozens(l) + 1;
                    break
                }
            }
            a.option('cur_pos', m);
            a.scroll();
            return !0
        }
        return h >=
        e && h < this.initH ? (h = h - e - this._calcNumHiddenUnFrozens(h), a.option('cur_pos', h), a.scroll(), !0)  : !1
    };
    c.scrollColumn = function (e) {
        var h = this.options;
        return 'flex' !== h.width || h.maxWidth ? h.virtualX ? this._scrollColumnVirtual(e)  : this.iMouseSelection.scrollColumnNonVirtual(e)  : !1
    };
    c.selection = function (e) {
        if (e) {
            var h = e.method,
            a,
            b = e.type;
            'row' == b ? a = this.iRows[h](e)  : 'cell' == b && (a = this.iCells[h](e));
            if ('add' == h || 'remove' == h || 'removeAll' == h) this.iSelection.dirty = !0,
            this.iSelection._trigger();
            return a
        }
        e = this.iSelection;
        e.isDirty() && e.refresh();
        return e
    };
    c.goToPage = function (e) {
        var h = this.options.pageModel;
        if ('local' == h.type || 'remote' == h.type) {
            var a = e.rowIndx,
            b = h.rPP;
            e = null == e.page ? Math.ceil((a + 1) / b)  : e.page;
            e != h.curPage && (h.curPage = e, 'local' == h.type ? this.refreshView()  : this.refreshDataAndView())
        }
    };
    c.setSelection = function (e) {
        if (null == e) return this.iSelection.removeAll(),
        !0;
        var h = this.pdata;
        if (!h || !h.length) return !1;
        e = this.normalize(e);
        var h = e.rowIndx,
        a = e.rowIndxPage,
        b = e.colIndx;
        e.rowData && null == h && (a = this.getRowIndx(e), e.rowIndx = h = a.rowIndx, e.rowIndxPage = a.rowIndxPage);
        if (null == h || 0 > h || 0 > b || b >= this.colModel.length) return !1;
        this.goToPage(e);
        a = h - this.rowIndxOffset;
        this.scrollRow({
            rowIndxPage: a
        });
        null == b ? this.range({
            r1: h
        }).select()  : (this.scrollColumn({
            colIndx: b
        }), this.range({
            r1: h,
            c1: b
        }).select());
        !1 !== e.focus && this.focus({
            rowIndxPage: a,
            colIndx: null == b ? this.getFirstVisibleCI()  : b
        })
    };
    c.getColModel = function () {
        return this.colModel
    };
    c.saveEditCell = function (e) {
        var h = this.options,
        a = h.editModel;
        if (!a.indices) return null;
        var b = k.extend({
        }, a.indices);
        e = e ? e.evt : null;
        var f = b.rowIndxPage,
        a = f + this.rowIndxOffset,
        d = this.colModel[b.colIndx],
        b = d.dataIndx,
        c = this.pdata[f],
        m = h.dataModel,
        l;
        if (null == c) return null;
        if (null != f) {
            h = this.getEditCellData();
            if (k.isPlainObject(h)) {
                l = {
                };
                for (var g in h) l[g] = c[g]
            } else l = this.readCell(c, d);
            '<br>' == h && (h = '');
            null == l && '' === h && (h = null);
            g = {
                rowIndx: a,
                rowIndxPage: f,
                dataIndx: b,
                column: d,
                newVal: h,
                value: h,
                oldVal: l,
                rowData: c,
                dataModel: m
            };
            if (!1 === this._trigger('cellBeforeSave', e, g)) return !1;
            f = {
            };
            d = !1;
            k.isPlainObject(h) ? (f = h, d = !0)  : f[b] = h;
            if (!1 === this.updateRow({
                row: f,
                rowIndx: a,
                refresh: d,
                silent: !0,
                source: 'edit',
                checkEditable: !1
            })) return !1;
            this._trigger('cellSave', e, g);
            return !0
        }
    };
    c._addInvalid = function (e) {
    };
    c._digestData = function (e) {
        if (!1 === this._trigger('beforeValidate', null, e)) return !1;
        var h = this.options,
        a = h.editModel,
        b = h.dataModel,
        f = b.data,
        d = h.colModel,
        c = h.pageModel,
        m = h.historyModel,
        l = e.validate,
        l = null == l ? a.validate : l,
        g = 'remote' == c.type,
        k = e.allowInvalid,
        k = null == k ? a.allowInvalid : k,
        y = h.trackModel,
        a = e.track,
        a = null ==
        a ? null == h.track ? y.on : h.track : a,
        s = e.history,
        s = null == s ? m.on : s,
        n = this.iHistory,
        m = this.iUCData,
        C = e.checkEditable,
        C = null == C ? !0 : C,
        B = e.checkEditableAdd,
        B = null == B ? C : B,
        y = this.saveCell,
        D = this.columns,
        E = this.colIndxs,
        F = e.source,
        K = this.rowIndxOffset,
        M = this.getValueFromDataType,
        L = e.rowList,
        H = L.length;
        f || (f = h.dataModel.data = [
        ]);
        for (var G = [
        ], O = 0; O < H; O++) {
            var I = L[O],
            J = I.newRow,
            P = I.rowData,
            N = I.type,
            U = I.checkEditable,
            Q = I.rowIndx,
            V = I.oldRow;
            null == U && ('update' == N ? U = C : 'add' == N && (U = B));
            if ('update' == N) {
                if (!V) throw 'oldRow required while update';
                if (U && !0 !== h.editable && !1 === this.isEditableRow({
                    rowIndx: Q,
                    rowData: P
                })) continue
            } else if ('delete' == N) {
                G.push(I);
                continue
            }
            if ('add' == N) for (var T = 0, W = d.length; T < W; T++) {
                var R = d[T],
                S = R.dataIndx;
                J[S] = J[S]
            }
            for (S in J) if (R = D[S], T = E[S], R) if (U && null != R.editable && !1 === this.isEditableCell({
                rowIndx: Q,
                colIndx: T,
                dataIndx: S
            })) delete J[S];
             else {
                var X = R.dataType,
                T = M(J[S], X),
                W = V ? V[S] : void 0,
                W = void 0 !== W ? M(W, X)  : void 0;
                J[S] = T;
                if (l && R.validations) if ('edit' == F && !1 === k) {
                    if (R = this.isValid({
                        focusInvalid: !0,
                        dataIndx: S,
                        rowIndx: Q,
                        value: T
                    }), !1 == R.valid && !R.warn) return !1
                } else R = this.iIsValid.isValidCell({
                    column: R,
                    rowData: 'add' == N ? J : P,
                    allowInvalid: k,
                    value: T
                }),
                !1 === R.valid && (!1 !== k || R.warn || delete J[S]);
                'update' == N && T === W && (delete J[S], V && delete V[S])
            }
            if (J) if ('update' == N) for (S in J) {
                G.push(I);
                break
            } else G.push(I)
        }
        L = e.rowList = G;
        H = L.length;
        if (!H) return 'edit' == F ? null : !1;
        s && (n.increment(), n.push({
            rowList: L
        }));
        for (O = 0; O < H; O++) if (I = L[O], N = I.type, J = I.newRow, Q = I.rowIndx, h = I.rowIndxPage, P = I.rowData, 'update' == N) for (S in a && m.update({
            rowData: P,
            row: J,
            refresh: !1
        }), J) R = D[S],
        T = J[S],
        y(P, R, T);
         else if ('add' == N) a && m.add({
            rowData: J
        }),
        null == Q && null == h ? f.push(J)  : (h = Q - K, h = g ? h : Q, f.splice(h, 0, J)),
        g && c.totalRecords++;
         else if ('delete' == N) {
            h = this.getRowIndx({
                rowData: P,
                dataUF: !0
            });
            d = h.uf;
            Q = h.rowIndx;
            if (a) m['delete']({
                rowIndx: Q,
                rowData: P
            });
            h = Q - K;
            h = g ? h : Q;
            d ? b.dataUF.splice(Q, 1)  : (h = f.splice(h, 1)) && h.length && g && c.totalRecords--
        }
        this._trigger('change', null, e);
        return !0
    };
    c.refreshColumn = function (e) {
        e = this.normalize(e);
        var h = this.initV,
        a = this.finalV,
        b = this.options.freezeRows,
        f = e.colIndx,
        d = e.dataIndx,
        c = e.column;
        e.skip = !0;
        for (var m = 0; m <= a; m++) m < h && m >= b && (m = h),
        e.rowIndxPage = m,
        this.refreshCell(e);
        this._trigger('refreshColumn', null, {
            column: c,
            colIndx: f,
            dataIndx: d
        });
        this.iRefresh.softRefresh()
    };
    c.refreshCell = function (e) {
        e = this.normalize(e);
        if (this.pdata) {
            var h = e.skip,
            a = e.rowIndx,
            b = e.rowIndxPage,
            f = e.colIndx,
            d = this.iMerge;
            if (e.rowData) {
                var c = this.getCell({
                    all: !0,
                    rowIndxPage: b,
                    colIndx: f
                });
                if (c && 0 < c.length) {
                    var m = e;
                    d.ismergedCell(a, f) && (m = d.getRootCell(a, f, 'a'));
                    var a = this.iGenerateView.renderCell(m),
                    l;
                    a && (c.replaceWith(a), (l = this._focusElement) && l.rowIndxPage == b && this.focus(), h || (this._trigger('refreshCell', null, e), this.iRefresh.softRefresh()))
                }
            }
        }
    };
    c.refreshRow = function (e) {
        e = this.normalize(e);
        if (this.pdata) {
            var h = e.rowIndx,
            a = e.rowIndxPage,
            b = this.options,
            f = b.freezeRows,
            d = e.rowData;
            if (!d || d.pq_hidden || a > this.finalV || a < this.initV && a >= f) return null;
            var c = this.getRow({
                all: !0,
                rowIndxPage: a
            }),
            m,
            l = [
            ];
            this.iGenerateView.refreshRow(a, l);
            l = l.join('');
            if (c && c.length) c.replaceWith(l);
             else if (b.virtualY) if (a ==
            this.finalV) this.$tbl.append(l);
             else if (a == this.initV) for (b = this.$tbl, c = 0; c < b.length; c++) k(b[c]).children('tbody').children(f ? '.pq-last-frozen-row' : 'tr:first').after(l);
             else throw 'refreshRow > rip not found';
             else return !1;
            (m = this._focusElement) && m.rowIndxPage == a && this.focus();
            this._trigger('refreshRow', null, {
                rowData: d,
                rowIndx: h,
                rowIndxPage: a
            });
            !1 !== e.refresh && this.iRefresh.softRefresh();
            return !0
        }
    };
    c.quitEditMode = function (e) {
        if (!this._quitEditMode) {
            var a = !1,
            b = !1,
            f = !1,
            d = this.options.editModel,
            c = d.indices,
            m = void 0;
            this._quitEditMode = !0;
            e && (a = e.old, b = e.silent, f = e.fireOnly, m = e.evt);
            c && (b || a || this._trigger('editorEnd', m, c), f || (this._removeEditOutline(e), d.indices = null));
            this._quitEditMode = null
        }
    };
    c.getViewPortRowsIndx = function () {
        return {
            beginIndx: this.initV,
            endIndx: this.finalV
        }
    };
    c.getViewPortIndx = function () {
        return {
            initV: this.initV,
            finalV: this.finalV,
            initH: this.initH,
            finalH: this.finalH
        }
    };
    c.getRowIndxOffset = function () {
        return this.rowIndxOffset
    };
    c.getEditCell = function () {
        var e = this.options.editModel;
        if (e.indices) {
            var e = this.getCell(e.indices),
            a = this.$div_focus.children('.pq-editor-inner'),
            b = a.find('.pq-editor-focus');
            return {
                $td: e,
                $cell: a,
                $editor: b
            }
        }
        return {
        }
    };
    c.editCell = function (e) {
        e = this.normalize(e);
        var a = this.iMerge,
        b = e.rowIndx,
        f = e.colIndx;
        if (a.ismergedCell(b, f) && (a = a.getRootCell(b, f, 'o'), a.rowIndx != e.rowIndx || a.colIndx != e.colIndx)) return !1;
        this.scrollRow(e);
        this.scrollColumn(e);
        if ((a = this.getCell(e)) && a.length) return this._editCell(e)
    };
    c.getFirstEditableColIndx = function (e) {
        if (null == e.rowIndx) throw 'rowIndx NA';
        if (!this.isEditableRow(e)) return - 1;
        for (var a = this.colModel, b = 0; b < a.length; b++) if (e.colIndx = b, this.isEditableCell(e) && !a[b].hidden) return b;
        return - 1
    };
    c.editFirstCellInRow = function (e) {
        var a = this.rowIndxOffset,
        b = e.rowIndx;
        e = e.rowIndxPage;
        b = null == b ? e + a : b;
        e = null == e ? b - a : e;
        a = this.getFirstEditableColIndx({
            rowIndx: b
        });
        - 1 != a && this.editCell({
            rowIndxPage: e,
            colIndx: a
        })
    };
    c._editCell = function (e) {
        var h = this.normalize(e),
        b = this;
        e = h.evt;
        var f = h.rowIndxPage,
        d = h.colIndx,
        c = b.pdata;
        if (!c || f >= c.length) return !1;
        var m = this.options,
        l = m.editModel,
        c = c[f],
        g = h.rowIndx,
        u = this.colModel[d],
        r = u.dataIndx,
        y = b.readCell(c, u),
        s = {
            rowIndx: g,
            rowIndxPage: f,
            cellData: y,
            rowData: c,
            dataIndx: r,
            colIndx: d,
            column: u
        },
        n = u.editor,
        n = 'function' == typeof n ? n.call(this, s)  : n;
        void 0 === n && 'function' == typeof m.geditor && (n = m.geditor.call(this, s));
        if (!1 !== n) {
            n && n.getData && (l._getData = n.getData);
            var C = m.editor,
            B = n ? k.extend({
            }, C, n)  : C,
            m = !1;
            if (l.indices) {
                n = l.indices;
                if (n.rowIndxPage == f && n.colIndx == d) {
                    this.refreshEditorPos();
                    var D = this.$div_focus.find('.pq-editor-focus');
                    window.setTimeout(function () {
                        D.focus()
                    }, 0);
                    return !1
                }
                if (!1 === this.blurEditor({
                    evt: e
                })) return !1;
                this.quitEditMode({
                    evt: e
                })
            }
            l.indices = {
                rowIndxPage: f,
                rowIndx: g,
                colIndx: d,
                column: u,
                dataIndx: r
            };
            this._generateCellRowOutline();
            n = this.$div_focus.children('.pq-editor-inner');
            'right' == u.align ? n.addClass('pq-align-right')  : 'center' == u.align ? n.addClass('pq-align-center')  : n.addClass('pq-align-left');
            s.$cell = n;
            var E,
            F = B.type,
            h = null == h.select ? B.select : h.select,
            K = B.init,
            M = B.valueIndx,
            L = B.dataMap,
            H = B.mapIndices,
            H = H ?
            H : {
            },
            G = B.cls || '',
            G = 'function' === typeof G ? G.call(this, s)  : G;
            E = 'pq-editor-focus ' + G;
            var G = E + ' pq-cell-editor ',
            O = B.attr || '',
            O = 'function' === typeof O ? O.call(this, s)  : O,
            I = B.style || '',
            I = (I = 'function' === typeof I ? I.call(this, s)  : I) ? 'style=\'' + I + '\'' : '';
            s.cls = E;
            s.attr = O;
            'function' == typeof F && (E = F.call(this, s)) && (F = E);
            C._type = F;
            'checkbox' == F ? (B = B.subtype, n.html('<input ' + (y ? 'checked=\'checked\'' : '') + ' class=\'' + G + '\' ' + O + ' ' + I + ' type=checkbox name=\'' + r + '\' />'), C = n.children('input'), 'triple' == B && (C.pqval({
                val: y
            }), n.click(function (e) {
                k(this).children('input').pqval({
                    incr: !0
                })
            })))  :
            'textarea' == F || 'select' == F || 'textbox' == F ? ('textarea' == F ? E = '<textarea class=\'' + G + '\' ' + O + ' ' + I + ' name=\'' + r + '\' ></textarea>' : 'select' == F ? (C = B.options || [
            ], 'function' === typeof C && (C = C.call(this, s)), G = [
                O,
                ' class=\'',
                G,
                '\' ',
                I,
                ' name=\'',
                r,
                '\''
            ].join(''), E = a.select({
                options: C,
                attr: G,
                prepend: B.prepend,
                labelIndx: B.labelIndx,
                valueIndx: M,
                groupIndx: B.groupIndx,
                dataMap: L
            }))  : E = '<input class=\'' + G + '\' ' + O + ' ' + I + ' type=text name=\'' + r + '\' />', k(E).appendTo(n).val('select' == F && null != M && (H[M] || this.columns[M]) ? H[M] ? c[H[M]] :
            c[M] : y))  : F && 'contenteditable' != F || (n.html('<div contenteditable=\'true\' tabindx=\'0\' ' + I + ' ' + O + ' class=\'' + G + '\'></div>'), n.children().html(y), m = !0);
            'function' == typeof K && K.call(this, s);
            var b = this,
            D = n.children('.pq-editor-focus'),
            J = l.filterKeys;
            (y = u.editModel) && void 0 !== y.filterKeys && (J = y.filterKeys);
            var P = {
                $cell: n,
                $editor: D,
                dataIndx: r,
                column: u,
                colIndx: d,
                rowIndx: g,
                rowIndxPage: f,
                rowData: c
            };
            l.indices = P;
            D.data({
                FK: J
            }).on('click', function (e) {
                k(this).focus()
            }).on('keydown', function (e) {
                b.iKeyNav._keyDownInEdit(e)
            }).on('keypress', function (e) {
                return b.iKeyNav._keyPressInEdit(e, {
                    FK: J
                })
            }).on('keyup', function (e) {
                return b.iKeyNav._keyUpInEdit(e, {
                    FK: J
                })
            }).on('blur', function (e, a) {
                var h = b.options.editModel,
                f = h.onBlur,
                d = 'save' == f,
                c = 'validate' == f,
                m = h.cancelBlurCls,
                l = a ? a.force : !1;
                if (!b._quitEditMode && !b._blurEditMode && h.indices) {
                    h = k(e.target);
                    if (!l) {
                        if (!1 === b._trigger('editorBlur', e, P) || !f || m && h.hasClass(m)) return;
                        if (h.hasClass('hasDatepicker')) {
                            if (h.datepicker('widget').is(':visible')) return !1
                        } else if (h.hasClass('ui-autocomplete-input')) {
                            if (h.autocomplete('widget').is(':visible')) return
                        } else if (h.hasClass('ui-multiselect')) {
                            if (k('.ui-multiselect-menu').is(':visible') || k(document.activeElement).closest('.ui-multiselect-menu').length) return
                        } else if (h.hasClass('pq-select-button') && (k('.pq-select-menu').is(':visible') || k(document.activeElement).closest('.pq-select-menu').length)) return
                    }
                    b._blurEditMode = !0;
                    if (!b.saveEditCell({
                        evt: e,
                        silent: l || d || !c
                    }) && !l && c) return b._deleteBlurEditMode(),
                    !1;
                    b.quitEditMode({
                        evt: e
                    });
                    b._deleteBlurEditMode()
                }
            }).on('focus', function (e) {
                b._trigger('editorFocus', e, P)
            });
            b._trigger('editorBegin', e, P);
            D.focus();
            window.setTimeout(function () {
                !1 ===
                k(document.activeElement).hasClass('pq-editor-focus') && (b.element ? b.element.find('.pq-editor-focus')  : k()).focus()
            }, 0);
            if (h) if (m) try {
                var N = D[0],
                U = document.createRange();
                U.selectNodeContents(N);
                var Q = window.getSelection();
                Q.removeAllRanges();
                Q.addRange(U)
            } catch (V) {
            } else D.select()
        }
    };
    c._deleteBlurEditMode = function (e) {
        var a = this;
        e = e ? e : {
        };
        a._blurEditMode && (e.timer ? window.setTimeout(function () {
            delete a._blurEditMode
        }, 0)  : delete a._blurEditMode)
    };
    c.getRow = function (e) {
        var a = this.normalize(e);
        e = a.rowIndxPage;
        var a = a.all ? this.$tbl : this.get$Tbl(e),
        b = k();
        if (a && a.length) {
            var f = a.children('tbody');
            null != e && (b = f.children('tr[pq-row-indx=' + e + ']'), b.length > a.length && (b = b.filter('.pq-detail-master')))
        }
        return b
    };
    c.getCell = function (e) {
        var a = e.all,
        b = this.options,
        f = this.normalize(e);
        e = f.rowIndxPage;
        var d = f.rowIndx,
        c = f.colIndx,
        m = this.iMerge;
        if (m.ismergedCell(d, c)) {
            b = m.getRootCell(d, c, 'a');
            d = m.getRootCell(d, c, 'o');
            if (!(e === d.rowIndxPage && c === d.colIndx || e === b.rowIndxPage && c === b.colIndx)) return k();
            e = b.rowIndxPage;
            c = d.colIndx
        } else if (e >= b.freezeRows && (e < this.initV || e > this.finalV) || c >= b.freezeCols && (c < this.initH || c > this.finalH) || !f.rowData || !f.column || f.rowData.pq_hidden || f.column.hidden) return k();
        return (a = a ? this.$tbl : this.get$Tbl(e, c)) && a.length ? a.children().children('tr[pq-row-indx=' + e + ']').children('[pq-col-indx=' + c + ']')  : k()
    };
    c.getCellHeader = function (e) {
        var a = e.colIndx;
        e = e.dataIndx;
        a = null == a ? this.colIndxs[e] : a;
        e = this.$tbl_header;
        var b = this.options.freezeCols;
        return e ? (1 < e.length && (e = a >= b ? k(e[1])  : k(e[0])), a = e.find('[pq-col-indx=' + a + '].pq-grid-col-leaf'))  : k()
    };
    c.getEditorIndices = function () {
        var e = this.options.editModel.indices;
        return e ? k.extend({
        }, e)  : null
    };
    c.getEditCellData = function () {
        var e = this.options,
        a = e.editModel,
        b = a.indices;
        if (!b) return null;
        var f = b.colIndx,
        d = b.rowIndxPage,
        c = b.rowIndx,
        m = this.colModel[f],
        l = m.editor,
        g = e.editor,
        e = l ? k.extend({
        }, g, l)  : g,
        u = e.valueIndx,
        r = e.labelIndx,
        l = (l = e.mapIndices) ? l : {
        },
        y = m.dataIndx,
        s = this.$div_focus.children('.pq-editor-inner'),
        n,
        C = a._getData || e.getData;
        a._getData = void 0;
        if ('function' == typeof C) n = C.call(this, {
            $cell: s,
            rowData: b.rowData,
            dataIndx: y,
            rowIndx: c,
            rowIndxPage: d,
            column: m,
            colIndx: f
        });
         else if (a = g._type, 'checkbox' == a) n = s.children(),
        n = 'triple' == e.subtype ? n.pqval()  : n.is(':checked') ? !0 : !1;
         else if ('contenteditable' == a) n = s.children().html();
         else if ((b = s.find('*[name="' + y + '"]')) && b.length) if ('select' == a && null != u) if (l[u] || this.columns[u]) {
            if (n = {
            }, n[l[u] ? l[u] : u] = b.val(), n[l[r] ? l[r] : r] = b.find('option:selected').text(), e = e.dataMap) if (a = b.find('option:selected').data('map')) for (b = 0; b < e.length; b++) f = e[b],
            n[l[f] ? l[f] : f] = a[f]
        } else n = b.val();
         else n = b.val();
         else (b = s.find('.pq-editor-focus')) && b.length && (n = b.val());
        return n
    };
    c.getCellIndices = function (e) {
        e = e.$td;
        if (null == e || 0 == e.length || e.closest('.pq-grid') [0] != this.element[0]) return {
        };
        var a = e.parent('tr').attr('pq-row-indx'),
        b;
        null != a && (a = parseInt(a), b = a + this.rowIndxOffset);
        e = e.attr('pq-col-indx');
        null != e && (e = parseInt(e));
        return this.iMerge.getRootCell(b, e, 'o')
    };
    c.getRowsByClass = function (e) {
        var a = this.options,
        b = 'remote' == a.pageModel.type,
        f = this.rowIndxOffset,
        a = a.dataModel.data,
        d = [
        ];
        if (null == a) return d;
        for (var c = 0, m = a.length; c < m; c++) {
            var l = a[c];
            if (l.pq_rowcls && (e.rowData = l, this.hasClass(e))) {
                var l = {
                    rowData: l
                },
                g = b ? c + f : c,
                k = g - f;
                l.rowIndx = g;
                l.rowIndxPage = k;
                d.push(l)
            }
        }
        return d
    };
    c.getCellsByClass = function (e) {
        var a = this.options,
        b = 'remote' == a.pageModel.type,
        f = this.rowIndxOffset,
        a = a.dataModel.data,
        d = [
        ];
        if (null == a) return d;
        for (var c = 0, m = a.length; c < m; c++) {
            var l = a[c],
            g = b ? c + f : c,
            k = l.pq_cellcls;
            if (k) for (var r in k) k = {
                rowData: l,
                rowIndx: g,
                dataIndx: r,
                cls: e.cls
            },
            this.hasClass(k) && (k = this.normalize(k), d.push(k))
        }
        return d
    };
    c.data = function (e) {
        var a = e.dataIndx,
        b = e.colIndx,
        a = null != b ? this.colModel[b].dataIndx : a,
        b = e.data,
        f = null == b || 'string' == typeof b ? !0 : !1;
        e = e.rowData || this.getRowData(e);
        if (!e) return {
            data: null
        };
        if (null == a) {
            a = e.pq_rowdata;
            if (f) {
                var d;
                null != a && (d = null == b ? a : a[b]);
                return {
                    data: d
                }
            }
            b = k.extend(!0, e.pq_rowdata, b);
            e.pq_rowdata = b
        } else {
            var c = e.pq_celldata;
            if (f) return null != c && (a = c[a], d = null == b || null == a ? a : a[b]),
            {
                data: d
            };
            c || (e.pq_celldata = {
            });
            b = k.extend(!0, e.pq_celldata[a], b);
            e.pq_celldata[a] = b
        }
    };
    c.attr = function (e) {
        var a = e.rowIndx,
        b = e.dataIndx,
        f = e.colIndx,
        b = null != f ? this.colModel[f].dataIndx : b,
        f = e.attr,
        d = null == f || 'string' == typeof f ? !0 : !1,
        c = this.rowIndxOffset,
        l = e.refresh;
        e = e.rowData || this.getRowData(e);
        if (!e) return {
            attr: null
        };
        d || !1 === l || null != a || (a = this.getRowIndx({
            rowData: e
        }).rowIndx);
        if (null == b) {
            b = e.pq_rowattr;
            if (d) {
                var g;
                null != b && (g = null == f ? b : b[f]);
                return {
                    attr: g
                }
            }
            f = k.extend(!0, e.pq_rowattr, f);
            e.pq_rowattr = f;
            !1 !== l && null != a && (a = this.getRow({
                rowIndxPage: a -
                c
            })) && (b = m(f), a.attr(b))
        } else {
            var v = e.pq_cellattr;
            if (d) return null != v && (a = v[b], g = null == f || null == a ? a : a[f]),
            {
                attr: g
            };
            v || (e.pq_cellattr = {
            });
            f = k.extend(!0, e.pq_cellattr[b], f);
            e.pq_cellattr[b] = f;
            !1 !== l && null != a && (a = this.getCell({
                rowIndxPage: a - c,
                dataIndx: b
            })) && (b = m(f), a.attr(b))
        }
    };
    var m = function (e) {
        var a = {
        },
        b;
        for (b in e) {
            var f = e[b];
            if (f) if ('title' == b) f = f.replace(/\"/g, '&quot;'),
            a[b] = f;
             else if ('style' == b && 'object' == typeof f) {
                var d = [
                ],
                c,
                m;
                for (m in f) (c = f[m]) && d.push(m + ':' + c);
                (f = d.join(';') + (d.length ? ';' :
                '')) && (a[b] = f)
            } else 'object' == typeof f && (f = JSON.stringify(f)),
            a[b] = f
        }
        return a
    };
    c.removeData = function (e) {
        var a = e.dataIndx,
        b = e.colIndx,
        a = null != b ? this.colModel[b].dataIndx : a,
        b = e.data,
        b = null == b ? [
        ] : b,
        b = 'string' == typeof b ? b.split(' ')  : b,
        f = b.length,
        d = e.rowData || this.getRowData(e);
        if (d) if (null == a) {
            if (a = d.pq_rowdata) {
                if (f) for (e = 0; e < f; e++) {
                    var c = b[e];
                    delete a[c]
                }
                f && !k.isEmptyObject(a) || delete d.pq_rowdata
            }
        } else if ((d = d.pq_celldata) && d[a]) {
            var m = d[a];
            if (f) for (e = 0; e < f; e++) c = b[e],
            delete m[c];
            f && !k.isEmptyObject(m) || delete d[a]
        }
    };
    c.removeAttr = function (e) {
        var a = e.rowIndx,
        b = e.dataIndx,
        f = e.colIndx,
        b = null != f ? this.colModel[f].dataIndx : b,
        d = e.attr,
        d = null == d ? [
        ] : d,
        d = 'string' == typeof d ? d.split(' ')  : d,
        c = d.length,
        f = a - this.rowIndxOffset,
        m = e.refresh,
        l = e.rowData || this.getRowData(e);
        if (l) if (!1 !== m && null == a && (a = this.getRowIndx({
            rowData: l
        }).rowIndx), null == b) {
            if (b = l.pq_rowattr) {
                if (c) for (e = 0; e < c; e++) {
                    var g = d[e];
                    delete b[g]
                } else for (g in b) d.push(g);
                c && !k.isEmptyObject(b) || delete l.pq_rowattr
            }
            !1 !== m && null != a && d.length && (d = d.join(' '), (a = this.getRow({
                rowIndxPage: f
            })) && a.removeAttr(d))
        } else {
            if ((l = l.pq_cellattr) && l[b]) {
                var u = l[b];
                if (c) for (e = 0; e < c; e++) g = d[e],
                delete u[g];
                 else for (g in u) d.push(g);
                c && !k.isEmptyObject(u) || delete l[b]
            }
            !1 !== m && null != a && d.length && (d = d.join(' '), (a = this.getCell({
                rowIndxPage: f,
                dataIndx: b
            })) && a.removeAttr(d))
        }
    };
    c.normalize = function (e) {
        var a = {
        },
        b;
        for (b in e) a[b] = e[b];
        var f = a.rowIndx,
        d = a.rowIndxPage;
        e = a.dataIndx;
        b = a.colIndx;
        if (null != d || null != f) {
            var c = this.rowIndxOffset,
            f = null == f ? parseInt(d, 10) + c : f,
            d = null == d ?
            parseInt(f, 10) - c : d;
            a.rowIndx = f;
            a.rowIndxPage = d;
            a.rowData = a.rowData || this.getRowData(a)
        }
        if (null != b || null != e) f = this.colModel,
        e = null == e ? f[b] ? f[b].dataIndx : void 0 : e,
        b = null == b ? this.colIndxs[e] : b,
        a.column = f[b],
        a.colIndx = b,
        a.dataIndx = e;
        return a
    };
    c.addClass = function (e) {
        var a = this.normalize(e),
        b = a.rowIndxPage,
        f = a.dataIndx,
        d = pq.arrayUnique;
        e = a.cls;
        var c = a.refresh,
        m = a.rowData;
        if (m) if (!1 !== c && null == b && (b = this.getRowIndx({
            rowData: m
        }).rowIndxPage), null == f) {
            var f = m.pq_rowcls,
            l;
            l = d((f ? f + ' ' + e : e).split(/\s+/)).join(' ');
            m.pq_rowcls = l;
            !1 !== c && null != b && (b = this.getRow({
                rowIndxPage: b
            })) && b.addClass(e)
        } else {
            a = [
            ];
            'function' != typeof f.push ? a.push(f)  : a = f;
            var g = m.pq_cellcls;
            g || (g = m.pq_cellcls = {
            });
            for (var m = 0, k = a.length; m < k; m++) f = a[m],
            l = (l = g[f]) ? l + ' ' + e : e,
            l = d(l.split(/\s+/)).join(' '),
            g[f] = l,
            !1 !== c && null != b && (f = this.getCell({
                rowIndxPage: b,
                dataIndx: f
            })) && f.addClass(e)
        }
    };
    c.removeClass = function (e) {
        var a = this.normalize(e),
        b = a.rowIndx,
        f = a.rowData,
        d = a.dataIndx;
        e = a.cls;
        a = a.refresh;
        if (f) {
            var c = f.pq_cellcls,
            m = f.pq_rowcls;
            !1 !== a && null ==
            b && (b = this.getRowIndx({
                rowData: f
            }).rowIndx);
            if (null == d) m && (f.pq_rowcls = this._removeClass(m, e), null != b && !1 !== a && (b = this.getRow({
                rowIndx: b
            })) && b.removeClass(e));
             else if (c) {
                m = [
                ];
                'function' != typeof d.push ? m.push(d)  : m = d;
                for (var l = 0, g = m.length; l < g; l++) {
                    var d = m[l],
                    k = c[d];
                    k && (f.pq_cellcls[d] = this._removeClass(k, e), null != b && !1 !== a && (d = this.getCell({
                        rowIndx: b,
                        dataIndx: d
                    })) && d.removeClass(e))
                }
            }
        }
    };
    c.hasClass = function (e) {
        var a = e.dataIndx,
        b = e.cls;
        e = this.getRowData(e);
        b = new RegExp('\\b' + b + '\\b');
        return e ? null ==
        a ? (a = e.pq_rowcls) && b.test(a) ? !0 : !1 : (e = e.pq_cellcls) && e[a] && b.test(e[a]) ? !0 : !1 : null
    };
    c._removeClass = function (e, a) {
        if (e && a) {
            for (var b = e.split(/\s+/), f = a.split(/\s+/), d = [
            ], c = 0, m = b.length; c < m; c++) {
                for (var l = b[c], g = !1, k = 0, r = f.length; k < r; k++) if (l === f[k]) {
                    g = !0;
                    break
                }
                g || d.push(l)
            }
            return 1 < d.length ? d.join(' ')  : 1 === d.length ? d[0] : null
        }
    };
    c.getRowIndx = function (e) {
        var a = e.$tr,
        b = e.rowData,
        f = this.rowIndxOffset;
        if (b) {
            var d = this.options.dataModel,
            a = this.get_p_data(),
            c = !1;
            e = e.dataUF ? d.dataUF : null;
            d = !1;
            if (a) for (var m = 0, l = a.length; m < l; m++) if (a[m] == b) {
                d = !0;
                break
            }
            if (!d && e) for (c = !0, m = 0, l = e.length; m < l; m++) if (e[m] == b) {
                d = !0;
                break
            }
            return d ? {
                rowIndxPage: c ? void 0 : m - f,
                uf: c,
                rowIndx: m,
                rowData: b
            }
             : {
            }
        }
        if (null == a || 0 == a.length) return {
        };
        b = a.attr('pq-row-indx');
        if (null == b) return {
        };
        b = parseInt(b);
        return {
            rowIndxPage: b,
            rowIndx: b + f
        }
    };
    c.search = function (e) {
        var a = this.options,
        b = e.row;
        e = e.first;
        for (var f = [
        ], d = this.rowIndxOffset, c = 'remote' == a.pageModel.type, a = a.dataModel.data, m = 0, l = a.length; m < l; m++) {
            var g = a[m],
            k = !0,
            r;
            for (r in b) b[r] !== g[r] && (k = !1);
            if (k && (g = this.normalize({
                rowIndx: c ? m + d : m
            }), f.push(g), e)) break
        }
        return f
    };
    var l = function (e) {
        this.options = e.options;
        this.that = e
    },
    f = l.prototype;
    f._incrRowIndx = function (e, a) {
        var b = this.that,
        f = e;
        a = 1;
        for (var b = b.pdata, d = 0, c = e + 1, m = b.length; c < m && (b[c].pq_hidden || (d++, f = c, d != a)); c++);
        return f
    };
    f._decrRowIndx = function (e, a) {
        var b = e,
        f = this.that.pdata;
        a = 1;
        for (var d = 0, c = e - 1; 0 <= c && (f[c].pq_hidden || (d++, b = c, d != a)); c--);
        return b
    };
    f._decrRowIndx2 = function (e, a) {
        var b = this.that,
        f = e + b.rowIndxOffset,
        d = b.iMerge,
        b = b.pdata;
        if (d.ismergedCell(f, a)) {
            var c = d.getRootCell(f, a, 'a'),
            f = d.getData(f, a, 'proxy_cell');
            a = c.colIndx;
            a = f ? f.colIndx : a
        }
        for (f = e - 1; 0 <= f; f--) if (!b[f].pq_hidden) {
            e = f;
            break
        }
        return {
            rowIndxPage: e,
            colIndx: a
        }
    };
    f._incrRowIndx2 = function (e, a) {
        var b = this.that,
        f = e + b.rowIndxOffset,
        d = b.iMerge,
        c,
        b = b.pdata;
        if (c = d.ismergedCell(f, a)) {
            var m = d.getRootCell(f, a, 'a'),
            f = d.getData(f, a, 'proxy_cell');
            a = m.colIndx;
            e = c.rowspan ? e + c.rowspan - 1 : 0;
            a = f ? f.colIndx : a
        }
        f = e + 1;
        for (d = b.length; f < d; f++) if (!b[f].pq_hidden) {
            e = f;
            break
        }
        return {
            rowIndxPage: e,
            colIndx: a
        }
    };
    c.addColumn = function (e) {
        for (var a = e.colList || [
            {
                colIndx: e.colIndx,
                column: e.column
            }
        ], b = !1 !== e.history, f = this.options.colModel, d = 0; d < a.length; d++) {
            var c = a[d].colIndx,
            m = a[d].column;
            void 0 == m.dataIndx && (m.dataIndx = Math.random());
            null == c && (c = a.colIndx = f.length);
            f.splice(c, 0, m)
        }
        this.iColModel.init();
        b && (this.iHistory.increment(), a.type = 'add', this.iHistory.push({
            colList: a
        }));
        this._trigger('addColumn', null, {
            colList: a
        });
        !1 !== e.refresh && this.refreshView()
    };
    c.deleteColumn = function (e) {
        for (var a = e.colList || [
            {
                colIndx: e.colIndx
            }
        ], b = !1 !== e.history, f = this.options.colModel, d = a.length - 1; 0 <= d; d--) {
            var c = a[d],
            m = f.splice(c.colIndx, 1) [0];
            c.column = m
        }
        this.iColModel.init();
        b && (this.iHistory.increment(), a.type = 'delete', this.iHistory.push({
            colList: a
        }));
        this._trigger('deleteColumn', null, {
            colList: a
        });
        !1 !== e.refresh && this.refreshView()
    };
    f._incrIndx = function (e, a, b) {
        var f = this.that,
        d = f.iMerge,
        c,
        m,
        l,
        g,
        k = f.pdata,
        r = f.rowIndxOffset,
        y = f[b ? 'getLastVisibleRIP' : 'getFirstVisibleRIP'](),
        s = f.colModel,
        n = s.length;
        if (null == a) {
            if (e ==
            y) return null;
            e = this[b ? '_incrRowIndx' : '_decrRowIndx'](e);
            return {
                rowIndxPage: e
            }
        }
        do {
            m = e + r;
            if (f = d.ismergedCell(m, a)) !g && (c = d.getData(m, a, 'proxy_cell')) && (l = c.rowIndx - r, k[l].pq_hidden || (e = l)),
            k[e].pq_hidden && (e = d.getRootCell(m, a).rowIndxPage),
            !g && b && (a += f && f.colspan ? f.colspan - 1 : 0);
            a = b ? a + 1 : a - 1;
            if (b && a >= n || !b && 0 > a) {
                if (e == y) return null;
                e = this[b ? '_incrRowIndx' : '_decrRowIndx'](e);
                a = b ? 0 : n - 1
            }
            g = s[a]
        } while (g && g.hidden);
        return {
            rowIndxPage: e,
            colIndx: a
        }
    };
    f._incrEditIndx = function (e, a, b) {
        var f = this.that,
        d = f.colModel,
        c = d.length,
        m = f.iMerge,
        l,
        g = f.rowIndxOffset,
        k = f[b ? 'getLastVisibleRIP' : 'getFirstVisibleRIP']();
        do {
            var r = e + g;
            if (l = m.ismergedCell(r, a)) {
                if (r = m.getData(r, a, 'proxy_edit_cell')) r = r.rowIndx,
                e = r - g;
                a = b ? a + l.colspan : a - 1
            } else a = b ? a + 1 : a - 1;
            if (b && a >= c || !b && 0 > a) {
                if (e == k) return null;
                do if (e = this[b ? '_incrRowIndx' : '_decrRowIndx'](e), a = f.isEditableRow({
                    rowIndxPage: e
                }), e == k && !1 == a) return null;
                while (!1 == a);
                a = b ? 0 : c - 1
            }
            r = e + g;
            if (l = m.ismergedCell(r, a)) e = m.getRootCell(r, a, 'o'),
            m.setData(e.rowIndx, e.colIndx, {
                proxy_edit_cell: {
                    rowIndx: r,
                    colIndx: a
                }
            }),
            r = e.rowIndx,
            a = e.colIndx;
            l = d[a];
            var n = f.isEditableCell({
                rowIndx: r,
                colIndx: a,
                checkVisible: !0
            }),
            s = l.editor,
            s = 'function' == typeof s ? s.call(f, f.normalize({
                rowIndx: r,
                colIndx: a
            }))  : s;
            e = r - g
        } while (l && (l.hidden || !1 == n || !1 === s));
        return {
            rowIndxPage: e,
            colIndx: a
        }
    };
    f.getMergeCell = function (e, a) {
        var b = this.that,
        f = b.options,
        d = b.iMerge,
        c,
        m;
        d.ismergedCell(e, a) && (m = d.getRootCell(e, a, 'o'), d.setData(m.rowIndx, m.colIndx, {
            proxy_cell: {
                rowIndx: e,
                colIndx: a
            }
        }), f.virtualY && (c = d.getRootCell(e, a, 'a')));
        c || (e = this.getVisibleRowIndx(e), a = this.getVisibleColIndx(a), c = b.normalize({
            rowIndx: e,
            colIndx: a
        }));
        return c
    };
    f.getVisibleRowIndx = function (a) {
        for (var b = this.that, f = b.pdata.length, d = a - b.rowIndxOffset, c = b.getRowData({
            rowIndx: a
        }); c.pq_hidden && d < f - 1; ) d++,
        a++,
        c = b.getRowData({
            rowIndx: a
        });
        return a
    };
    f.getVisibleColIndx = function (a) {
        for (var b = this.that.colModel, f = b.length, d = b[a]; d.hidden && a < f - 1; ) a++,
        d = b[a];
        return a
    };
    c._onKeyPressDown = function (a) {
        if (0 < k(a.target).closest('.pq-grid-header').length) return !1 == this._trigger('headerKeyDown', a, null) ?
        !1 : !0;
        if (!1 === this.iKeyNav._bodyKeyPressDown(a) || !1 == this._trigger('keyDown', a, null)) return !1
    };
    f._saveAndMove = function (a, b) {
        if (null == a) return b.preventDefault(),
        !1;
        var f = this.that,
        d = a.rowIndxPage,
        c = a.colIndx;
        f._blurEditMode = !0;
        if (!1 === f.saveEditCell({
            evt: b
        }) || !f.pdata) return f.pdata || f.quitEditMode(b),
        f._deleteBlurEditMode({
            timer: !0,
            msg: '_saveAndMove saveEditCell'
        }),
        b.preventDefault(),
        !1;
        f.quitEditMode(b);
        if (a.incr) var m = this[a.edit ? '_incrEditIndx' : '_incrIndx'](d, c, !b.shiftKey),
        d = m ? m.rowIndxPage :
        d,
        c = m ? m.colIndx : c;
        f.scrollRow({
            rowIndxPage: d
        });
        f.scrollColumn({
            colIndx: c
        });
        this.select({
            rowIndx: d + f.rowIndxOffset,
            colIndx: c,
            evt: b
        });
        a.edit && f._editCell({
            rowIndxPage: d,
            colIndx: c
        });
        f._deleteBlurEditMode({
            timer: !0,
            msg: '_saveAndMove'
        });
        b.preventDefault();
        return !1
    };
    f._keyPressInEdit = function (a, b) {
        var f = this.that,
        d = f.options.editModel.indices;
        b = b ? b : {
        };
        var c = b.FK,
        m = 'Backspace Left Right Up Down Del Home End'.split(' '),
        l = d.column.dataType;
        return a.key && - 1 !== k.inArray(a.key, m) ? !0 : !1 === f._trigger('editorKeyPress', a, k.extend({
        }, d)) || c && ('float' == l || 'integer' == l) && (f = 'float' == l ? '0123456789.-' : '0123456789-', d = (d = a.charCode) ? d : a.keyCode, (d = String.fromCharCode(d)) && - 1 == f.indexOf(d)) ? !1 : !0
    };
    f.getValText = function (a) {
        a = a[0].nodeName.toLowerCase();
        var b = 'text';
        - 1 != k.inArray(a, [
            'input',
            'textarea',
            'select'
        ]) && (b = 'val');
        return b
    };
    f._keyUpInEdit = function (a, b) {
        var f = this.that,
        d = f.options;
        b = b ? b : {
        };
        var c = b.FK,
        d = d.editModel,
        m = d.indices;
        f._trigger('editorKeyUp', a, k.extend({
        }, m));
        f = m.column.dataType;
        if (c && ('float' == f || 'integer' ==
        f)) {
            var c = k(a.target),
            m = 'integer' == f ? d.reInt : d.reFloat,
            d = this.getValText(c),
            l = c.data('oldVal'),
            g = c[d]();
            if (!1 == m.test(g)) if (m.test(l)) c[d](l);
             else if (f = 'float' == f ? parseFloat(l)  : parseInt(l), isNaN(f)) c[d](0);
             else c[d](f)
        }
    };
    f._keyDownInEdit = function (a) {
        var b = this.that,
        f = b.options,
        d = f.editModel.indices;
        if (d) {
            var c = k(a.target),
            m = k.ui.keyCode,
            l = f.editModel,
            g = k.extend({
            }, d),
            d = g.rowIndxPage,
            f = g.colIndx,
            v = g.column.editModel,
            l = v ? k.extend({
            }, l, v)  : l,
            v = this.getValText(c);
            c.data('oldVal', c[v]());
            if (!1 == b._trigger('editorKeyDown', a, g)) return !1;
            if (a.keyCode == m.TAB || a.keyCode == l.saveKey) return b = a.keyCode == m.TAB ? l.onTab : l.onSave,
            g = {
                rowIndxPage: d,
                colIndx: f,
                incr: b ? !0 : !1,
                edit: 'nextEdit' == b
            },
            this._saveAndMove(g, a);
            if (a.keyCode == m.ESCAPE) return b.quitEditMode({
                evt: a
            }),
            b.focus({
                rowIndxPage: d,
                colIndx: f
            }),
            a.preventDefault(),
            !1;
            if (a.keyCode == m.PAGE_UP || a.keyCode == m.PAGE_DOWN) return a.preventDefault(),
            !1;
            if (l.keyUpDown && !a.altKey) {
                if (a.keyCode == m.DOWN) return g = this._incrRowIndx2(d, f),
                this._saveAndMove(g, a);
                if (a.keyCode == m.UP) return g = this._decrRowIndx2(d, f),
                this._saveAndMove(g, a)
            }
        }
    };
    f.select = function (a) {
        var b = this.that,
        f = this,
        d = a.rowIndx,
        c = a.colIndx,
        m = a.evt;
        a = this.getMergeCell(d, c);
        var d = a.rowIndx,
        c = a.colIndx,
        l = a.rowIndxPage;
        a = b.options;
        var g = b.iSelection,
        v = a.selectionModel,
        u = v.type,
        r = 'row' == u,
        n = 'cell' == u;
        (a.realFocus ? function (a) {
            clearTimeout(f.timeoutID);
            f.timeoutID = setTimeout(function () {
                a()
            }, 0)
        }
         : function (a) {
            a()
        }) (function () {
            b.scrollCell({
                rowIndx: d,
                colIndx: c
            });
            var a = g.address();
            if (m.shiftKey && m.keyCode !== k.ui.keyCode.TAB && v.type && 'single' != v.mode && a.length) {
                var e = a[a.length - 1],
                f = e.firstR,
                w = e.firstC,
                u = e.type,
                E = !1;
                'column' == u ? (e.c1 = w, e.c2 = c, e.r1 = e.r2 = e.type = void 0)  : 'row' == u ? (e.r1 = f, e.r2 = d, e.c1 = e.c2 = e.type = void 0)  : (a = {
                    r1: f,
                    r2: d,
                    c1: w,
                    c2: c,
                    firstR: f,
                    firstC: w
                }, E = !0);
                b.range(a, E).select()
            } else r ? b.range({
                r1: d,
                firstR: d
            }, !1).select()  : n && b.range({
                r1: d,
                c1: c,
                firstR: d,
                firstC: c
            }).select();
            b.focus({
                rowIndxPage: l,
                colIndx: c
            })
        })
    };
    f._bodyKeyPressDown = function (a) {
        var b = this.that,
        f = b.rowIndxOffset,
        d,
        c,
        m;
        m = this.options;
        var l = b.iMerge,
        g = b._focusElement,
        v = m.selectionModel,
        u = m.editModel,
        r = a.ctrlKey || a.metaKey,
        n = k.ui.keyCode,
        s = a.keyCode;
        if (u.indices) b.$div_focus.find('.pq-cell-focus').focus();
         else {
            if (g) {
                if (m = document.activeElement, 'pq-grid-cont' != m.className && 'TD' != m.nodeName.toUpperCase() && 'pq-grid-excel' != m.id) return
            } else {
                g = k(a.target);
                if (!g.hasClass('pq-grid-cell')) return;
                g = b.getCellIndices({
                    $td: g
                })
            }
            var z = b.normalize(g);
            c = z.rowIndxPage;
            d = z.rowIndx;
            m = z.colIndx;
            var C = b.pdata,
            B = z,
            g = !0;
            if (null != d && null != m && null != z.rowData) {
                l.ismergedCell(d, m) && (z = B = l.getRootCell(d, m, 'o'), c = z.rowIndxPage, d = z.rowIndx, m = z.colIndx, s == n.PAGE_UP || s == n.PAGE_DOWN || s == n.SPACE || s == n.HOME || s == n.END) && (l = l.getData(d, m, 'proxy_cell')) && (l = l.rowIndx - f, C[l].pq_hidden || (c = l, d = c + f));
                if (!1 == b._trigger('cellKeyDown', a, B)) return !1;
                if (s == n.LEFT || s == n.RIGHT || s == n.UP || s == n.DOWN || v.onTab && s == n.TAB) b = null,
                s == n.LEFT || s == n.TAB && a.shiftKey ? b = this._incrIndx(c, m, !1)  : s == n.RIGHT || s == n.TAB && !a.shiftKey ? b = this._incrIndx(c, m, !0)  : s == n.UP ? b = this._decrRowIndx2(c, m)  : s == n.DOWN && (b = this._incrRowIndx2(c, m)),
                b && (d = b.rowIndxPage + f, this.select({
                    rowIndx: d,
                    colIndx: b.colIndx,
                    evt: a
                }));
                 else if (s == n.PAGE_DOWN || s == n.SPACE || s == n.PAGE_UP) {
                    if (b = this[s == n.PAGE_UP ? 'pageUp' : 'pageDown'](c)) c = b.rowIndxPage,
                    null != c && this.select({
                        rowIndx: c + f,
                        colIndx: m,
                        evt: a
                    })
                } else s == n.HOME ? (r ? d = b.getFirstVisibleRIP() + f : m = b.getFirstVisibleCI(), this.select({
                    rowIndx: d,
                    colIndx: m,
                    evt: a
                }))  : s == n.END ? (r ? d = b.getLastVisibleRIP() + f : m = b.getLastVisibleCI(), this.select({
                    rowIndx: d,
                    colIndx: m,
                    evt: a
                }))  : s == n.ENTER ? (c = B.rowIndxPage, m = B.colIndx, (v = b.getCell({
                    rowIndxPage: c,
                    colIndx: m
                })) && 0 < v.length && (d = c + f, f = b.isEditableRow({
                    rowIndx: d
                }), n = b.isEditableCell({
                    rowIndx: d,
                    colIndx: m
                }), f && n ? b.editCell({
                    rowIndxPage: c,
                    colIndx: m
                })  : (b = v.find('button'), b.length && k(b[0]).click())))  : r && '65' == s ? (b = b.iSelection, 'row' == v.type && 'single' != v.mode ? b.selectAll({
                    type: 'row',
                    all: v.all
                })  : 'cell' == v.type && 'single' != v.mode && b.selectAll({
                    type: 'cell',
                    all: v.all
                }))  : u.pressToEdit && (32 <= s && 127 >= s || 189 == s) && !r ? 46 == s ? b.clear()  : (c = B.rowIndxPage, m = B.colIndx, (v = b.getCell({
                    rowIndxPage: c,
                    colIndx: m
                })) && 0 < v.length && (d = c + f, f = b.isEditableRow({
                    rowIndx: d
                }), n = b.isEditableCell({
                    rowIndx: d,
                    colIndx: m
                }), f && n && b.editCell({
                    rowIndxPage: c,
                    colIndx: m,
                    select: !0
                })), g = !1)  : g = !1;
                g && a.preventDefault()
            }
        }
    };
    f.incrPageSize = function () {
        for (var a = this.that, b = a.$tbl, f = b.children('tbody').children('.pq-grid-row'), b = parseInt(b.css('marginTop')), b = a.iRefresh.getEContHt() - b, d = f.length - 1; 0 <= d; d--) {
            var c = f[d];
            if (c.offsetTop < b) break
        }
        return {
            rowIndxPage: a.getRowIndx({
                $tr: k(c)
            }).rowIndxPage
        }
    };
    f.pageNonVirtual = function (a, b) {
        var f = this.that,
        d = f.$cont[0].offsetHeight -
        f._getSBHeight(),
        c = f.getRow({
            rowIndxPage: a
        }),
        m = 0,
        l = 0,
        g = k(c[0]) [b]('tr.pq-grid-row'),
        v = g.length;
        if (0 < v) {
            do {
                c = g[l];
                m += c.offsetHeight;
                if (m >= d) break;
                l++
            } while (l < v);
            l = 0 < l ? l - 1 : l;
            do if (c = k(g[l]), a = f.getRowIndx({
                $tr: c
            }).rowIndxPage, null != a) break;
             else l--;
            while (0 <= l)
        }
        return a
    };
    f.pageDown = function (a) {
        var b = this.that,
        f = b.options,
        d = b.vscroll,
        c = d.option('cur_pos'),
        m = d.option('num_eles'),
        l = d.option('ratio');
        if (f.virtualY) {
            if (c < m - 1) {
                a = this.incrPageSize().rowIndxPage;
                var g = b._calcCurPosFromRowIndxPage(a);
                if (null ==
                g) return;
                d.option('cur_pos', g);
                d.scroll()
            }
        } else null != a ? a = this.pageNonVirtual(a, 'nextAll')  : 1 > l && (f = b.iRefresh.getEContHt(), b = b.iMouseSelection, b.updateTableY( - 1 * f), b.syncScrollBarVert());
        return {
            rowIndxPage: a,
            curPos: g
        }
    };
    f.pageUp = function (a) {
        var b = this.that,
        f = b.vscroll;
        if (b.options.virtualY) {
            if (0 < f.option('cur_pos')) {
                a = this.decrPageSize().rowIndxPage;
                var d = b._calcCurPosFromRowIndxPage(a);
                if (null == d) return;
                f.option('cur_pos', d);
                f.scroll()
            }
        } else f = f.option('ratio'),
        null != a ? a = this.pageNonVirtual(a, 'prevAll')  :
        0 < f && (f = b.iRefresh.getEContHt(), b = b.iMouseSelection, b.updateTableY(f), b.syncScrollBarVert());
        return {
            rowIndxPage: a,
            curPos: d
        }
    };
    f.decrPageSize = function () {
        var a = this.that,
        b = a.$tbl.children('tbody').children('.pq-grid-row'),
        f = a.options.freezeRows,
        d = a.pdata,
        c,
        m = 0;
        if (b.length) {
            var l;
            f ? (l = b.filter('tr.pq-last-frozen-row'), l.length && (l = l.next()))  : 2 <= b.length && (l = k(b[1]));
            if (l && l.length) for (c = m = a.getRowIndx({
                $tr: l
            }).rowIndxPage, b = 0, a = a.pageSize - 3; 0 <= m && (d[m].pq_hidden || (b++, c = m, !(b >= a))); m--);
        }
        return {
            rowIndxPage: c
        }
    };
    c._calcNumHiddenFrozens = function () {
        for (var a = 0, b = this.options.freezeCols, f = 0; f < b; f++) this.colModel[f].hidden && a++;
        return a
    };
    c._calcNumHiddenUnFrozens = function (a) {
        var b = 0;
        a = null != a ? a : this.colModel.length;
        for (var f = this.options.freezeCols; f < a; f++) this.colModel[f].hidden && b++;
        return b
    };
    c._getSBHeight = function () {
        return this.iRefresh.getSBHeight()
    };
    c._getSBWidth = function () {
        return this.iRefresh.getSBWidth()
    };
    c.getFirstVisibleRIP = function (a) {
        var b = this.pdata;
        a = a ? this.initV : 0;
        for (var f = b.length; a < f; a++) if (!b[a].pq_hidden) return a
    };
    c.getLastVisibleRIP = function () {
        for (var a = this.pdata, b = a.length - 1; 0 <= b; b--) if (!a[b].pq_hidden) return b;
        return null
    };
    c.getFirstVisibleCI = function (a) {
        var b = this.colModel,
        f = b.length;
        for (a = a ? this.initH : 0; a < f; a++) if (!b[a].hidden) return a;
        return null
    };
    c.getLastVisibleCI = function () {
        for (var a = this.colModel, b = a.length - 1; 0 <= b; b--) if (!a[b].hidden) return b;
        return null
    };
    c.getTotalVisibleColumns = function () {
        for (var a = this.colModel, b = a.length, f = 0, d = 0; d < b; d++) a[d].hidden || f++;
        return f
    };
    c._calcCurPosFromRowIndxPage = function (a) {
        var b = this.pdata,
        f = this.options.freezeRows;
        if (a < f) return 0;
        for (var d = 0, c = f, m = b.length; f < m; f++) {
            var l = b[f];
            if (c == a) break;
            c++;
            l.pq_hidden || d++
        }
        return d >= m ? null : d
    };
    c._calcCurPosFromColIndx = function (a) {
        var b = this.colModel,
        f = this.options.freezeCols;
        if (a < f) return 0;
        for (var d = 0, c = f, m = b.length; f < m; f++) {
            var l = b[f];
            if (c == a) break;
            c++;
            l.hidden || d++
        }
        return d >= m ? null : d
    };
    c.calcWidthCols = function (a, b, f) {
        var d = 0,
        c = this.options.numberCell,
        m = this.colModel;
        - 1 == a && (c.show && (d = f ? d + 1 * c.width : d + c.outerWidth), a = 0);
        if (f) for (; a < b; a++) {
            if ((f = m[a]) && !f.hidden) {
                if (!f._width) throw 'assert failed';
                d += f._width + 0
            }
        } else for (; a < b; a++) (f = m[a]) && !f.hidden && (d += f.outerWidth);
        return d
    };
    c.calcHeightFrozenRows = function () {
        var a = this.$tbl,
        b = 0;
        a && a.length && (a = k(a[0]).find('tr.pq-last-frozen-row')) && a.length && (b = a[0], b = b.offsetTop + b.offsetHeight);
        return b
    };
    c._calcRightEdgeCol = function (a) {
        var b = 0,
        f = 0,
        d = this.colModel,
        c = this.initH,
        m = this.options,
        l = m.freezeCols,
        m = m.numberCell;
        m.show && (b += m.outerWidth, f++);
        for (m = 0; m <= a; m++) {
            m < c && m >= l && (m = c);
            var g = d[m];
            g.hidden || (b += g.outerWidth, f++)
        }
        return {
            width: b,
            cols: f
        }
    };
    c._createHeader = function () {
        this.iHeader.createHeader();
        this.options.showHeader && this._trigger('createHeader')
    };
    c.createTable = function (a) {
        a.other = !0;
        var b = this.iGenerateView;
        b.generateView(a);
        b.scrollView()
    }
}) (jQuery);
(function (k) {
    function n(a) {
        this.that = a
    }
    function g(a, b, d) {
        for (var e = 0; b < d; b++) !0 !== a[b].hidden && e++;
        return e
    }
    function c(a) {
        if (a.length) var b = a.css({
            tableLayout: 'auto',
            width: ''
        }).addClass('pq-no-wrap').removeClass('pq-wrap').children('tbody').children('.pq-row-hidden').children('td').css('width', '');
        return b || k()
    }
    function a(a, b, d) {
        for (var e, h; d; ) {
            e = a[d][b];
            h = a[d - 1][b];
            if (e != h) break;
            d--
        }
        return d
    }
    var d = k.paramquery,
    b = d._pqGrid.prototype;
    b.getHeadCell = function (a) {
        var b = a.attr('pq-col-indx');
        a = a.attr('pq-row-indx');
        var d,
        e,
        h,
        c;
        null != b && null != a && (b *= 1, a *= 1, e = this.headerCells[a][b]) && (c = e.colModel, h = e.leftPos);
        c && c.length && (d = !0);
        return {
            col: e,
            ci: b,
            o_ci: h,
            ri: a,
            isParent: d
        }
    };
    b.flex = function (a) {
        this.iResizeColumns.flex(a)
    };
    d.cHeader = n;
    b = n.prototype;
    b.createHeader = function () {
        var a = this.that,
        b = this,
        d = a.options,
        e = d.bootstrap,
        h = (e.on ? e.thead : '') + ' pq-grid-header-table ',
        c = d.ui,
        g = e.on ? '' : c.header,
        t = d.hwrap,
        e = a.pqpanes,
        p = parseInt(d.freezeCols),
        q = d.numberCell,
        c = a.colModel,
        x = d.sortModel,
        v = a.depth,
        u = d.virtualX,
        n = a.iGenerateView.colDef,
        y = a.initH,
        s = a.finalH,
        z = a.headerCells,
        C = a.$header_o;
        C.empty();
        if (null != s) if (!1 === d.showHeader) C.css('display', 'none');
         else {
            C.css('display', '');
            d = [
                '<table class=\'' + (t ? h + 'pq-wrap ' : h + 'pq-no-wrap ') + '\' >'
            ];
            if (1 <= v) {
                d.push('<tr class=\'pq-row-hidden\'>');
                q.show && d.push('<td style=\'width:' + q.width + 'px;\' ></td>');
                for (var t = 0, B = n.length; t < B; t++) {
                    var D = n[t],
                    h = D.colIndx;
                    d.push('<td style=\'width:' + D.column.outerWidth + 'px;\' pq-col-indx=' + h + '></td>')
                }
                d.push('</tr>')
            }
            for (n = 0; n < v; n++) {
                d.push('<tr class=\'pq-grid-title-row\'>');
                0 == n && q.show && d.push(['<th pq-col-indx=\'-1\' class=\'pq-grid-number-col\' rowspan=\'',
                v,
                '\'><div class=\'pq-td-div\'>',
                q.title ? q.title : '&nbsp;',
                '</div></th>'].join(''));
                for (h = 0; h <= s; h++) {
                    if (h < y && h >= p && u && (h = y, h > s)) throw 'initH>finalH';
                    b.createHeaderCell(n, h, z, d, 'pq-grid-col ', p, y, v, x)
                }
                d.push('</tr>')
            }
            a.ovCreateHeader(d, 'pq-grid-col ');
            d.push('</table>');
            p = d.join('');
            C[0].innerHTML = e.vH ? [
                '<span class=\'pq-grid-header pq-grid-header-left ',
                g,
                '\'><div class=\'pq-grid-header-inner\'>',
                p,
                '</div></span><span class=\'pq-grid-header ',
                g,
                '\'><div class=\'pq-grid-header-inner\'>',
                p,
                '</div></span>'
            ].join('')  : [
                '<span class=\'pq-grid-header ',
                g,
                '\'><div class=\'pq-grid-header-inner\'>',
                p,
                '</div></span>'
            ].join('');
            g = a.$header = C.children('.pq-grid-header');
            C = g.children('.pq-grid-header-inner');
            a.$tbl_header = C.children('table');
            a.$header_left = k(g[0]);
            a.$header_left_inner = k(C[0]);
            e.vH && (a.$header_right = k(g[1]), a.$header_right_inner = k(C[1]));
            g.click(function (a) {
                return b._onHeaderClick(a)
            });
            b._refreshResizeColumn(y, s, c);
            a._trigger('refreshHeader', null, null)
        }
    };
    b._onHeaderClick = function (a) {
        var b = this.that,
        d;
        d = b.iDragColumns;
        if (!d || 'stop' == d.status) {
            d = k(a.target);
            if (d.is('input,label')) return !0;
            d = d.closest('.pq-grid-col');
            if (d.length && (d = b.getHeadCell(d), (b = d.col) && !d.isParent)) return this._onHeaderCellClick(b, d.ci, a)
        }
    };
    b.createHeaderCell = function (a, b, c, e, h, w, A, k, p) {
        var q = this.that,
        x = q.options.sheet,
        v = c[a][b],
        u = q.colModel,
        n = v.colSpan;
        if (!(v.hidden || 0 === n || 0 < a && v == c[a - 1][b])) {
            if (0 < b && v == c[a][b - 1]) {
                if (b > A) return;
                a: {
                    c = c[a];
                    for (var y = 0; y < c.length; y++) if (c[y] ==
                    v) {
                        c = y;
                        break a
                    }
                    c = void 0
                }
                if (c < w) return;
                n -= g(u, c, b)
            } else w && b < w && b + n > w && (n -= g(u, w, A), u = g(u, b, w), n = Math.max(n, u));
            u = v.halign || v.align;
            c = v.cls;
            h = [
                h
            ];
            var y = v.title,
            s = v.type,
            y = 'function' == typeof y ? y.call(q, {
                column: v,
                colIndx: b,
                dataIndx: v.dataIndx
            })  : y,
            y = x ? d.toLetter(b)  : y,
            y = null != y ? y : 'checkbox' == s && v.cb.header ? '<input type=\'checkbox\'/>' : v.dataIndx;
            v.pqtitle = y;
            u && h.push('pq-align-' + u);
            b == w - 1 && 1 == k && h.push('pq-last-frozen-col');
            b <= w - 1 ? h.push('pq-left-col')  : b >= A && h.push('pq-right-col');
            c && h.push(c);
            null != v.colModel && 0 != v.colModel.length || h.push('pq-grid-col-leaf');
            w = p.space ? 'pq-space' : '';
            e.push(['<th  ',
            'pq-col-indx=' + b,
            ' ',
            'pq-row-indx=' + a,
            '  class=\'',
            h.join(' '),
            '\' rowspan=',
            v.rowSpan,
            ' colspan=',
            n,
            '><div class=\'pq-td-div\'>',
            y,
            '<span class=\'pq-col-sort-icon ',
            w,
            '\'></span>',
            p.number ? '<span class=\'pq-col-sort-count ' + w + '\'></span>' : '',
            '</div></th>'].join(''))
        }
    };
    b._onHeaderCellClick = function (a, b, d) {
        var e = this.that,
        h = e.options,
        c = h.sortModel,
        g = a.dataIndx;
        !1 !== e._trigger('headerCellClick', d, {
            column: a,
            colIndx: b,
            dataIndx: g
        }) && (h.selectionModel.column && - 1 == d.target.className.indexOf('pq-td-div') ? (h = {
            c1: b,
            firstC: b
        }, a = e.iSelection.address(), d.shiftKey && ((d = a.length) && 'column' == a[d - 1].type && (d = a[d - 1], d.c1 = d.firstC, d.c2 = b, d.r1 = d.r2 = d.type = void 0), h = a), e.range(h, !1).select(), e.focus({
            rowIndxPage: e.getFirstVisibleRIP(!0),
            colIndx: b
        }))  : c.on && !1 != a.sortable && (c.multiKey && (c.single = !d[c.multiKey]), e.sort({
            sorter: [
                {
                    dataIndx: g
                }
            ],
            addon: !0,
            evt: d
        })))
    };
    b._refreshResizeColumn = function (a, b, d) {
        a = this.that;
        d = a.options;
        b = d.filterModel.ficon ?
        !0 : !1;
        var e = d.numberCell;
        d = parseInt(d.freezeCols);
        var h = [
        ],
        c = [
        ],
        g = a.pqpanes.vH,
        k = 0,
        p = 0;
        e.show && (k = e.outerWidth, e.resizable && h.push('<div pq-col-indx=\'-1\' style=\'left:', k - 5, 'px;\'', ' class=\'pq-grid-col-resize-handle\'>&nbsp;</div>'));
        for (var e = a.iGenerateView.colDef, q = 0, x = e.length; q < x; q++) {
            var p = e[q],
            v = p.colIndx,
            p = p.column,
            n = p.ficon,
            r = n || null == n && b,
            n = h,
            k = k + p.outerWidth;
            if (!1 !== p.resizable || r) g && v >= d && (n = c),
            p = k - 5,
            n.push('<div pq-col-indx=\'', v, '\' style=\'left:', p, 'px;\'', ' class=\'pq-grid-col-resize-handle\'>&nbsp;</div>')
        }
        c.length && a.$header_right_inner.append(c.join(''));
        a.$header_left_inner.append(h.join(''))
    };
    b.refreshHeaderSortIcons = function () {
        var a = this.that,
        b = a.options,
        d = b.bootstrap,
        b = b.ui,
        e = a.$header;
        if (e) {
            var h = a.iSort.getSorter(),
            c = h.length,
            g = !1;
            a.options.sortModel.number && 1 < c && (g = !0);
            for (var k = 0; k < c; k++) {
                var p = h[k],
                q = a.getColIndx({
                    dataIndx: p.dataIndx
                }),
                x = p.dir,
                p = d.on ? d.header_active : b.header_active + ' pq-col-sort-' + ('up' == x ? 'asc' : 'desc'),
                x = d.on ? ' glyphicon glyphicon-arrow-' + x : 'ui-icon ui-icon-triangle-1-' + ('up' == x ?
                'n' : 's'),
                q = e.find('.pq-grid-col-leaf[pq-col-indx=' + q + ']');
                q.addClass(p);
                q.find('.pq-col-sort-icon').addClass(x);
                g && q.find('.pq-col-sort-count').html(k + 1)
            }
        }
    };
    b = function (a) {
        this.that = a;
        var b = this;
        a.$header_o.on({
            mousedown: function (a) {
                if (!a.pq_composed) {
                    var f = k(a.target);
                    b.setDraggables(a);
                    a.pq_composed = !0;
                    a = k.Event('mousedown', a);
                    f.trigger(a)
                }
            },
            dblclick: function (a) {
                b.doubleClick(a)
            }
        }, '.pq-grid-col-resize-handle');
        var d = a.options.flex;
        if (d.on && d.one) a.one('ready', function () {
            b.flex()
        })
    };
    d.cResizeColumns = b;
    b = b.prototype = new d.cClass;
    b.doubleClick = function (a) {
        var b = this.that.options,
        d = b.flex;
        a = k(a.target);
        a = parseInt(a.attr('pq-col-indx'));
        isNaN(a) || d.on && this.flex(d.all && !b.scrollModel.autoFit ? {
        }
         : {
            colIndx: [
                a
            ]
        })
    };
    b.flex = function (a) {
        a = a || {
        };
        var b = this.that,
        d = b.element,
        e = b.options.numberCell,
        h = a.colIndx,
        g,
        A = a.dataIndx;
        a = null == a.refresh ? !0 : a.refresh;
        var t = !1,
        p = b.$tbl,
        q = b.$tbl_header,
        x = p && p.length ? k(p[0]).clone()  : k(),
        v = b.tables && b.tables.length ? b.tables[0].$tbl : null,
        v = v ? k(v[0]).clone()  : k(),
        n = q && q.length ?
        k(q[0]).clone()  : k();
        x.find('.pq-merge-cell').each(function (a, b) {
            b.innerHTML = k(b).find('.pq-merge-inner') [0].innerHTML;
            b.style.whiteSpace = 'noWrap'
        });
        if (null != A) for (h = [
        ], q = 0, p = A.length; q < p; q++) {
            var r = b.colIndxs[A[q]];
            null != r && h.push(r)
        }
        null != h && (h.sort(function (a, b) {
            return a - b
        }), g = h.length);
        n.find('tr.pq-grid-header-search-row').remove();
        var A = c(x),
        r = c(v),
        y = c(n),
        x = k('<div class=\'pq-grid\' style=\'width:1px;height:1px;position:absolute;left:0px;top:0px;\'>').append(n).append(v).append(x);
        x.addClass(d.attr('class'));
        d.parent().append(x);
        d = e.show ? 0 : - 1;
        e = b.iGenerateView.colDef;
        q = 0;
        for (p = e.length; q < p; q++) {
            v = e[q];
            n = v.colIndx;
            v = v.column;
            d++;
            if (h) if (h.length) if (h[0] === n) h.splice(0, 1);
             else continue;
             else break;
            var n = A[d],
            s = y[d],
            z = r[d],
            n = Math.max(n ? n.offsetWidth : 0, z ? z.offsetWidth : 0, s ? s.offsetWidth : 0) - 0 + 1;
            v._width !== n && (t = !0, v.width = n, 1 === g && (v._resized = !0))
        }
        x.remove();
        t && a && b.refresh({
            source: 'flex'
        })
    };
    b.setDraggables = function (a) {
        var b = this,
        d,
        e,
        h;
        k(a.target).draggable({
            axis: 'x',
            helper: function (a, e) {
                var f = k(a.target),
                d = parseInt(f.attr('pq-col-indx'));
                b._setDragLimits(d);
                b._getDragHelper(a, e);
                return f
            },
            start: function (a, e) {
                d = e.position.left;
                h = parseInt(b.$cl[0].style.left)
            },
            drag: function (a, f) {
                e = f.position.left;
                b.$cl[0].style.left = h + (e - d) + 'px'
            },
            stop: function (a, e) {
                return b.resizeStop(a, e, d)
            }
        })
    };
    b._getDragHelper = function (a) {
        var b = this.that,
        d = parseInt(b.options.freezeCols);
        a = k(a.target);
        var e = b.$grid_center;
        a = parseInt(a.attr('pq-col-indx'));
        var h = e.outerHeight();
        this.$cl = k('<div class=\'pq-grid-drag-bar\'></div>').appendTo(e);
        this.$clleft = k('<div class=\'pq-grid-drag-bar\'></div>').appendTo(e);
        this.$cl.height(h);
        this.$clleft.height(h);
        e = k('[pq-col-indx=' + a + ']', b.$header) [0];
        h = e.offsetLeft;
        b.pqpanes.vH ? a >= d && (h -= b.$header[1].scrollLeft)  : (h += b.$header[0].offsetLeft, h -= b.$header[0].scrollLeft);
        this.$clleft.css({
            left: h
        });
        h += e.offsetWidth;
        this.$cl.css({
            left: h
        })
    };
    b._setDragLimits = function (a) {
        if (!(0 > a)) {
            var b = this.that,
            d = b.colModel[a],
            e = b.$header_left;
            a >= b.options.freezeCols && b.pqpanes.vH && (e = b.$header_right);
            b = e.find('th[pq-col-indx=\'' +
            a + '\']').offset().left + d._minWidth;
            d = b + d._maxWidth - d._minWidth;
            e.find('div.pq-grid-col-resize-handle[pq-col-indx=' + a + ']').draggable('option', 'containment', [
                b,
                0,
                d,
                0
            ])
        }
    };
    b.resizeStop = function (a, b, d) {
        var e = this.that,
        h = e.colModel,
        c = e.options.numberCell;
        this.$clleft.remove();
        this.$cl.remove();
        d = b.position.left - d;
        b = k(b.helper);
        b = parseInt(b.attr('pq-col-indx'));
        if ( - 1 == b) {
            var h = null,
            g = parseInt(c.width);
            c.width = g + d
        } else h = h[b],
        g = parseInt(h.width),
        h.width = g + d,
        h._resized = !0;
        e.refresh();
        e._trigger('columnResize', a, {
            colIndx: b,
            column: h,
            dataIndx: h ? h.dataIndx : null,
            oldWidth: g,
            newWidth: h ? h.width : c.width
        })
    };
    b = function (a) {
        this.that = a;
        this.$drag_helper = null;
        var b = a.options.dragColumns,
        d = b.topIcon,
        e = b.bottomIcon;
        this.status = 'stop';
        this.$arrowTop = k('<div class=\'pq-arrow-down ui-icon ' + d + '\'></div>').appendTo(a.element);
        this.$arrowBottom = k('<div class=\'pq-arrow-up ui-icon ' + e + '\' ></div>').appendTo(a.element);
        this.hideArrows();
        if (b && b.enabled) a.$header_o.on('mousedown', '.pq-grid-col', this.onColMouseDown(this, a))
    };
    d.cDragColumns = b;
    b = b.prototype;
    b.onColMouseDown = function (a, b) {
        return function (d) {
            var e,
            h,
            c;
            e = k(this);
            d.pq_composed || k(d.target).is('input,select,textarea') || (e = b.getHeadCell(e), c = (h = e.col) ? h.parent : null, !h || h.nodrag || h._nodrag || c && 1 == c.colSpan || !a.setDraggable(d, h, e) || (d.pq_composed = !0, e = k.Event('mousedown', d), k(d.target).trigger(e)))
        }
    };
    b.showFeedback = function (a, b) {
        var d = this.that,
        e = a[0],
        h = d.$grid_center[0].offsetTop,
        c = e.offsetLeft - e.offsetParent.offsetParent.offsetParent.scrollLeft + (b ? 0 : e.offsetWidth) - 8,
        d = h + d.$header[0].offsetHeight;
        this.$arrowTop.css({
            left: c,
            top: h + e.offsetTop - 16,
            display: ''
        });
        this.$arrowBottom.css({
            left: c,
            top: d,
            display: ''
        })
    };
    b.showArrows = function () {
        this.$arrowTop.show();
        this.$arrowBottom.show()
    };
    b.hideArrows = function () {
        this.$arrowTop.hide();
        this.$arrowBottom.hide()
    };
    b.updateDragHelper = function (a) {
        var b = this.that.options.dragColumns,
        d = b.acceptIcon,
        b = b.rejectIcon,
        e = this.$drag_helper;
        e && (a ? (e.children('span.pq-drag-icon').addClass(d).removeClass(b), e.removeClass('ui-state-error'))  : (e.children('span.pq-drag-icon').removeClass(d).addClass(b), e.addClass('ui-state-error')))
    };
    b.setDraggable = function (a, b, d) {
        a = k(a.currentTarget);
        var e = this,
        h = e.that;
        if (!a.hasClass('ui-draggable')) return a.draggable({
            distance: 10,
            cursorAt: {
                top: - 18,
                left: - 10
            },
            zIndex: '1000',
            appendTo: h.element,
            revert: 'invalid',
            helper: e.dragHelper(e, h, b),
            start: e.onStart(e, h, b, d),
            drag: e.onDrag(e, h),
            stop: function () {
                e.status = 'stop';
                h.$header.find('.pq-grid-col-resize-handle').show();
                e.hideArrows()
            }
        }),
        !0
    };
    b.onStart = function (a, b, d, e) {
        return function (h) {
            if (!1 === b._trigger('columnDrag', h.originalEvent, {
                column: d
            })) return !1;
            a.setDroppables(e)
        }
    };
    b.onDrag = function (a, b) {
        return function (d, e) {
            a.status = 'drag';
            var h = k('.pq-drop-hover', b.$header);
            if (0 < h.length) {
                a.showArrows();
                a.updateDragHelper(!0);
                var c = h.width();
                d.clientX - h.offset().left + k(document).scrollLeft() < c / 2 ? (a.leftDrop = !0, a.showFeedback(h, !0))  : (a.leftDrop = !1, a.showFeedback(h, !1))
            } else a.hideArrows(),
            k('.pq-drop-hover', b.$top).length ? a.updateDragHelper(!0)  : a.updateDragHelper()
        }
    };
    b.dragHelper = function (a, b, d) {
        var e = b.options.dragColumns.rejectIcon;
        return function () {
            a.status = 'helper';
            b.$header.find('.pq-grid-col-resize-handle').hide();
            var h = k('<div class=\'pq-col-drag-helper ui-widget-content ui-corner-all panel panel-default\' ><span class=\'pq-drag-icon ui-icon ' + e + ' glyphicon glyphicon-remove\'></span>' + d.pqtitle + '</div>');
            a.$drag_helper = h;
            return h[0]
        }
    };
    b._columnIndexOf = function (a, b) {
        for (var d = 0, e = a.length; d < e; d++) if (a[d] == b) return d;
        return - 1
    };
    b.setDroppables = function (a) {
        var b = this.that,
        d = a.col,
        e = a.ri;
        a = a.o_ci;
        var h = a + d.o_colspan,
        c,
        g,
        t,
        p,
        q;
        g = b.$header_left;
        var x,
        n = {
            hoverClass: 'pq-drop-hover ui-state-highlight',
            accept: '.pq-grid-col',
            tolerance: 'pointer',
            drop: this.onDrop()
        },
        u = g.find('.pq-left-col');
        g = b.pqpanes.v || b.pqpanes.vH ? b.$header_right.find('.pq-right-col')  : g.find('.pq-right-col');
        u = u.add(g);
        for (x = u.length; x--; ) p = k(u[x]),
        q = p.hasClass('ui-droppable'),
        c = b.getHeadCell(p),
        t = c.col,
        g = c.ri,
        c = c.ci,
        t == d || t.nodrop || t._nodrop || e < g && c >= a && c < h ? q && p.droppable('destroy')  : q || p.droppable(n)
    };
    b.onDrop = function () {
        var a = this,
        b = this.that;
        return function (d, e) {
            if (!a.dropPending) {
                var h = 1 * e.draggable.attr('pq-col-indx'),
                c = 1 * e.draggable.attr('pq-row-indx'),
                g = k(this),
                t = 1 * g.attr('pq-col-indx'),
                g = 1 * g.attr('pq-row-indx'),
                p = a.moveColumn(h, t, a.leftDrop, c, g);
                a.dropPending = !0;
                window.setTimeout(function () {
                    b.iColModel.init();
                    !1 !== b._trigger('columnOrder', null, {
                        dataIndx: p.dataIndx,
                        column: p,
                        oldcolIndx: h,
                        colIndx: b.getColIndx({
                            column: p
                        })
                    }) && b.refresh();
                    a.dropPending = !1
                }, 0)
            }
        }
    };
    b.moveColumn = function (b, d, c, e, h) {
        var g = this.that,
        k = g.options.colModel,
        t = g.headerCells,
        g = g.depth -
        1;
        e = null == e ? a(t, b, g)  : e;
        h = null == h ? a(t, d, g)  : h;
        var g = t[h][d],
        p = e ? t[e - 1][b].colModel : k;
        d = h ? t[h - 1][d].colModel : k;
        b = this._columnIndexOf(p, t[e][b]);
        c = c ? 1 : 0;
        b = p.splice(b, 1) [0];
        c = this._columnIndexOf(d, g) + 1 - c;
        d.splice(c, 0, b);
        return b
    }
}) (jQuery);
(function (k) {
    function n(c, a) {
        this.that = c;
        var d = this,
        b = c.options;
        this.type = 'detail';
        this.refreshComplete = !0;
        this.detachView = !1;
        c.on('cellClick', function (a, b) {
            return d.toggle(a, b)
        }).on('cellKeyDown', function (a, b) {
            if (a.keyCode == k.ui.keyCode.ENTER) return d.toggle(a, b)
        }).on('refresh', function (a, b) {
            return d.aftertable()
        }).on('beforeTableView', function (a, b) {
            return d.beforeTableView(a, b)
        }).on('tableWidthChange', function (a, b) {
            return d.tableWidthChange(a, b)
        });
        a._render = function (a) {
            var d = b.detailModel,
            c = a.cellData;
            a = a.rowData;
            if (!a.pq_gsummary && !a.pq_gtitle) return d = c && c.show ? d.expandIcon : d.collapseIcon,
            '<div class=\'ui-icon ' + d + '\'></div>'
        }
    }
    k.paramquery.cHierarchy = n;
    var g = n.prototype = new k.paramquery.cClass;
    g.tableWidthChange = function () {
        if (this.refreshComplete) {
            this.refreshComplete = !1;
            for (var c = this.that.$tbl.children('tbody').children('tr.pq-detail-child').children('td.pq-detail-child'), a = 0, d = c.length; a < d; a++) for (var b = k(c[a]).find('.pq-grid'), f = 0, m = b.length; f < m; f++) {
                var l = k(b[f]);
                l.is(':visible') && l.pqGrid('onWindowResize')
            }
            this.refreshComplete = !0
        }
    };
    g.aftertable = function (c) {
        var a = this.that,
        d = a.options.detailModel.init,
        b = a.pdata;
        if (this.refreshComplete) {
            this.refreshComplete = !1;
            c = c ? c : a.$tbl.children('tbody').children('tr.pq-detail-child');
            for (var f = 0, m = c.length; f < m; f++) {
                var l = k(c[f]),
                e = l.attr('pq-row-indx'),
                h = b[e],
                e = !1,
                g = h.pq_detail.child;
                g || 'function' != typeof d || (e = !0, g = d.call(a.element[0], {
                    rowData: h
                }), h.pq_detail.child = g, h.pq_detail.height = 25);
                l = l.children('td.pq-detail-child');
                l.append(g);
                l = l.find('.pq-grid');
                g = 0;
                for (h = l.length; g < h; g++) {
                    var A = k(l[g]);
                    e ? A.hasClass('pq-pending-refresh') && A.is(':visible') && (A.removeClass('pq-pending-refresh'), A.pqGrid('refresh'))  : A.is(':visible') && A.pqGrid('onWindowResize')
                }
            }
            this.refreshComplete = !0;
            this.detachView = !1
        }
    };
    g.beforeTableView = function (c, a) {
        this.detachView || (this.detachInitView(), this.detachView = !0)
    };
    g.detachInitView = function (c) {
        var a = this.that.$tbl;
        if (a && a.length) for (c = c ? c : a.children('tbody').children('tr.pq-detail-child'), a = 0; a < c.length; a++) k(c[a]).children('td.pq-detail-child').children().detach()
    };
    g.toggle = function (c, a) {
        var d = this.that,
        b = a.column,
        f = a.rowData,
        m = a.rowIndx,
        l = this.type;
        f.pq_gtitle || f.pq_gsummary || !b || b.type !== l || (b = {
            rowIndx: m,
            focus: !0
        }, null == f.pq_detail ? d.rowExpand(b)  : !1 === f.pq_detail.show ? d.rowExpand(b)  : this.rowCollapse(b))
    };
    g.rowExpand = function (c) {
        this.normalize(c);
        var a = this.that,
        d = c.rowData,
        b = c.rowIndx,
        f = c.rowIndxPage,
        m = a.options.detailModel;
        if (null != d) {
            if (!1 === a._trigger('beforeRowExpand', null, c)) return !1;
            null == d.pq_detail ? d.pq_detail = {
                show: !0
            }
             : !1 === d.pq_detail.show && (d.pq_detail.show = !0);
            m.cache || this.rowInvalidate(c);
            a.refreshRow({
                rowIndx: b
            });
            m = [
            ];
            a.iGenerateView._generateDetailRow(d, f, m);
            d = a.getRow({
                rowIndxPage: f
            });
            d.after(m.join(''));
            this.aftertable(d.next());
            c.focus && a.getCell({
                rowIndx: b,
                dataIndx: 'pq_detail'
            }).attr('tabindex', '0').focus();
            c.scrollRow && this.scrollRow({
                rowIndx: b
            })
        }
    };
    g.rowInvalidate = function (c) {
        c = this.that.getRowData(c);
        var a = c.pq_detail;
        if (a = a ? a.child : null) a.remove(),
        c.pq_detail.child = null,
        c.pq_detail.height = 0
    };
    g.normalize = function (c) {
        var a = this.that,
        d = c.rowIndx,
        b = c.rowIndxPage,
        f = a.rowIndxOffset;
        c.rowIndx = null == d ? b + f : d;
        c.rowIndxPage = null == b ? d - f : b;
        c.rowData = a.getRowData(c)
    };
    g.rowCollapse = function (c) {
        this.normalize(c);
        var a = this.that,
        d = a.options,
        b = c.rowData,
        f = c.rowIndx,
        m = c.rowIndxPage,
        l = d.detailModel;
        null != b && null != b.pq_detail && !0 === b.pq_detail.show && (l.cache || this.rowInvalidate(c), b.pq_detail.show = !1, d.virtualY ? a.refresh()  : (d = a.getRow({
            rowIndxPage: m
        }).next('tr.pq-detail-child'), d.length && (this.detachInitView(d), d.remove(), a.refreshRow({
            rowIndx: f
        })), c.focus && a.getCell({
            rowIndx: f,
            dataIndx: 'pq_detail'
        }).attr('tabindex', '0').focus()), c.scrollRow && (f = c.rowIndx, this.scrollRow({
            rowIndx: f
        })))
    }
}) (jQuery);
(function (k) {
    var n = function (g) {
        var c = this;
        c.that = g;
        g.on('dataReadyDone', function () {
            c.calcVisibleV()
        }).on('CMInit', function () {
            c.calcVisibleH()
        }).on('refresh', function () {
            c.summaryTable()
        })
    };
    k.paramquery.cRefresh = n;
    n = n.prototype;
    n._computeOuterWidths = function () {
        for (var g = this.that, c = g.options.numberCell, g = g.colModel, a = g.length, d = 0; d < a; d++) {
            var b = g[d];
            b.outerWidth = b._width + 0
        }
        c.show && (c.outerWidth = c.width)
    };
    n.autoFit = function () {
        var g = this.that,
        c = g.colModel,
        a = c.length,
        g = g.calcWidthCols( - 1, a, !0),
        d = this.contWd -
        this.getSBWidth();
        if (g !== d) {
            for (var g = g - d, b, d = [
            ], f = 0; f < a; f++) {
                var m = c[f],
                l = m._percent,
                e = m._resized;
                m.hidden || l || e || (0 > g ? (l = m._maxWidth - m._width) && d.push({
                    availWd: - 1 * l,
                    colIndx: f
                })  : (l = m._width - m._minWidth) && d.push({
                    availWd: l,
                    colIndx: f
                }));
                e && (b = m, delete m._resized)
            }
            d.sort(function (a, b) {
                return a.availWd > b.availWd ? 1 : a.availWd < b.availWd ? - 1 : 0
            });
            f = 0;
            for (a = d.length; f < a; f++) {
                var m = d[f],
                l = m.availWd,
                m = m.colIndx,
                e = Math.round(g / (a - f)),
                m = c[m],
                h;
                h = m._width;
                Math.abs(l) > Math.abs(e) ? (h -= e, g -= e)  : (h -= l, g -= l);
                m.width = m._width = h
            }
            0 != g && b && (h = b._width - g, h > b._maxWidth ? h = b._maxWidth : h < b._minWidth && (h = b._minWidth), b.width = b._width = h)
        }
    };
    n.autoLastColumn = function () {
        var g = this.that,
        c = g.colModel,
        a = c.length,
        d = g.options.freezeCols,
        b = this.contWd - this.getSBWidth(),
        f = g.calcWidthCols( - 1, d, !0),
        b = b - f,
        f = !1,
        g = g.getLastVisibleCI();
        if (null != g && (g = c[g], !g._percent)) {
            for (var m = g._width, l, e = g._minWidth, h = g._maxWidth, a = a - 1; a >= d; a--) {
                var w = c[a];
                if (!w.hidden && (w = w._width + 0, b -= w, 0 > b)) {
                    f = !0;
                    l = m + b >= e ? m + b : m + w + b;
                    break
                }
            }
            f || (l = m + b);
            l > h ? l = h : l < e && (l = e);
            g.width = g._width = l
        }
    };
    n.numericVal = function (g, c) {
        var a;
        a = - 1 < (g + '').indexOf('%') ? parseInt(g) * c / 100 : parseInt(g);
        return Math.round(a)
    };
    n.refreshColumnWidths = function (g) {
        g = g || {
        };
        var c = this.that,
        a = c.options,
        d = a.numberCell,
        b = 'flex' === a.width,
        f = c.colModel,
        m = a.scrollModel,
        l = m.lastColumn,
        m = m.autoFit,
        e = this.contWd,
        h = f.length,
        w = this.getSBWidth(),
        k = a._minColWidth,
        t = a._maxColWidth,
        p = 0;
        d.show && (d.width < d.minWidth && (d.width = d.minWidth), p = d.outerWidth = d.width);
        d = b ? null : e - w - p;
        k = Math.floor(this.numericVal(k, d));
        t = Math.ceil(this.numericVal(t, d));
        e = 0;
        if (!b && 5 > d || isNaN(d)) {
            if (a.debug) throw 'availWidth N/A';
        } else {
            delete c.percentColumn;
            for (w = 0; w < h; w++) if (p = f[w], !p.hidden) {
                var q = p.width,
                x = - 1 < (q + '').indexOf('%') ? !0 : null,
                n = p.minWidth,
                u = p.maxWidth,
                n = n ? this.numericVal(n, d)  : k,
                u = u ? this.numericVal(u, d)  : t;
                u < n && (u = n);
                if (void 0 != q) {
                    var r = 0;
                    !b && x ? (c.percentColumn = !0, p.resizable = !1, p._percent = !0, q = this.numericVal(q, d) - 0, r = Math.floor(q), e += q - r, 1 <= e && (r += 1, e -= 1))  : q && (r = parseInt(q));
                    r < n ? r = n : !b && r > u && (r = u);
                    p._width = r
                } else p._width = n;
                x || (p.width = p._width);
                p._minWidth = n;
                p._maxWidth = b ? 1000 : u
            }
            !1 === b && !1 !== g.refreshWidth && (m && this.autoFit(), 'auto' === l && a.virtualX && this.autoLastColumn());
            this._computeOuterWidths()
        }
    };
    n.estRowsInViewPort = function () {
        var g = Math.ceil(this.contHt / this.rowHt);
        return this.that.pageSize = g
    };
    n._refreshFrozenLine = function () {
        var g = this.that,
        c = g.options,
        a = c.numberCell,
        d = g.$cont_o,
        b = c.freezeBorders,
        f = c.freezeCols,
        c = c.freezeRows;
        this.$freezeLine && this.$freezeLine.remove();
        this.$freezeLineH && this.$freezeLineH.remove();
        b && (f && (b = g.calcWidthCols( - 1, f), isNaN(b) || 0 === b || 0 < b && a.show && b === a.width || (this.$freezeLine = k(['<div class=\'pqg-vert-frozen-line\'  style = \'left:',
        b - 1,
        'px;\' ></div>'].join('')).appendTo(d))), c && (g = g.$tbl)) && (g = g.children('tbody').children('.pq-last-frozen-row') [0]) && (this.$freezeLineH = k('<div class=\'pqg-horiz-frozen-line\' style=\'top:' + (g.offsetTop + g.offsetHeight - 1 - 1) + 'px;\' ></div>').appendTo(d))
    };
    n.setScrollVNumEles = function (g) {
        var c = this.that;
        g = c.vscroll;
        var a = c.options;
        if (!a.maxHeight && 'flex' ===
        a.height) return g.option('num_eles', 0),
        0;
        var a = c.iHierarchy ? !0 : !1,
        d = parseInt(g.option('num_eles')),
        b = parseInt(g.option('cur_pos')),
        d = this.getEContHt(),
        f = c.pdata ? c.totalVisibleRows : 0,
        m,
        l = 0;
        c.$tbl && 0 < c.$tbl.length && (m = c.$tbl[c.$tbl.length - 1], l = m.scrollHeight, m = k(m));
        if (0 < l) {
            m = m.children().children('tr');
            b = c = 0;
            for (l = 1; l < m.length; l++) {
                var e = m[l],
                c = c + e.offsetHeight;
                if (c >= d) {
                    a && k(e).hasClass('pq-detail-child') && (b = 1 < b ? b - 1 : 1);
                    break
                } else a ? !1 === k(e).hasClass('pq-detail-child') && b++ : b++
            }
            d = f - b + 1
        } else d = b + 1;
        d > f && (d = f);
        g.option('num_eles', d);
        return d
    };
    n._setScrollVLength = function (g) {
        g = this.that;
        var c = g.options;
        if ('flex' !== c.height || c.maxHeight) {
            var c = this.getSBHeight(),
            a = this.contHt - c + this.headerHt - 2;
            g.vscroll.widget().css('bottom', c);
            g.vscroll.option('length', a)
        }
    };
    n.setHeaderHeight = function () {
        var g = this.that,
        c = g.$header,
        a,
        d,
        b;
        if (c && c.length) {
            if (1 < c.length) {
                if (a = c[0].scrollHeight, d = c[1].scrollHeight, b = Math.max(a, d), a !== d) {
                    var f = k(c[0]).find('.pq-grid-header-search-row'),
                    m = k(c[1]).find('.pq-grid-header-search-row');
                    f.length && (f.css('height', ''), m.css('height', ''), a = c[0].scrollHeight, d = c[1].scrollHeight, b = Math.max(a, d), a < b ? f.height(m[0].scrollHeight)  : m.height(f[0].scrollHeight))
                }
            } else b = a = c[0].scrollHeight;
            g.$header_o.height(b - 3);
            this.headerHt = b - 1
        } else g.$header_o.height(0),
        this.headerHt = 0
    };
    n.initContHeight = function () {
        var g = this.that,
        c = g.options;
        if ('flex' != c.height || c.maxHeight) this.contHt = this.height - (c.showHeader ? this.rowHt : 0) - (c.showTop ? g.$top[0].offsetHeight : 0) - (c.showBottom ? g.$bottom[0].offsetHeight : 0)
    };
    n.initContWidth = function () {
        this.contWd = this.width
    };
    n.setContHeight = function (g) {
        g = this.that;
        var c = g.$top,
        a = this.height - g.$header_o[0].offsetHeight,
        d;
        if (g.options.showTop) {
            d = c[0].offsetHeight;
            var b = parseInt;
            c = c[0];
            window.getComputedStyle ? c = getComputedStyle(c).marginTop : (c = c.currentStyle.marginTop, c = 'auto' == c ? 0 : c);
            d += b(c)
        } else d = 0;
        a = a - d - g.$bottom[0].offsetHeight + 1;
        a = 0 <= a ? a : '';
        g.$cont.height(a);
        this.contHt = a
    };
    n.setContAndGridHeightForFlex = function () {
        var g = this.that,
        c = g.hscroll.widget();
        if (this.vscroll) c.css('position', '');
         else {
            c.css('position', 'relative');
            var c = g.$cont,
            a = g.options.cls,
            d = c.children('.' + a.cont_inner_b);
            c.height('');
            d.length || (d = c.children('.' + a.cont_inner));
            d.height('');
            g.element.height('');
            g.$grid_center.height('')
        }
    };
    n.setContAndGridWidthForFlex = function () {
        var g = this.that,
        c = g.options.maxWidth,
        a = this.maxWidthPixel,
        d = g.calcWidthCols( - 1, g.colModel.length),
        g = g.element,
        b = this.getSBWidth(),
        d = d + b;
        c && d >= a && (d = a);
        this.contWd = d;
        g.width(d + 'px')
    };
    n.getTotalVisibleRows = function (g, c, a) {
        var d = this.that,
        b = this.vrows,
        f = this.estRowsInViewPort(),
        m = 0,
        l = a ? a.length : 0,
        e = c,
        h = 0,
        w = 0,
        k = null,
        t = d.iHierarchy ? !0 : !1,
        d = d.options.detailModel.offset,
        p = 0,
        q = this.rowHt,
        n = t ? this.contHt : void 0;
        if (null == a || 0 == l) return {
            initV: null,
            finalV: null,
            tvRows: m,
            lastFrozenRow: null
        };
        for (var v = 0, u = l > c ? c : l; v < u; v++) {
            var r = a[v],
            y = r.pq_hidden;
            y || (k = v, m++, t && ((r = r.pq_detail) && r.show ? (r = r.height || 0, r > d && (r = d), p += r + q)  : p += q))
        }
        if (l < c) return {
            initV: k,
            finalV: k,
            tvRows: m,
            lastFrozenRow: k
        };
        f -= m;
        e = h = b[g];
        w = 0;
        v = e;
        for (u = l; v < u; v++) {
            r = a[v];
            if (y = r.pq_hidden) h++;
             else if (w ===
            f) break;
             else h++,
            w++;
            if (t && !y && ((r = r.pq_detail) && r.show ? (r = r.height || 0, r > d && (r = d), p += r + q)  : p += q, p > n)) break
        }
        m += b.length;
        e = e >= l ? l - 1 : e;
        h = h >= l ? l - 1 : h;
        return {
            initV: e,
            finalV: h < e ? e : h,
            tvRows: m,
            lastFrozenRow: k
        }
    };
    n.setInitH = function (g, c) {
        var a = this.that;
        a.initH = g;
        a.finalH = c
    };
    n.setInitV = function (g, c) {
        var a = this.that,
        d;
        (null == g || null == c) && (d = this.vrows) && d.length && (g = c = d[d.length - 1]);
        a.initV = g;
        a.finalV = c
    };
    n.calcVisibleV = function () {
        for (var g = this.that, c = g.pdata || [
        ], a = c.length, d = [
        ], b = 0, g = g.options.freezeRows; g < a; g++) c[g].pq_hidden || (d[b++] = g);
        this.vrows = d
    };
    n.calcVisibleH = function () {
        for (var g = this.that, c = [
        ], a = 0, d = g.colModel, g = g.options.freezeCols, b = d.length; g < b; g++) d[g].hidden || (c[a++] = g);
        this.vcols = c
    };
    n.calcInitFinal = function () {
        var g = this.that,
        c = g.options,
        a = c.virtualY,
        d = c.freezeRows,
        b = 'flex' === c.height,
        f = g.pdata;
        if (null == f || 0 === f.length) d = this.getTotalVisibleRows(m, d, f),
        g.totalVisibleRows = d.tvRows,
        a = d.initV,
        c = d.finalV,
        g.lastFrozenRow = d.lastFrozenRow;
         else if (a) {
            var m = parseInt(g.vscroll.option('cur_pos'));
            if (isNaN(m) || 0 > m) throw 'cur_pos NA';
            g.scrollCurPos = m;
            d = this.getTotalVisibleRows(m, d, f);
            g.totalVisibleRows = d.tvRows;
            a = d.initV;
            g.lastFrozenRow = d.lastFrozenRow;
            c = b && !c.maxHeight ? f.length - 1 : d.finalV
        } else d = this.getTotalVisibleRows(0, d, f),
        g.lastFrozenRow = d.lastFrozenRow,
        g.totalVisibleRows = d.tvRows,
        a = 0,
        c = f.length - 1;
        this.setInitV(a, c)
    };
    n.calcInitFinalH = function () {
        var g = this.that,
        c = g.options,
        a,
        d = g.colModel,
        b = d.length;
        if (c.virtualX) {
            a = parseInt(g.hscroll.option('cur_pos'));
            var f = parseInt(c.freezeCols),
            m = 'flex' === c.width,
            l = this.vcols;
            l || (this.calcVisibleH(), l = this.vcols);
            a = l[a];
            a > b - 1 && (a = b - 1);
            0 > a && (a = 0);
            if (m && !c.maxWidth) c = b - 1;
             else {
                g = g.calcWidthCols( - 1, f);
                f = this.getEContWd();
                for (m = a; m < b; m++) if (l = d[m], !l.hidden) {
                    l = l.outerWidth;
                    if (!l && c.debug) throw 'outerwidth N/A';
                    g += l;
                    if (g > f) break
                }
                c = m;
                c > b - 1 && (c = b - 1)
            }
        } else a = 0,
        c = b - 1;
        this.setInitH(a, c)
    };
    n._calcOffset = function (g) {
        return (g = /(-|\+)([0-9]+)/.exec(g)) && 3 === g.length ? parseInt(g[1] + g[2])  : 0
    };
    n.setMax = function (g) {
        var c = this.that,
        a = c.element;
        (c = c.options[g]) ? (c == parseInt(c) && (c += 'px'), a.css(g, c))  : a.css(g, '')
    };
    n.refreshGridWidthAndHeight = function () {
        var g = this.that,
        c = g.options,
        a,
        d,
        b = - 1 < (c.width + '').indexOf('%') ? !0 : !1,
        f = - 1 < (c.height + '').indexOf('%') ? !0 : !1,
        m = - 1 < (c.maxHeight + '').indexOf('%') ? !0 : !1,
        l = 'flex' == c.height,
        e = m && l,
        h = - 1 < (c.maxWidth + '').indexOf('%') ? !0 : !1,
        w = 'flex' == c.width,
        A = h && w,
        g = g.element;
        if (b || f || e || A) {
            var t = g.parent();
            if (!t.length) return;
            var p;
            t[0] == document.body || 'fixed' == g.css('position') ? (p = k(window).width(), t = window.innerHeight ? window.innerHeight : k(window).height())  : (p = t.width(), t = t.height());
            var q = this._calcOffset,
            n = b ? q(c.width)  : 0,
            q = f ? q(c.height)  : 0;
            A ? a = parseInt(c.maxWidth) * p / 100 : b && (a = parseInt(c.width) * p / 100 + n);
            e ? d = parseInt(c.maxHeight) * t / 100 : f && (d = parseInt(c.height) * t / 100 + q)
        }
        a || (w && c.maxWidth ? h || (a = c.maxWidth)  : b || (a = c.width));
        c.maxWidth && (this.maxWidthPixel = a);
        d || (l && c.maxHeight ? m || (d = c.maxHeight)  : f || (d = c.height));
        parseFloat(a) == a ? (a = a < c.minWidth ? c.minWidth : a, g.css('width', a))  : 'auto' === a && g.width(a);
        parseFloat(d) == d && (d = d < c.minHeight ? c.minHeight : d, g.css('height', d));
        this.width = Math.round(g.width());
        this.height = Math.round(g.height())
    };
    n.decidePanes = function () {
        var g = this.that,
        c = g.pqpanes = {
            v: !1,
            h: !1,
            vH: !1
        },
        a = g.options,
        g = a.virtualX,
        d = a.virtualY,
        b = 'flex' == a.height && !a.maxHeight,
        f = 'flex' == a.width && !a.maxWidth,
        m = a.numberCell,
        l = a.freezeRows,
        a = a.freezeCols;
        !l || b || !a && !m.show || f ? l && !b ? d || (c.h = !0)  : !a && !m.show || f || g || (c.v = !0, c.vH = !0)  : (d || (c.h = !0), g || (c.v = !0, c.vH = !0))
    };
    n._storeColumnWidths = function (g) {
        for (var c = this.that, a = c.options, d = c.colModel, b = a.virtualX, a = a.freezeCols, f = c.initH, c = g ? d.length - 1 : c.finalH, m = [
        ], l = 0; l <=
        c; l++) !g && b && l < f && l >= a && (l = f),
        m[l] = {
            outerWidth: d[l].outerWidth
        };
        return m
    };
    n._isColumnWidthChanged = function (g) {
        for (var c = this.that, a = c.colModel, c = c.iGenerateView.colDef, d = 0, b = c.length; d < b; d++) {
            var f = c[d].colIndx;
            if (a[f].outerWidth !== g[f].outerWidth) return !0
        }
        return !1
    };
    n.softRefresh = function () {
        var g = this.that,
        c = g.options;
        this.refreshScrollbars();
        g.iGenerateView.setPanes();
        g._saveDims();
        g.iMouseSelection.syncScrollBarVert();
        'flex' == c.height && this.setContAndGridHeightForFlex();
        'flex' == c.width && this.setContAndGridWidthForFlex();
        this._refreshFrozenLine()
    };
    n.refreshScrollbars = function (g) {
        g = g || {
        };
        var c = this.that,
        a = c.options,
        d = c.iGenerateView,
        b,
        f = 'flex' === a.height;
        b = 'flex' === a.width;
        if ((f || this.contHt) && (b || this.contWd) && null !== c.totalVisibleRows) {
            c = this.setScrollVNumEles(g);
            c = 1 < c ? !0 : !1;
            if ((!f || a.maxHeight) && c !== this.vscroll) if (this.vscroll = c, a.scrollModel.autoFit || a.virtualX || b) {
                if (a = this._storeColumnWidths(), this.refreshColumnWidths(), this._isColumnWidthChanged(a) || b) this.ignoreTResize = !0,
                this._refreshTableWidths(a, {
                    table: !0,
                    header: !0
                }),
                delete this.ignoreTResize,
                this.setHeaderHeight(),
                this.setContHeight(),
                d.setPanes(),
                c = this.setScrollVNumEles(!0),
                this.vscroll = 1 < c ? !0 : !1
            } else d.setPanes();
            c = this.setScrollHNumEles();
            b = 1 < c ? !0 : !1;
            this.hscroll != b && (this.hscroll = b, d.setPanes());
            this._setScrollHLength();
            this._setScrollVLength(g);
            this._setScrollHVLength()
        }
    };
    n._setScrollHVLength = function () {
        var g = this.that;
        this.vscroll && this.hscroll || g.$hvscroll.css('visibility', 'hidden')
    };
    n._setScrollHLength = function () {
        var g = this.that,
        c = g.hscroll.widget(),
        a = g.$hvscroll;
        if (g.options.scrollModel.horizontal) {
            c.css('visibility', '');
            a.css('visibility', '');
            var a = this.contWd,
            d = this.getSBWidth();
            c.css('right', 0 === d ? 0 : '');
            g.hscroll.option('length', a - d)
        } else c.css('visibility', 'hidden'),
        a.css('visibility', 'hidden')
    };
    n.estVscroll = function () {
        var g = this.that,
        c = !0;
        null == g.totalVisibleRows || null == this.contHt ? c = !1 : g.totalVisibleRows * this.rowHt < this.contHt && (c = !1);
        this.vscroll = c
    };
    n.getSBWidth = function () {
        null == this.vscroll && this.estVscroll();
        return this.vscroll ? 17 :
        0
    };
    n.estHscroll = function () {
        var g = this.that;
        if (null == this.contWd) throw 'failed';
        var c = !1;
        1 < this.calcColsOutsideCont(g.colModel) + 1 && (c = !0);
        this.hscroll = c
    };
    n.getSBHeight = function () {
        null == this.hscroll && this.estHscroll();
        return this.hscroll ? 17 : 0
    };
    n.getEContHt = function () {
        if (null == this.contHt) throw 'contHt N/A';
        return this.contHt - this.getSBHeight()
    };
    n.getEContWd = function () {
        if (null == this.contWd) throw 'contWd N/A';
        return this.contWd - this.getSBWidth()
    };
    n.calcColsOutsideCont = function (g) {
        var c = this.that.options,
        a = c.numberCell,
        c = c.freezeCols,
        d = this.contWd - this.getSBWidth(),
        b = 0;
        a.show && (b += a.outerWidth);
        for (a = 0; a < g.length; a++) {
            var f = g[a];
            f.hidden || (b += f.outerWidth)
        }
        var m = 0,
        l = 0,
        f = Math.round(b);
        f > d && l++;
        for (a = c; a < g.length; a++) if (f = g[a], !f.hidden) if (m += f.outerWidth, f = b - m, f > d) l++;
         else break;
        return l
    };
    n.setScrollHNumEles = function () {
        var g = this.that,
        c = g.options,
        a = g.colModel,
        d = c.scrollModel,
        b = 0;
        if ('flex' !== c.width || c.maxWidth) b = 'fullScroll' === d.lastColumn ? a.length - c.freezeCols - g._calcNumHiddenUnFrozens()  : this.calcColsOutsideCont(a) +
        1;
        g.hscroll.option('num_eles', b);
        return b
    };
    n.init = function () {
        var g = this.that,
        c = g.options;
        this.hscroll = this.vscroll = this.contHt = this.contWd = null;
        g.initH = g.initV = g.finalH = g.finalV = null;
        g.totalVisibleRows = g.lastFrozenRow = null;
        this.rowHt = c.rowHeight;
        this.headerHt = 0;
        this.height = null
    };
    n.refresh = function (g) {
        g = g || {
        };
        var c = this.that,
        a = g.header,
        d = g.table,
        b = g.pager,
        f,
        m = c.iGenerateView;
        f = c.element;
        if (f[0].offsetWidth) {
            g.toolbar && c.refreshToolbar();
            c.iMouseSelection.resetMargins();
            this.init();
            f = c.options;
            this.decidePanes();
            f.collapsible._collapsed = !1;
            this.setMax('maxHeight');
            this.setMax('maxWidth');
            this.refreshGridWidthAndHeight();
            this.initContHeight();
            this.initContWidth();
            this.calcInitFinal();
            if (!1 === a || !1 === d) var l = this._storeColumnWidths(!0);
            this.refreshColumnWidths();
            this.calcInitFinalH();
            m.createColDefs();
            !1 !== a ? c._createHeader()  : this._isColumnWidthChanged(l) && this._refreshTableWidths(l, {
                header: !0
            });
            c._refreshHeaderSortIcons();
            !1 !== b && c._refreshPager();
            this.setHeaderHeight();
            this.setContHeight();
            !1 !== d ? m.generateView({
                source: g.source
            })  : (this._refreshTableWidths(l, {
                table: !0
            }), m.setPanes());
            c._saveDims();
            m.scrollView();
            this.refreshScrollbars();
            'flex' == f.height && this.setContAndGridHeightForFlex();
            'flex' == f.width && this.setContAndGridWidthForFlex();
            this._refreshFrozenLine();
            c._createCollapse();
            f.dataModel.postDataOnce = void 0
        } else f.addClass('pq-pending-refresh')
    };
    n.summaryTable = function () {
        var g = this.$summary,
        c = this.that,
        a = c.options.summaryData;
        a ? (g || (g = this.$summary = k('<div class=\'pq-grid-summary\'></div>').prependTo(c.$bottom)), g = {
            data: a,
            $cont: g
        }, c.createTable(g))  : g && g[0].innerHTML && g.empty()
    };
    n.refreshVscroll = function (g) {
        g = this.that;
        var c = g.iGenerateView,
        a = g.options;
        if (a.virtualY && !a.scrollModel.smooth) {
            var d = g.initV,
            b = g.finalV;
            this.calcInitFinal();
            var f = d - g.initV,
            m = b - g.finalV;
            a.fullrefreshOnScroll || a.detailModel.init || g._mergeCells || 1 != Math.abs(f) || 1 != Math.abs(m) ? d == g.initV && b == g.finalV || c.generateView()  : - 1 == f ? (c.removeTopRow(1), c.appendRow(g.finalV - b))  : 1 == f && (c.prependRow(), c.removeBottomRow(b - g.finalV));
            g._saveDims();
            c.scrollView();
            1 >= this.setScrollVNumEles() && this.refreshScrollbars()
        }
    };
    n._refreshTableWidths = function (g, c) {
        var a = this.that,
        d = a.$tbl_header,
        b = c.header && d,
        f = a.$tbl,
        m = c.table && f,
        d = b ? d.children().children('.pq-row-hidden')  : null,
        l = b ? a.$header.find('.pq-grid-col-resize-handle')  : null,
        f = m && f ? f.children().children('.pq-row-hidden')  : null,
        e,
        h = !1,
        w = 0;
        m && a.tables.length && (m = a.tables[0].$tbl.children().children('.pq-row-hidden'), f = f ? f.add(m)  : m);
        for (var m = a.iGenerateView.colDef, k = 0, t = m.length; k < t; k++) {
            var p = m[k],
            q = p.colIndx,
            n = g[q].outerWidth,
            p = p.column.outerWidth;
            p !== n && (b && (e = d.find('td[pq-col-indx=' + q + ']'), e.width(p)), f && (e = f.find('td[pq-col-indx=' + q + ']'), e.length && (h = !0, e.width(p))));
            w += p - n;
            b && 0 !== w && (q = l.filter('[pq-col-indx=' + q + ']'), n = parseInt(q.css('left')), q.css('left', n + w))
        }
        h && a._trigger('tableWidthChange');
        a._saveDims()
    }
}) (jQuery);
(function (k) {
    function n(a, b, d) {
        for (var f = 0, c = a.length; f < c; f++) {
            for (var m = a[f], l = {
            }, g = 0, k = b.length; g < k; g++) {
                var n = b[g];
                l[n] = m[n]
            }
            d.push(l)
        }
    }
    function g(a) {
        var b = this;
        b.that = a;
        b.findformulas();
        a.on('columnChange', function () {
            b.findformulas()
        }).on('dataAvailable', function () {
            b._onDA()
        }).on(!0, 'change', function (a, e) {
            b._onchange(e)
        }).on('dataReady changeDone', function () {
            b.summaryData()
        })
    }
    var c = k.paramquery,
    a = c.cClass,
    d = {
        options: {
            flex: {
                on: !0,
                one: !1,
                all: !0
            },
            detailModel: {
                cache: !0,
                offset: 100,
                expandIcon: 'ui-icon-triangle-1-se glyphicon glyphicon-minus',
                collapseIcon: 'ui-icon-triangle-1-e glyphicon glyphicon-plus'
            },
            dragColumns: {
                enabled: !0,
                acceptIcon: 'ui-icon-check glyphicon-ok',
                rejectIcon: 'ui-icon-closethick glyphicon-remove',
                topIcon: 'ui-icon-circle-arrow-s glyphicon glyphicon-circle-arrow-down',
                bottomIcon: 'ui-icon-circle-arrow-n glyphicon glyphicon-circle-arrow-up'
            },
            track: null,
            mergeModel: {
                flex: !1
            },
            realFocus: !0,
            sortModel: {
                on: !0,
                type: 'local',
                multiKey: 'shiftKey',
                number: !0,
                single: !0,
                cancel: !0,
                sorter: [
                ],
                useCache: !0,
                ignoreCase: !1
            },
            filterModel: {
                on: !0,
                type: 'local',
                mode: 'AND',
                header: !1
            }
        },
        _create: function () {
            var a = this,
            b = a.options;
            a.listeners = {
            };
            a._queueATriggers = {
            };
            a.iHistory = new c.cHistory(a);
            a.iGroupView = new c.cGroupView(a);
            c.cMerge && (a.iMerge = new c.cMerge(a));
            a.iFilterData = new c.cFilterData(a);
            a.iSelection = new f.Selection(a);
            a.iHeaderSearch = new m(a);
            a.iUCData = new c.cUCData(a);
            a.iMouseSelection = new c.cMouseSelection(a);
            a._super();
            new g(a);
            a.iDragColumns = new c.cDragColumns(a);
            a.refreshToolbar();
            'remote' === b.dataModel.location && a.refresh({
                table: !0
            });
            a.on('dataAvailable', function () {
                a.one('refreshDone', function () {
                    a._trigger('ready');
                    setTimeout(function () {
                        a.element && a._trigger('complete')
                    }, 0)
                })
            });
            a.__init();
            a.refreshDataAndView({
                header: !0
            })
        }
    },
    b;
    d.__init = function () {
        b || (b = k('<div style=\'position:fixed;bottom:0;right:20px;padding:0 2px;margin:0;opacity:0.5;z-index:10000;border:1px solid lightgray;border-radius:5px;\'><a style=\'font-size:10px;text-decoration:none;\'>ParamQuery Pro Eval</a></div>').appendTo(document.body))
    };
    k.widget('paramquery.pqGrid', c._pqGrid, d);
    k.widget.extend = function () {
        var a = Array.prototype.shift,
        b = k.isPlainObject,
        d = k.isArray,
        f = k.widget.extend,
        c = a.apply(arguments),
        m;
        'boolean' == typeof c && (m = c, c = a.apply(arguments));
        var l = arguments,
        g = 0,
        n = l.length,
        u,
        r,
        y;
        for (null == m && (m = 1 < n ? !0 : !1); g < n; g++) for (r in u = l[g], u) y = u[r],
        void 0 !== y && (a = 0 < g ? !1 : !0, b(y) ? (c[r] = c[r] || {
        }, f(a, c[r], y))  : d(y) ? c[r] = m && a ? y.slice()  : y : c[r] = y);
        return c
    };
    var f = window.pq = window.pq || {
    };
    f.grid = function (a, b) {
        var d = k(a).pqGrid(b);
        return d.data('paramqueryPqGrid') || d.data('paramquery-pqGrid')
    };
    c.pqGrid.regional = {
    };
    d = c.pqGrid.prototype;
    c.pqGrid.defaults = d.options;
    d.focus = function (a) {
        a = a || {
        };
        var b = a.$td,
        d = a.rowIndxPage;
        a = a.colIndx;
        if (b) {
            if (null == d || null == a) a = this.getCellIndices({
                $td: b
            }),
            d = a.rowIndxPage,
            a = a.colIndx
        } else {
            if (null == d || null == a) {
                if ((d = document.activeElement) && d != document.body && 'pq-grid-excel' != d.id && 'pq-grid-cont' != d.className || !(b = this._focusElement)) return;
                d = b.rowIndxPage,
                a = b.colIndx
            }
            var b = this.iMerge,
            f = d + this.rowIndxOffset;
            b.ismergedCell(f, a) && (b = b.getRootCell(f, a, 'o'), d = b.rowIndxPage, a = b.colIndx);
            b = this.getCell({
                rowIndxPage: d,
                colIndx: a
            })
        }
        if (this.options.realFocus) {
            this._focusElement = {
                $ele: b,
                rowIndxPage: d,
                colIndx: a
            };
            var c;
            b[0] && (c = b[0]) && 'TD' == c.nodeName.toUpperCase() ? (c.setAttribute('tabindex', 0), c.focus())  : (d = this.options.dataModel.data) && d.length || this.$cont.focus()
        } else {
            if (c = this._focusElement) this.removeClass({
                rowIndxPage: c.rowIndxPage,
                colIndx: c.colIndx,
                cls: 'pq-focus',
                refresh: !1
            }),
            this.element.find('.pq-focus').removeClass('pq-focus');
            b && (this.addClass({
                rowIndxPage: d,
                colIndx: a,
                cls: 'pq-focus'
            }), this._focusElement = {
                $ele: b,
                rowIndxPage: d,
                colIndx: a
            });
            d = this.$cont;
            document.activeElement != d[0] && d[0].focus()
        }
    };
    d.onfocus = function () {
        if (!this.options.realFocus) {
            var a = this._focusElement;
            a && this.addClass({
                rowIndxPage: a.rowIndxPage,
                colIndx: a.colIndx,
                cls: 'pq-focus'
            })
        }
    };
    d.onblur = function () {
        if (!this.options.realFocus) {
            var a = this._focusElement;
            a && this.removeClass({
                rowIndxPage: a.rowIndxPage,
                colIndx: a.colIndx,
                cls: 'pq-focus'
            })
        }
    };
    d.range = function (a, b) {
        return new f.Range(this, a, 'range', b)
    };
    d.rowExpand = function (a) {
        this.iHierarchy.rowExpand(a)
    };
    d.rowInvalidate = function (a) {
        this.iHierarchy.rowInvalidate(a)
    };
    d.rowCollapse = function (a) {
        this.iHierarchy.rowCollapse(a)
    };
    d.saveState = function (a) {
        a = a || {
        };
        var b = this.element,
        d = k.extend,
        f = this.options,
        c = d(!0, {
        }, {
            sorter: f.sortModel.sorter
        }),
        m = f.pageModel,
        m = {
            rPP: m.rPP,
            curPage: m.curPage
        },
        l = this.colModel,
        g = [
        ],
        n,
        u,
        r = 0,
        y = l.length;
        u = f.groupModel;
        d = d(!0, {
        }, {
            dataIndx: u.dataIndx,
            dir: u.dir,
            collapsed: u.collapsed,
            merge: u.merge,
            grandSummary: u.grandSummary
        });
        for (b = b[0].id; r <
        y; r++) {
            n = l[r];
            u = {
                width: n.width,
                dataIndx: n.dataIndx
            };
            if (n = n.filter) u.filter = {
                value: n.value,
                value2: n.value2,
                on: n.on
            };
            g[r] = u
        }
        f = {
            colModel: g,
            height: f.height,
            datestamp: Date.now(),
            width: f.width,
            groupModel: d,
            pageModel: m,
            sortModel: c,
            freezeRows: f.freezeRows,
            freezeCols: f.freezeCols
        };
        !1 !== a.stringify && (f = JSON.stringify(f), !1 !== a.save && 'undefined' !== typeof Storage && localStorage.setItem('pq-grid' + (b ? b : ''), f));
        return f
    };
    d.loadState = function (a) {
        a = a || {
        };
        var b;
        b = k.widget.extend;
        var d = k.extend,
        f = this.element[0].id;
        if (f = a.state || ('undefined' === typeof Storage ? void 0 : localStorage.getItem('pq-grid' + (f ? f : '')))) 'string' == typeof f && (f = JSON.parse(f));
         else return !1;
        for (var c = f.colModel, m, l, g = [
        ], n = [
        ], u = [
        ], r = this.options, y = 1 < this.depth, s = y ? this.colModel : r.colModel, z = 0, C = c.length; z < C; z++) m = c[z],
        l = m.dataIndx,
        n[l] = z,
        g[l] = m.width,
        u[l] = m.filter;
        y || s.sort(function (a, b) {
            return n[a.dataIndx] - n[b.dataIndx]
        });
        z = 0;
        for (C = s.length; z < C; z++) c = s[z],
        l = c.dataIndx,
        c.width = g[l] || c.width,
        c.filter = d(c.filter, u[l]);
        this.iColModel.init();
        b(r.sortModel, f.sortModel);
        b(r.pageModel, f.pageModel);
        b = f.groupModel;
        b.refresh = !1;
        this.groupOption(b);
        b = {
            freezeRows: f.freezeRows,
            freezeCols: f.freezeCols
        };
        isNaN(1 * r.height) || isNaN(1 * f.height) || (b.height = f.height);
        isNaN(1 * r.width) || isNaN(1 * f.width) || (b.width = f.width);
        this.option(b);
        !1 !== a.refresh && this.refreshDataAndView();
        return !0
    };
    var m = function (a) {
        function b(d, f, c) {
            a.filter({
                data: [
                    {
                        dataIndx: d,
                        value: f,
                        value2: c
                    }
                ]
            })
        }
        this.that = a;
        var d = this;
        this.dataHS = {
        };
        a.on('headerKeyDown', function (a, b) {
            var e = k(a.originalEvent.target);
            return e.hasClass('pq-grid-hd-search-field') ? d.onKeyDown(a, b, e)  : !0
        });
        a.on('createHeader', function (a, b) {
            return d._onCreateHeader()
        });
        this.changeListener = {
            change: function (a, e) {
                b(e.dataIndx, e.value, e.value2)
            }
        };
        this.keyupListener = {
            keyup: function (a, e) {
                b(e.dataIndx, e.value, e.value2)
            }
        };
        this.clickListener = {
            click: function (a, e) {
                b(e.dataIndx, e.value)
            }
        }
    },
    a = m.prototype = new a;
    a.get$Ele = function (a, b) {
        var d = this.that,
        f = d.options.freezeCols,
        c = k(d.$tbl_header[0]),
        m = '.pq-grid-hd-search-field[name=\'' + b + '\']',
        d = k(d.$tbl_header[2 ==
        d.$tbl_header.length ? 1 : 0]);
        return a >= f ? d.find(m)  : c.find(m)
    };
    a.onKeyDown = function (a, b, d) {
        b = this.that;
        if (a.keyCode === k.ui.keyCode.TAB) {
            var f = d.attr('name'),
            c = b.getColIndx({
                dataIndx: f
            }),
            m = b.colModel,
            l,
            g = a.shiftKey,
            n = m[c];
            if ('between' == n.filter.condition && (b.scrollColumn({
                colIndx: c
            }), f = this.get$Ele(c, f), f[0] == d[0] ? g || (l = f[1])  : g && (l = f[0]), l)) return l.focus(),
            a.preventDefault(),
            !1;
            do {
                g ? c-- : c++;
                if (0 > c || c >= m.length) break;
                n = m[c];
                d = n.filter;
                if (!n.hidden && d) {
                    b.scrollColumn({
                        colIndx: c
                    });
                    f = n.dataIndx;
                    l = this.get$Ele(c, f);
                    'between' == d.condition && (l = g ? k(l[1])  : k(l[0]));
                    if (l) return l.focus(),
                    a.preventDefault(),
                    !1;
                    break
                }
            } while (1)
        } else return !0
    };
    a._bindFocus = function () {
        function a(e) {
            e = k(e.target).closest('.pq-grid-hd-search-field').attr('name');
            if (b.scrollColumn({
                dataIndx: e
            })) {
                var f = b.getColIndx({
                    dataIndx: e
                });
                d.get$Ele(f, e).focus()
            }
        }
        for (var b = this.that, d = this, f = b.$header.find('.pq-grid-header-search-row'), c = 0; c < f.length; c++) k(f[c]).on('focusin', a)
    };
    a._onCreateHeader = function () {
        var a = this.that,
        b = a.options;
        if (b.filterModel.header) {
            this._bindFocus();
            var d = a.colModel,
            b = b.freezeCols,
            f = a.$tbl_header,
            c = k(f[0]),
            m = k(f[1]),
            l = 'input,select';
            if (1 < f.length) {
                c.find(l).css('visibility', 'hidden');
                for (var g = 0; g < b; g++) {
                    var n = d[g],
                    l = '*[name=\'' + n.dataIndx + '\']';
                    c.find(l).css('visibility', 'visible');
                    m.find(l).css('visibility', 'hidden')
                }
            }
            d = a.iGenerateView.colDef;
            g = 0;
            for (l = d.length; g < l; g++) {
                var u = d[g],
                r = u.colIndx,
                n = u.column,
                y = n.filter;
                if (y) {
                    var u = n.dataIndx,
                    s = c;
                    r >= b && 1 < f.length && (s = m);
                    r = s.find('*[name=\'' + u + '\']');
                    if (0 != r.length) {
                        var s = y.type,
                        z = y.value,
                        C = y.value2;
                        'checkbox' == s && 'triple' == y.subtype ? r.pqval({
                            val: z
                        })  : 'select' == s && null != z && r.val(z);
                        (s = y.init) && s.call(r, {
                            dataIndx: u,
                            column: n
                        });
                        if (n = y.listeners) for (y = 0; y < n.length; y++) {
                            s = n[y];
                            'string' == typeof s && (s = this[s + 'Listener']);
                            for (var B in s) (function (b, d, f) {
                                b.bind(B, function (c) {
                                    var h = a.getColumn({
                                        dataIndx: f
                                    }),
                                    m = h.filter;
                                    'checkbox' == m.type ? z = 'triple' == m.subtype ? b.pqval({
                                        incr: !0
                                    })  : b.is(':checked') ? !0 : !1 : 'between' == m.condition ? (z = k(b[0]).val(), C = k(b[1]).val())  : z = b.val();
                                    return d.call(this, c, {
                                        column: h,
                                        dataIndx: f,
                                        value: z,
                                        value2: C
                                    })
                                })
                            }) (r, s[B], u)
                        }
                    }
                }
            }
        }
    };
    var l = function (a, b) {
        return ['<div class=\'pq-from-div\'>',
        a,
        '</div><span class=\'pq-from-to-center\'>-</span><div class=\'pq-to-div\'>',
        b,
        '</div>'].join('')
    };
    a.createDOM = function (a, b) {
        var d = this.that,
        f = d.options,
        m = f.bootstrap.on ? ' ' : ' ui-corner-all',
        f = f.numberCell;
        a.push('<tr class=\'pq-grid-header-search-row\'>');
        f.show && a.push('<td pq-col-indx=\'-1\' class=\'pq-grid-number-col\' rowspan=\'1\'><div class=\'pq-td-div\'>&nbsp;</div></td>');
        for (var f = d.iGenerateView.colDef, g = 0, k = f.length; g < k; g++) {
            var n = f[g].column,
            v = b,
            u = n.halign;
            u || (u = n.align);
            'right' == u ? v += ' pq-align-right' : 'center' == u && (v += ' pq-align-center');
            (u = n.cls) && (v = v + ' ' + u);
            if (u = n.filter) {
                var r = n.dataIndx,
                y = u.type,
                s = u.value,
                z = u.condition,
                C = u.cls,
                C = 'pq-grid-hd-search-field ' + (C ? C : ''),
                B = u.style,
                B = B ? B : '',
                D = u.attr,
                D = D ? D : '',
                E = '';
                if ('between' == z) var F = u.value2,
                F = null != F ? F : '';
                'textbox' === y ? (s = s ? s : '', C = C + ' pq-search-txt' + m, E = 'between' == z ? l(this._input(r, s, C + ' pq-from', B, D), this._input(r, F, C + ' pq-to', B, D))  : this._input(r, s, C, B, D))  : 'textarea' === y ? (s = s ? s : '', C = C + ' pq-search-txt' + m, E = 'between' == z ? l(this._textarea(r, s, C + ' pq-from', B, D), this._textarea(r, F, C + ' pq-to', B, D))  : this._textarea(r, s, C, B, D))  : 'select' === y ? u.cache ? E = u.cache : (y = u.options, 'function' === typeof y && (y = y.call(d, {
                    column: n,
                    value: s,
                    dataIndx: r,
                    cls: C,
                    style: B,
                    attr: D
                })), C += m, n = [
                    'name=\'',
                    r,
                    '\' class=\'',
                    C,
                    '\' style=\'',
                    B,
                    '\' ',
                    D
                ].join(''), E = c.select({
                    options: y,
                    attr: n,
                    prepend: u.prepend,
                    valueIndx: u.valueIndx,
                    labelIndx: u.labelIndx,
                    groupIndx: u.groupIndx
                }), u.cache = E)  : 'checkbox' ==
                y ? E = [
                    '<input ',
                    null == s || !1 == s ? '' : 'checked=checked',
                    ' name=\'',
                    r,
                    '\' type=checkbox class=\'' + C + '\' style=\'' + B + '\' ' + D + '/>'
                ].join('')  : 'string' == typeof y ? E = y : 'function' == typeof y && (E = y.call(d, {
                    width: n.outerWidth,
                    value: s,
                    value2: F,
                    column: n,
                    dataIndx: r,
                    cls: C,
                    attr: D,
                    style: B
                }));
                a.push(['<td class=\'',
                v,
                '\'><div class=\'pq-td-div\' >',
                E,
                '</div></td>'].join(''))
            } else a.push(['<td class=\'',
            v,
            '\'><div class=\'pq-td-div\' >&nbsp;</div></td>'].join(''))
        }
        a.push('</tr>')
    };
    a._input = function (a, b, d, f, c) {
        return ['<input value="',
        b,
        '" name=\'',
        a,
        '\' type=text style=\'' + f + '\' class=\'' + d + '\' ' + c + ' />'].join('')
    };
    a._textarea = function (a, b, d, f, c) {
        return ['<textarea name=\'',
        a,
        '\' style=\'' + f + '\' class=\'' + d + '\' ' + c + ' >',
        b,
        '</textarea>'].join('')
    };
    d.refreshToolbar = function () {
        var a = this.options,
        b = a.toolbar,
        d;
        this._toolbar && (d = this._toolbar, d.destroy());
        if (b) {
            var c = b.cls,
            m = b.style,
            l = b.attr,
            b = b.items,
            c = k('<div class=\'' + (c ? c : '') + '\' style=\'' + (m ? m : '') + '\' ' + (l ? l : '') + ' ></div>');
            d ? d.widget().replaceWith(c)  : this.$top.append(c);
            d = f.toolbar(c, {
                items: b,
                gridInstance: this,
                bootstrap: a.bootstrap
            });
            a.showToolbar || c.css('display', 'none');
            this._toolbar = d
        }
    };
    d.isLeftOrRight = function (a) {
        return a > this.freezeCols ? 'right' : 'left'
    };
    d.ovCreateHeader = function (a, b) {
        this.options.filterModel.header && this.iHeaderSearch.createDOM(a, b)
    };
    d.filter = function (a) {
        var b = this,
        d = this.options,
        f = void 0 === a.apply ? !0 : a.apply,
        c = void 0 === a.sort ? !0 : a.sort,
        m = d.dataModel,
        d = d.filterModel;
        if (void 0 != a) {
            var l = 'replace' == a.oper ? !0 : !1;
            a = a.data;
            for (var g = this.colModel, g = f ? g : k.extend(!0, [
            ], g), n = 0, u = g.length, r = a.length, y = 0; y < u; y++) {
                for (var s = g[y], z = !1, C = 0; C < r && n != r; C++) {
                    var B = a[C];
                    if (B.dataIndx == s.dataIndx) {
                        z = !0;
                        n++;
                        var C = s.filter,
                        D = B.condition,
                        E = B.value;
                        C ? C.on = !0 : C = s.filter = {
                            on: !0
                        };
                        D && (C.condition = D);
                        D = C.condition;
                        C.value = E;
                        if ('between' == D) C.value2 = B.value2;
                         else if ('range' == D) {
                            B = [
                            ];
                            if (E) if ('string' == typeof E) {
                                var D = C.options,
                                F = E.indexOf('"'),
                                K = E.lastIndexOf('"'),
                                E = E.substr(F, K + 1),
                                E = JSON.parse('[' + E + ']');
                                if (D) for (F = 0, K = D.length; F < K; F++) {
                                    var M = D[F];
                                    - 1 != k.inArray(M, E) && B.push(M)
                                } else B = E.split(',s*')
                            } else 'function' ==
                            typeof E.push && (B = E);
                            C.value = B
                        }
                        break
                    }
                }
                l && !z && s.filter && (s.filter.on = !1)
            }
        }
        var L = {
            header: !1,
            apply: f,
            sort: c,
            CM: g
        };
        if ('remote' == m.location && 'local' != d.type) this.remoteRequest({
            apply: f,
            CM: g,
            callback: function () {
                return b._onDataAvailable(L)
            }
        });
         else return L.source = 'filter',
        L.trigger = !1,
        b._onDataAvailable(L)
    };
    d._initTypeColumns = function () {
        for (var a = this.colModel, b = 0, d = a.length; b < d; b++) {
            var f = a[b],
            m = f.type;
            'checkBoxSelection' === m || 'checkbox' == m ? (f.type = 'checkbox', new c.cCheckBoxColumn(this, f))  : 'detail' ===
            m && (f.dataIndx = 'pq_detail', this.iHierarchy = new c.cHierarchy(this, f))
        }
    };
    d.refreshHeader = function () {
        this._createHeader();
        this.iGenerateView.setPanes();
        this._refreshHeaderSortIcons()
    };
    d._refreshHeaderSortIcons = function () {
        this.iHeader.refreshHeaderSortIcons()
    };
    d.getLargestRowCol = function (a) {
        for (var b = 0; b < a.length; b++);
    };
    d.bringCellToView = function (a) {
        this._bringCellToView(a)
    };
    d._setUrl = function (a) {
        this.options.dataModel.getUrl = function () {
            return {
                url: this.url + (null != a ? a : '')
            }
        }
    };
    d.pageData = function () {
        return this.pdata
    };
    d.getData = function (a) {
        a = a || {
        };
        var b = a.dataIndx,
        d = b ? b.length : 0,
        f = a.data;
        a = this.options.dataModel;
        var c = a.data,
        m = a.dataUF;
        a = [
        ];
        if (d) f ? n(f, b, a)  : (c && n(c, b, a), m && n(m, b, a));
         else return c.concat(m ? m : [
        ]);
        f = [
        ];
        for (c = 0; c < d; c++) {
            var m = b[c],
            l = this.getColumn({
                dataIndx: m
            });
            f.push({
                dataIndx: m,
                dir: 'up',
                dataType: l.dataType,
                sortType: l.sortType
            })
        }
        a = this.iSort._sortLocalData(f, a);
        b = [
        ];
        d = void 0;
        f = 0;
        for (c = a.length; f < c; f++) m = a[f],
        l = JSON.stringify(m),
        l !== d && (b.push(m), d = l);
        return b
    };
    d.get_p_data = function () {
        var a = this.options,
        b = 'remote' == a.pageModel.type,
        d = a.dataModel.data,
        f = this.pdata,
        c = this.rowIndxOffset,
        a = a.groupModel,
        m = c && b ? Array(c)  : [
        ];
        return a.on && a.dataIndx.length ? c ? (b || (m = d.slice(0, c)), m.concat(f))  : f : c && b ? m.concat(f)  : d
    };
    d._onDataAvailable = function (a) {
        a = a || {
        };
        var b = this.options,
        d = null == a.apply ? !0 : a.apply,
        f = a.source,
        c = a.sort,
        m = [
        ],
        m = b.filterModel,
        l = b.dataModel,
        b = b.sortModel,
        g = l.location;
        !1 !== d && !1 !== a.trigger && this._trigger('dataAvailable', a.evt, {
            source: f
        });
        m = m && m.on && ('local' == g && 'remote' != m.type || 'remote' == g && 'local' ==
        m.type) ? this.iFilterData.filterLocalData(a).data : l.data;
        'local' == b.type && !1 !== c && (d ? this.sort({
            refresh: !1
        })  : m = this.iSort.sortLocalData(m));
        if (!1 === d) return m;
        l.data = m;
        this.refreshView(a)
    };
    d.sort = function (a) {
        a = a || {
        };
        var b = this,
        d = this.options,
        f = d.dataModel.data,
        c = d.sortModel.type;
        if (f && f.length || 'local' != c) {
            var m = d.editModel,
            d = this.iSort,
            l = d.getSorter(),
            g,
            k = a.evt,
            n = null == a.single ? d.readSingle()  : a.single;
            g = d.readCancel();
            a.sorter ? a.addon ? (a.single = n, a.cancel = g, g = d.refreshSorter(a))  : g = a.sorter : g = d.readSorter();
            if (g.length || l.length) m.indices && b.blurEditor({
                force: !0
            }),
            m = {
                dataIndx: g.length ? g[0].dataIndx : null,
                oldSorter: l,
                sorter: g,
                source: a.source,
                single: n
            },
            !1 === b._trigger('beforeSort', k, m) ? d.cancelSort()  : (d.resumeSort(), 'local' == c && d.saveOrder(), d.setSorter(g), d.setSingle(n), d.writeSorter(g), d.writeSingle(n), 'local' == c ? (d.sortLocalData(f), this._queueATriggers.sort = {
                evt: k,
                ui: m
            }, !1 !== a.refresh && this.refreshView())  : 'remote' == c && (this._queueATriggers.sort = {
                evt: k,
                ui: m
            }, a.initByRemote || this.remoteRequest({
                initBySort: !0,
                callback: function () {
                    b._onDataAvailable()
                }
            })))
        }
    };
    d.reset = function (a) {
        a = a || {
        };
        var b = a.sort,
        d,
        f = 0,
        c;
        d = this.options;
        c = k.extend;
        var m,
        l = a.filter,
        g = a.group;
        if (b || l || g) {
            b && (m = !0 === b ? {
                sorter: [
                ]
            }
             : b, c(d.sortModel, m));
            if (l) for (d = this.getColModel(), c = d.length; f < c; f++) if (m = d[f].filter) m.value = null,
            m.value2 = null,
            m.cache = null;
            g && (f = !0 === g ? {
                dataIndx: [
                ]
            }
             : g, f.refresh = !1, this.groupOption(f));
            !1 !== a.refresh && (l ? (this.filter({
                oper: 'replace',
                data: [
                ]
            }), this.refreshHeader())  : b ? this.sort()  : this.refreshView())
        }
    };
    d._trigger = c._trigger;
    d.on = c.on;
    d.one = c.one;
    d.off = c.off;
    d.pager = function () {
        return this.pagerW
    };
    d.vscrollbar = function () {
        return this.vscroll
    };
    d.hscrollbar = function () {
        return this.hscroll
    };
    d.toolbar = function () {
        return this._toolbar.element
    };
    a = g.prototype;
    a.callRow = function (a, b, d) {
        if (a) for (; d--; ) {
            var f = b[d],
            c = f.column;
            a[c.dataIndx] = f.formula.call(this.that, {
                rowData: a,
                column: c
            })
        }
    };
    a._onDA = function () {
        var a = this.formulas.length;
        if (a) for (var b = this.that.options.dataModel.data, d = b.length, f = this.formulas; d--; ) this.callRow(b[d], f, a)
    };
    a.summaryData = function () {
        var a = this.formulas,
        b = a.length,
        d,
        f;
        if (b) for (d = this.that.options.summaryData || [
        ], f = d.length; f--; ) this.callRow(d[f], a, b)
    };
    a._onchange = function (a) {
        var b = this.formulas.length;
        if (b) {
            a = a.rowList;
            for (var d = this.formulas, f = a.length; f--; ) this.callRow(a[f].rowData, d, b)
        }
    };
    a.findformulas = function () {
        for (var a = this.that.colModel, b, d, f = [
        ], c = a.length; c--; ) b = a[c],
        (d = b.formula) && f.push({
            formula: d,
            column: b
        });
        this.formulas = f
    };
    a = c.cColModel = a = function (a) {
        this.that = a;
        this.init()
    };
    a = a.prototype;
    a.extend = function (a, b) {
        for (var d, f, c = k.extend, m = a.length; m--; ) {
            var l = a[m];
            for (d in b) void 0 === l[d] && (f = b[d], l[d] = f && 'object' == typeof f ? c(!0, {
            }, f)  : f)
        }
    };
    a.init = function () {
        var a = this.that,
        b = a.options,
        d = b.columnTemplate,
        f;
        f = b.colModel;
        f || (this._autoGenColumns(), f = b.colModel);
        b = this.nestedCols(f);
        a.depth = b.depth;
        b = a.colModel = b.colModel;
        f = b.length;
        d && this.extend(b, d);
        this.getHeadersCells();
        this.alignColumns(b, f);
        this.assignRowSpan();
        this._refreshDataIndices();
        a._trigger('CMInit')
    };
    a.alignColumns = function (a, b) {
        for (var d = 0; d < b; d++) {
            var f = a[d];
            if (!f.align) {
                var c = f.dataType;
                !c || 'integer' != c && 'float' != c || (f.align = 'right')
            }
        }
    };
    a.nestedCols = function (a, b, d, f) {
        var c = a.length,
        m = [
        ];
        null == b && (b = 1);
        for (var l = b, g = 0, k = 0, n = 0, r = 0; r < c; r++) {
            var y = a[r];
            y.parent = f ? f : void 0;
            !0 === d && (y.hidden = d);
            var s = y.colModel;
            s && s.length ? (s = this.nestedCols(s, b + 1, y.hidden, y), m = m.concat(s.colModel), 0 < s.colSpan ? (s.depth > l && (l = s.depth), y.colSpan = s.colSpan, g += s.colSpan)  : y.colSpan = 0, n += s.o_colspan, y.o_colspan = s.o_colspan, y.childCount = s.childCount, k += s.childCount)  : (y.hidden ? y.colSpan = 0 : (y.colSpan = 1, g++), n++, y.o_colspan = 1, y.childCount = 0, k++, m.push(y))
        }
        return {
            depth: l,
            colModel: m,
            colSpan: g,
            width: 0,
            childCount: k,
            o_colspan: n
        }
    };
    a.getHeadersCells = function () {
        for (var a = this.that, b = a.options.colModel, d = a.colModel.length, f = a.depth, c = [
        ], m = 0; m < f; m++) {
            c[m] = [
            ];
            for (var l = 0, g = 0, k = 0; k < d; k++) {
                var n;
                if (0 == m) n = b[l];
                 else {
                    var r = c[m - 1][k];
                    if ((n = r.colModel) && 0 != n.length) {
                        for (var r = k - r.leftPos, y = 0, s = 0, z = 0; z < n.length; z++) if (y += 0 < n[z].childCount ? n[z].childCount : 1, r < y) {
                            s = z;
                            break
                        }
                        n = n[s]
                    } else n = r
                }
                r = n.childCount ? n.childCount : 1;
                k == g ? (n.leftPos = k, c[m][k] = n, g += r, b[l + 1] && l++)  : c[m][k] = c[m][k - 1]
            }
        }
        return a.headerCells = c
    };
    a.getDataType = function () {
        var a = this.colModel;
        if (a && a[0]) return 'string' == typeof a[0].dataIndx ? 'JSON' : 'ARRAY'
    };
    a.assignRowSpan = function () {
        for (var a = this.that, b = a.colModel.length, d = a.headerCells, a = a.depth, f = 0; f < b; f++) for (var c = 0; c < a; c++) {
            var m = d[c][f];
            if (!(0 < f && m == d[c][f - 1] || 0 < c && m == d[c - 1][f])) {
                for (var l = 1, g = c + 1; g < a; g++) m == d[g][f] && l++;
                m.rowSpan = l
            }
        }
        return d
    };
    a._autoGenColumns = function () {
        var a = this.that.options,
        b = a.columnTemplate || {
        },
        d = b.dataType,
        c = b.title,
        m = b.width,
        b = a.dataModel.data,
        l = f.validation,
        g = [
        ];
        b && b.length && k.each(b[0], function (a, b) {
            var f = 'string';
            l.isInteger(b) ? f = - 1 < b + - 1 ? 'float' : 'integer' : l.isDate(b) ? f = 'date' : l.isFloat(b) && (f = 'float');
            g.push({
                dataType: d ? d : f,
                dataIndx: a,
                title: c ? c : a,
                width: m ? m : 100
            })
        });
        a.colModel = g
    };
    a._refreshDataIndices = function () {
        for (var a = this.that, b = 'JSON' == this.getDataType() ? !0 : !1, d = {
        }, f = {
        }, c = {
        }, m = a.colModel, l = m.length, g = 0; g <
        l; g++) {
            var k = m[g],
            n = k.dataIndx;
            null == n && (n = 'detail' == k.type ? 'pq_detail' : b ? 'dataIndx_' + g : g, 'pq_detail' == n && (k.dataType = 'object'), k.dataIndx = n);
            d[n] = k;
            f[n] = g;
            k.validations && (c[n] = c)
        }
        a.columns = d;
        a.colIndxs = f;
        a.validations = c
    }
}) (jQuery);
(function (k) {
    var n = k.paramquery,
    g = n._pqGrid.prototype;
    g.exportExcel = function (a) {
        a = a || {
        };
        a.format = 'xlsx';
        return this.exportData(a)
    };
    g.exportCsv = function (a) {
        a = a || {
        };
        a.format = 'csv';
        return this.exportData(a)
    };
    g.exportData = function (a) {
        return (new c(this, a)).Export(a)
    };
    var c = n.cExport = function (a, d) {
        this.that = a;
        this.templates = {
            content_types: '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/><Override PartName="/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/><Override PartName="/worksheet.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/></Types>',
            workbook: ';>wlk udqrhnm<!0-/! dmbnchmf<!TSE,7! rs`mc`knmd<!xdr!>=;vnqjannj wlkmr<!gsso9..rbgdl`r-nodmwlkenql`sr-nqf.roqd`crgddslk.1//5.l`hm! wlkmr9q<!gsso9..rbgdl`r-nodmwlkenql`sr-nqf.neehbdCnbtldms.1//5.qdk`shnmrghor!=;rgddsr=;rgdds m`ld<!O`q`lPtdqx Oqn Du`k! rgddsHc<!0! q9hc<!qHc0!.=;.rgddsr=;.vnqjannj='.replace(/[^\s]/g, function (a) {
                return String.fromCharCode(a.charCodeAt(0) + 1)
            }),
            worksheet: '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"><%=content%></worksheet>',
            rels: '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="workbook.xml"/></Relationships>',
            workbook_rels: '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheet.xml"/></Relationships>'
        }
    },
    g = c.prototype;
    g.getTitle = function (a, d) {
        var b = a.title;
        b ? 'function' == typeof b && (b = b.call(this.that, {
            colIndx: d,
            column: a,
            dataIndx: a.dataIndx,
            Export: !0
        }))  : b = '';
        return b
    };
    g.getRenderVal = function (a, d, b) {
        var f = a.column,
        c = f.exportRender;
        return (d && !1 !== c || c) && (f.render || f._render || f.format) ? b.renderCell(a)  : a.rowData[a.dataIndx]
    };
    g.getXlsMergeCells = function (a, d, b, f) {
        a = a.concat(b.getMergeCells(d, this.curPage, f));
        d = [
        ];
        b = n.toLetter;
        f = a.length;
        d.push('<mergeCells count="' + f + '">');
        for (var c = 0; c < f; c++) {
            var l = a[c],
            l = b(l.c1) + (l.r1 + 1) + ':' + b(l.c2) + (l.r2 + 1);
            d.push('<mergeCell ref="', l, '"/>')
        }
        d.push('</mergeCells>');
        return f ? d.join('')  : ''
    };
    g.getXlsCols = function (a, d) {
        var b = [
        ];
        b.push('<cols>');
        for (var f = 0; f < d; f++) {
            var c = a[f],
            l = f + 1,
            e = c.hidden ? '1' : '0',
            h = c._width;
            h || (h = parseInt(c.width)) || (h = 100);
            b.push('<col min="', l, '" max="', l, '" hidden="', e, '" customWidth="1" width="', h / 7, '"/>')
        }
        b.push('</cols>');
        return b.join('')
    };
    g.getXlsHeader = function (a, d, b) {
        for (var f = [
        ], c = 0; c < d; c++) {
            var l = a[c];
            f.push('<row>');
            for (var e = 0, h = l.length; e < h; e++) {
                var g = l[e];
                if (!1 !== g.copy) {
                    var k = g.o_colspan,
                    n = g.rowSpan,
                    p = this.getTitle(g, e);
                    0 < c && g == a[c - 1][e] ? p = '' : 0 < e && g == a[c][e - 1] ? p = '' : (1 < k || 1 < n) && b.push({
                        r1: c,
                        c1: e,
                        r2: c + n - 1,
                        c2: e + k - 1
                    });
                    f.push('<c t="inlineStr"><is><t><![CDATA[' + p + ']]></t></is></c>')
                }
            }
            f.push('</row>')
        }
        return f.join('')
    };
    g.getXlsBody = function (a, d, b, f, c, l, e, h, g) {
        var k = [
        ],
        n,
        p,
        q,
        x,
        v,
        u,
        r = {
            integer: 'Number',
            'float': 'Number',
            bool: 'bool'
        };
        for (n = 0; n < f; n++) {
            v = b[n];
            p = v.pq_hidden ? 'hidden="1"' : '';
            u = c ? n + l : n;
            q = u - l;
            v = {
                rowIndx: u,
                rowIndxPage: q,
                rowData: v,
                Export: !0
            };
            k.push('<row ' + p + '>');
            for (p = 0; p < d; p++) x = a[p],
            !1 !== x.copy && (q = void 0, e.ismergedCell(u, p) && (e.isRootCell(u, p, 'o') || (q = null)), void 0 === q && (v.colIndx = p, v.column = x, v.dataIndx = x.dataIndx, q = this.getRenderVal(v, h, g)), x = (x = null == q ? null : r[x.dataType]) ? x : 'String', 'Number' == x && (isNaN(1 * q) ? x = 'String' : q *= 1), q = null == q ? '' : q, 'String' == x ? k.push('<c t="inlineStr"><is><t><![CDATA[' + q + ']]></t></is></c>')  : 'Number' == x ? k.push('<c><v>' + q + '</v></c>')  : 'bool' == x ? (q = q ? '1' : '0', k.push('<c t="b"><v>' + q + '</v></c>'))  :
            k.push('<c><v>' + q + '</v></c>'));
            k.push('</row>')
        }
        return k.join('\n')
    };
    g.getXlsContent = function (a, d, b, f, c, l, e, h, g, k, n, p) {
        var q = '<sheetViews><sheetView tabSelected="1" workbookViewId="0"><pane ySplit="<%=a%>" topLeftCell="A<%=b%>" activePane="bottomLeft" state="frozen"/></sheetView></sheetViews>',
        x = this.getXlsCols(a, d),
        v = [
        ],
        u = p ? f : 0,
        q = q.replace('<%=a%>', u),
        q = q.replace('<%=b%>', u + 1);
        b = p ? this.getXlsHeader(b, f, v)  : '';
        a = this.getXlsBody(a, d, c, l, e, h, g, k, n);
        return [q,
        x,
        '<sheetData>',
        b,
        a,
        '</sheetData>',
        this.getXlsMergeCells(v, p ? f : 0, g, l)].join('')
    };
    g.getHtmlHeader = function (a, d) {
        for (var b = [
        ], f, c, l, e, h = 0; h < d; h++) {
            var g = a[h],
            k = null;
            b.push('<tr>');
            for (var n = 0, p = g.length; n < p; n++) f = g[n],
            c = f.colSpan,
            !f.hidden && c && !1 !== f.copy && (l = f.rowSpan, 0 < h && f == a[h - 1][n] || k && 0 < n && f == k || (e = this.getTitle(f, n), k = f, f = (f = f.halign || f.align) ? 'align=' + f : '', b.push('<th colspan=', c, ' rowspan=', l, ' ', f, '>', e, '</th>')));
            b.push('</tr>')
        }
        return b.join('')
    };
    g.getHtmlBody = function (a, d, b, f, c, l, e, h, g) {
        var k = [
        ],
        n,
        p,
        q,
        x,
        v,
        u,
        r;
        for (n = 0; n < f; n++) if (p = b[n], !p.pq_hidden) {
            r = c ? n + l : n;
            u = r - l;
            u = {
                rowIndx: r,
                rowIndxPage: u,
                rowData: p,
                Export: !0
            };
            k.push('<tr>');
            for (p = 0; p < d; p++) if (q = a[p], !q.hidden && !1 !== q.copy) {
                v = '';
                if (e.ismergedCell(r, p)) {
                    if (v = e.isRootCell(r, p)) x = e.getRootCell(r, p, 'o'),
                    x.Export = !0,
                    x = this.getRenderVal(x, h, g);
                     else continue;
                    v = 'rowspan=' + v.rowspan + ' colspan=' + v.colspan + ' '
                } else u.colIndx = p,
                u.column = q,
                u.dataIndx = q.dataIndx,
                x = this.getRenderVal(u, h, g);
                q = q.align;
                v += q ? 'align=' + q : '';
                x = null == x ? '' : x;
                k.push('<td ', v, '>', x, '</td>')
            }
            k.push('</tr>')
        }
        return k.join('')
    };
    g.getHtmlContent = function (a, d, b, f, c, l, e, h, g, k, n, p, q) {
        var x = a.cssRules || '',
        v = this.that.element.find('.pq-grid-table'),
        u = v.css('font-family'),
        v = v.css('font-size'),
        r = [
        ];
        r.push('<!DOCTYPE html><html><head>', '<meta charset="utf-8" />', '<title>', a.title ? a.title : 'ParamQuery Pro', '</title>', '</head><body>', '<style>', 'table{empty-cells:show;font-family:' + u + ';font-size:' + v + ';border-collapse:collapse;}', 'td,th{padding: 5px;border:1px solid #ccc;}', x, '</style>', '<table>');
        r.push(q ? this.getHtmlHeader(f, c, d)  : '');
        r.push(this.getHtmlBody(d, b, l, e, h, g, k, n, p));
        r.push('</table></body></html>');
        return r.join('')
    };
    g.getCsvHeader = function (a, d, b, f) {
        for (var c = [
        ], l = [
        ], e, h, g = 0; g < d; g++) {
            for (var k = a[g], n = null, p = 0, q = k.length; p < q; p++) e = b[p],
            e.hidden || !1 === e.copy || (e = k[p], 0 < g && e == a[g - 1][p] ? c.push('')  : n && 0 < p && e == n ? c.push('')  : (h = (h = this.getTitle(e, p)) ? h.replace(/\"/g, '""')  : '', n = e, c.push('"' + h + '"')));
            l.push(c.join(f));
            c = [
            ]
        }
        return l
    };
    g.getCSVContent = function (a, d, b, f, c, l, e, h, g, k, n, p, q) {
        var x,
        v;
        a = a.separator || ',';
        var u,
        r = [
        ];
        q = q ? this.getCsvHeader(f, c, d, a)  :
        [
        ];
        for (f = 0; f < e; f++) if (v = l[f], !v.pq_hidden) {
            c = h ? f + g : f;
            u = c - g;
            u = {
                rowIndx: c,
                rowIndxPage: u,
                rowData: v,
                Export: !0
            };
            for (v = 0; v < b; v++) x = d[v],
            x.hidden || !1 === x.copy || (k.ismergedCell(c, v) ? k.isRootCell(c, v) ? (x = k.getRootCell(c, v, 'o'), x.Export = !0, x = this.getRenderVal(x, n, p))  : x = '' : (u.colIndx = v, u.column = x, u.dataIndx = x.dataIndx, x = this.getRenderVal(u, n, p)), x = (null == x ? '' : x) + '', x = x.replace(/\"/g, '""'), r.push('"' + x + '"'));
            q.push(r.join(a));
            r = [
            ]
        }
        return q.join('\n')
    };
    g.getJsonContent = function (a, d) {
        function b(a, b) {
            return 0 === (a + '').indexOf('pq_') ? void 0 : b
        }
        return a.nostringify ? d : JSON.stringify(d, a.nopqdata ? b : null, a.nopretty ? null : 2)
    };
    g.postRequest = function (a) {
        var d = a.format,
        b,
        f = a.url,
        c = a.filename || 'pqGrid';
        a.zip && 'xlsx' != d ? (d = new JSZip, d.file(c + '.' + a.format, a.data), a = d.generate({
            type: 'base64',
            compression: 'DEFLATE'
        }), b = !0, d = 'zip')  : (b = a.decodeBase ? !0 : !1, a = a.data);
        f && k.ajax({
            url: f,
            type: 'POST',
            cache: !1,
            data: {
                pq_ext: d,
                pq_data: a,
                pq_decode: b,
                pq_filename: c
            },
            success: function (a) {
                f += (0 < f.indexOf('?') ? '&' : '?') + 'pq_filename=' + a;
                k(document.body).append('<iframe height=\'0\' width=\'0\' frameborder=\'0\' src="' +
                f + '"></iframe>')
            }
        });
        return a
    };
    g.Export = function (a) {
        var d = this.that,
        b = d.options,
        f,
        c,
        l,
        e = this.templates,
        h = b.groupModel;
        c = 'remote' == b.pageModel.type;
        f = d.rowIndxOffset;
        var g = d.iGenerateView,
        k = d.iMerge,
        n = d.colModel,
        p = n.length,
        q = d.headerCells,
        x = q.length,
        h = (this.curPage = h.on && h.dataIndx.length || c) ? d.pdata : b.dataModel.data,
        h = b.summaryData ? h.concat(b.summaryData)  : h,
        v = h.length,
        b = a.url,
        u = a.render,
        r = !a.noheader,
        y = a.format;
        d._trigger('beforeExport', null, a);
        'xlsx' == y ? (f = this.getXlsContent(n, p, q, x, h, v, c, f, k, u, g, r), c = new JSZip, c.file('[Content_Types].xml', e.content_types), c.file('workbook.xml', e.workbook), c.file('worksheet.xml', e.worksheet.replace('<%=content%>', f)), f = c.folder('_rels'), f.file('.rels', e.rels), f.file('workbook.xml.rels', e.workbook_rels), b ? (a.data = c.generate({
            type: 'base64',
            compression: 'DEFLATE'
        }), a.decodeBase = !0)  : l = c.generate({
            type: 'blob',
            compression: 'DEFLATE'
        }))  : a.data = 'json' == y ? this.getJsonContent(a, h)  : 'csv' == y ? this.getCSVContent(a, n, p, q, x, h, v, c, f, k, u, g, r)  : this.getHtmlContent(a, n, p, q, x, h, v, c, f, k, u, g, r);
        l = l ? l : this.postRequest(a);
        d._trigger('exportData', null, a);
        return l
    }
}) (jQuery);
(function (k) {
    var n = k.paramquery,
    g = {
        options: {
            items: [
            ],
            gridInstance: null
        }
    };
    k.widget('paramquery.pqToolbar', g);
    g = n.pqToolbar.prototype;
    g.refresh = function () {
        this.element.empty();
        this._create()
    };
    g._create = function () {
        var c = this.options,
        a = c.gridInstance,
        d = {
            button: 'click',
            select: 'change',
            checkbox: 'change',
            textbox: 'change'
        },
        b,
        f,
        m = c.bootstrap,
        l = m.on,
        e = a.colModel,
        c = c.items,
        h = this.element;
        h.addClass('pq-toolbar');
        for (var g = 0, A = c.length; g < A; g++) {
            var t = c[g],
            p = t.type,
            q = t.value,
            x = t.icon,
            v = t.options || {
            },
            u = t.label,
            r = (f = t.listener) ? [
                f
            ] : t.listeners,
            r = r || [
                function () {
                }
            ];
            f = (f = t.cls) ? f : '';
            f = (f = l && 'button' == p ? m.btn + ' ' + f : f) ? 'class=\'' + f + '\'' : '';
            var y = t.style,
            y = y ? 'style=\'' + y + '\'' : '',
            s = t.attr,
            z = s ? s : '',
            s = u && 'button' != p ? [
                f,
                z
            ] : [
                f,
                z,
                y
            ],
            s = s.join(' '),
            C;
            t.options = v;
            'textbox' == p ? C = k([u ? '<label ' + y + '>' + u : '',
            '<input type=\'text\' ' + s + '>',
            u ? '</label>' : ''].join(''))  : 'textarea' == p ? C = k([u ? '<label ' + y + '>' + u : '',
            '<textarea ' + s + '></textarea>',
            u ? '</label>' : ''].join(''))  : 'checkbox' == p ? C = k([u ? '<label ' + y + '>' : '',
            '<input type=\'checkbox\' ',
            q ?
            'checked=\'checked\' ' : '',
            s,
            '>',
            u ? u + '</label>' : ''].join(''))  : 'separator' == p ? C = k('<span class=\'pq-separator\' ' + [z,
            y].join(' ') + '></span>')  : 'button' == p ? (C = '', l && (C = x ? '<span class=\'glyphicon ' + x + '\'></span>' : ''), C = k('<button type=\'button\' ' + s + '>' + C + u + '</button>'), k.extend(v, {
                label: u ? u : !1,
                icons: {
                    primary: l ? '' : x
                }
            }), C.button(v))  : 'select' == p ? ('function' === typeof v && (v = v.call(a, {
                colModel: e
            })), v = v || [
            ], C = n.select({
                options: v,
                attr: s,
                prepend: t.prepend,
                groupIndx: t.groupIndx,
                valueIndx: t.valueIndx,
                labelIndx: t.labelIndx
            }), C = k([u ? '<label ' + y + '>' + u : '',
            C,
            u ? '</label>' : ''].join('')))  : 'string' == typeof p ? C = k(p)  : 'function' == typeof p && (C = p.call(a, {
                colModel: e,
                cls: f
            }), C = k(C));
            C.appendTo(h);
            'checkbox' !== p && void 0 !== q && (u ? k(C[0].children[0]).val(q)  : C.val(q));
            q = 0;
            for (u = r.length; q < u; q++) for (b in f = r[q], x = {
            }, 'function' == typeof f ? x[d[p]] = f : x = f, x) C.on(b, this._onEvent(a, x[b], t))
        }
    };
    g._onEvent = function (c, a, d) {
        return function (b) {
            d.value = 'checkbox' == d.type ? k(b.target).prop('checked')  : k(b.target).val();
            a.call(c, b)
        }
    };
    g._destroy = function () {
        this.element.empty().removeClass('pq-toolbar').enableSelection()
    };
    g._disable = function () {
        null == this.$disable && (this.$disable = k('<div class=\'pq-grid-disable\'></div>').css('opacity', 0.2).appendTo(this.element))
    };
    g._enable = function () {
        this.$disable && (this.element[0].removeChild(this.$disable[0]), this.$disable = null)
    };
    g._setOption = function (c, a) {
        'disabled' == c && (!0 == a ? this._disable()  : this._enable())
    };
    pq.toolbar = function (c, a) {
        var d = k(c).pqToolbar(a);
        return d.data('paramqueryPqToolbar') || d.data('paramquery-pqToolbar')
    }
}) (jQuery);
(function (k) {
    var n = k.paramquery,
    g = n.pqGrid.prototype.options,
    c = {
        on: !1,
        dirtyClass: 'pq-cell-dirty'
    };
    g.trackModel = g.trackModel || c;
    g = (n.cUCData = function (a) {
        this.that = a;
        this.udata = [
        ];
        this.ddata = [
        ];
        this.adata = [
        ];
        this.options = a.options;
        var d = this;
        a.on('dataAvailable', function (a, f) {
            'filter' != f.source && (d.udata = [
            ], d.ddata = [
            ], d.adata = [
            ])
        })
    }).prototype = new n.cClass;
    g.add = function (a) {
        var d = this.that,
        b = this.adata,
        f = this.ddata;
        a = a.rowData;
        for (var c = this.options.trackModel.dirtyClass, l = d.getRecId({
            rowData: a
        }), e = 0, h = b.length; e < h; e++) {
            var g = b[e];
            if (null != l && g.recId == l) throw 'primary key violation';
            if (g.rowData == a) throw 'same data can\'t be added twice.';
        }
        e = 0;
        for (h = f.length; e < h; e++) if (a == f[e].rowData) {
            f.splice(e, 1);
            return
        }
        var f = [
        ],
        k;
        for (k in a) f.push(k);
        d.removeClass({
            rowData: a,
            dataIndx: f,
            cls: c
        });
        a = {
            recId: l,
            rowData: a
        };
        b.push(a)
    };
    g.update = function (a) {
        var d = this.that,
        b = this.options.trackModel.dirtyClass,
        f = a.rowData || d.getRowData(a),
        c = d.getRecId({
            rowData: f
        }),
        l = a.dataIndx,
        e = a.refresh,
        h = d.columns,
        g = d.getValueFromDataType;
        a = a.row;
        var n = this.udata,
        t = n.slice(0),
        p = !1;
        if (null != c) {
            for (var q = 0, x = n.length; q < x; q++) {
                var v = n[q],
                u = v.oldRow;
                if (v.rowData == f) {
                    p = !0;
                    for (l in a) n = h[l].dataType,
                    x = a[l],
                    x = g(x, n),
                    v = u[l],
                    v = g(v, n),
                    u.hasOwnProperty(l) && v === x ? (n = {
                        rowData: f,
                        dataIndx: l,
                        refresh: e,
                        cls: b
                    }, d.removeClass(n), delete u[l])  : (n = {
                        rowData: f,
                        dataIndx: l,
                        refresh: e,
                        cls: b
                    }, d.addClass(n), u.hasOwnProperty(l) || (u[l] = f[l]));
                    k.isEmptyObject(u) && t.splice(q, 1);
                    break
                }
            }
            if (!p) {
                u = {
                };
                for (l in a) u[l] = f[l],
                n = {
                    rowData: f,
                    dataIndx: l,
                    refresh: e,
                    cls: b
                },
                d.addClass(n);
                n = {
                    rowData: f,
                    recId: c,
                    oldRow: u
                };
                t.push(n)
            }
            this.udata = t
        }
    };
    g['delete'] = function (a) {
        var d = this.that,
        b = a.rowIndx,
        f = a.rowIndxPage,
        c = d.rowIndxOffset,
        b = null == b ? f + c : b,
        f = 'remote' == d.options.pageModel.type ? null == f ? b - c : f : b,
        c = this.adata,
        l = this.ddata;
        a = d.getRowData(a);
        for (var d = 0, e = c.length; d < e; d++) if (c[d].rowData == a) {
            c.splice(d, 1);
            return
        }
        l.push({
            indx: f,
            rowData: a,
            rowIndx: b
        })
    };
    g.isDirty = function (a) {
        var d = this.udata,
        b = this.adata,
        f = this.ddata,
        c = !1;
        if (a = this.that.getRowData(a)) for (b = 0; b < d.length; b++) {
            if (a == d[b].rowData) {
                c = !0;
                break
            }
        } else if (d.length || b.length || f.length) c = !0;
        return c
    };
    g.getChangesValue = function (a) {
        a = a || {
        };
        var d = this.that;
        a = a.all;
        for (var b = this.udata, f = this.adata, c = this.ddata, l = [
        ], e = [
        ], h = [
        ], g = [
        ], n = [
        ], t = [
        ], p = 0, q = c.length; p < q; p++) {
            var x = c[p],
            v = x.rowData,
            u = {
            };
            n.push(v);
            for (var r in v) 0 != r.indexOf('pq_') && (u[r] = v[r]);
            t.push(u)
        }
        p = 0;
        for (q = b.length; p < q; p++) if (x = b[p], c = x.oldRow, v = x.rowData, - 1 == k.inArray(v, n) && - 1 == k.inArray(v, l)) {
            u = {
            };
            if (!1 !== a) for (r in v) 0 != r.indexOf('pq_') && (u[r] = v[r]);
             else {
                for (r in c) u[r] = v[r];
                u[d.options.dataModel.recIndx] = x.recId
            }
            l.push(v);
            e.push(u);
            h.push(c)
        }
        p = 0;
        for (q = f.length; p < q; p++) {
            x = f[p];
            v = x.rowData;
            u = {
            };
            for (r in v) 0 != r.indexOf('pq_') && (u[r] = v[r]);
            g.push(u)
        }
        return {
            updateList: e,
            addList: g,
            deleteList: t,
            oldList: h
        }
    };
    g.getChanges = function () {
        for (var a = this.udata, d = this.adata, b = this.ddata, f = k.inArray, c = [
        ], l = [
        ], e = [
        ], h = [
        ], g = 0, n = b.length; g < n; g++) {
            var t = b[g],
            t = t.rowData;
            h.push(t)
        }
        g = 0;
        for (n = a.length; g < n; g++) t = a[g],
        b = t.oldRow,
        t = t.rowData,
        - 1 == f(t, h) && - 1 == f(t, c) && (c.push(t), l.push(b));
        g = 0;
        for (n = d.length; g < n; g++) t = d[g],
        t = t.rowData,
        e.push(t);
        return {
            updateList: c,
            addList: e,
            deleteList: h,
            oldList: l
        }
    };
    g.getChangesRaw = function () {
        var a = this.adata,
        d = this.ddata,
        b = {
            updateList: [
            ],
            addList: [
            ],
            deleteList: [
            ]
        };
        b.updateList = this.udata;
        b.addList = a;
        b.deleteList = d;
        return b
    };
    g.commitAdd = function (a, d) {
        for (var b = this.that, f = b.colModel, c = f.length, l = this.adata, e = k.inArray, h = l.length, g = b.getValueFromDataType, b = [
        ], n = a.length, t = [
        ], p = 0; p < n; p++) for (var q = a[p], x = 0; x < h; x++) {
            var v = l[x].rowData,
            u = !0;
            if ( - 1 == e(v, t)) {
                for (var r = 0; r < c; r++) {
                    var y = f[r],
                    s = y.dataType,
                    z = y.dataIndx;
                    if (!y.hidden && z != d && (y = v[z], y = g(y, s), z = q[z], z = g(z, s), y !== z)) {
                        u = !1;
                        break
                    }
                }
                if (u) {
                    x = {
                    };
                    u = {
                    };
                    x[d] = q[d];
                    u[d] = v[d];
                    b.push({
                        type: 'update',
                        rowData: v,
                        oldRow: u,
                        newRow: x
                    });
                    t.push(v);
                    break
                }
            }
        }
        f = [
        ];
        for (x = 0; x < h; x++) v = l[x].rowData,
        - 1 == e(v, t) && f.push(l[x]);
        this.adata = f;
        return b
    };
    g.commitUpdate = function (a, d) {
        for (var b = this.that, f = this.options.trackModel.dirtyClass, c = this.udata, l = c.length, e = a.length, h = [
        ], g = 0; g < l; g++) {
            var n = c[g],
            t = n.rowData,
            n = n.oldRow;
            if ( - 1 == k.inArray(t, h)) for (var p = 0; p < e; p++) if (t[d] == a[p][d]) {
                h.push(t);
                for (var q in n) b.removeClass({
                    rowData: t,
                    dataIndx: q,
                    cls: f
                })
            }
        }
        b = [
        ];
        for (g = 0; g < l; g++) t = c[g].rowData,
        - 1 == k.inArray(t, h) && b.push(c[g]);
        this.udata = b;
        return []
    };
    g.commitDelete = function (a, d) {
        for (var b = this.ddata, f = b.length, c = this.udata, l, e, h; f--; ) {
            l = b[f].rowData;
            e = l[d];
            h = a.length;
            if (!h) break;
            for (; h--; ) if (e == a[h][d]) {
                a.splice(h, 1);
                b.splice(f, 1);
                for (e = c.length; e--; ) c[e].rowData == l && c.splice(e, 1);
                break
            }
        }
    };
    g.commitUpdateAll = function () {
        for (var a = this.that, d = this.options.trackModel.dirtyClass, b = this.udata, f = 0, c = b.length; f < c; f++) {
            var l = b[f],
            e = l.oldRow,
            l = l.rowData,
            h;
            for (h in e) a.removeClass({
                rowData: l,
                dataIndx: h,
                cls: d
            })
        }
        this.udata = [
        ]
    };
    g.commitAddAll = function () {
        this.adata = [
        ]
    };
    g.commitDeleteAll = function () {
        for (var a = this.ddata, d = this.udata, b = d.length, f, c = a.length, l = 0; 0 < b && l < c; l++) {
            for (f = a[l].rowData; b--; ) d[b].rowData == f && d.splice(b, 1);
            b = d.length
        }
        a.length = 0
    };
    g.commit = function (a) {
        var d = this.that,
        b = a ? a.history : null,
        b = null == b ? !1 : b,
        f = [
        ],
        f = [
        ],
        c = [
        ],
        l = d.options.dataModel.recIndx;
        if (null == a) this.commitAddAll(),
        this.commitUpdateAll(),
        this.commitDeleteAll();
         else {
            var e = a.type;
            a = a.rows;
            'add' == e ? a ? f = this.commitAdd(a, l)  : this.commitAddAll()  : 'update' == e ? a ? c = this.commitUpdate(a, l)  : this.commitUpdateAll()  : 'delete' == e && (a ? this.commitDelete(a, l)  : this.commitDeleteAll())
        }
        f = f.concat(c);
        f.length && (d._digestData({
            source: 'commit',
            checkEditable: !1,
            track: !1,
            history: b,
            rowList: f
        }), d.refreshView())
    };
    g.rollbackAdd = function (a, d) {
        for (var b = this.adata, f = [
        ], c = 0, l = b.length; c < l; c++) f.push({
            type: 'delete',
            rowData: b[c].rowData
        });
        this.adata = [
        ];
        return f
    };
    g.rollbackDelete = function (a, d) {
        for (var b = this.ddata, f = [
        ], c = b.length - 1; 0 <= c; c--) {
            var l = b[c];
            f.push({
                type: 'add',
                rowIndx: l.rowIndx,
                newRow: l.rowData
            })
        }
        this.ddata = [
        ];
        return f
    };
    g.rollbackUpdate = function (a, d) {
        for (var b = this.that, f = this.options.trackModel.dirtyClass, c = this.udata, l = [
        ], e = 0, h = c.length; e < h; e++) {
            var g = c[e],
            k = g.rowData,
            n = {
            },
            p = g.oldRow;
            if (null != g.recId) {
                var g = [
                ],
                q;
                for (q in p) n[q] = k[q],
                g.push(q);
                b.removeClass({
                    rowData: k,
                    dataIndx: g,
                    cls: f,
                    refresh: !1
                });
                l.push({
                    type: 'update',
                    rowData: k,
                    newRow: p,
                    oldRow: n
                })
            }
        }
        this.udata = [
        ];
        return l
    };
    g.rollback = function (a) {
        var d = this.that,
        b = d.options.pageModel,
        f = a && null != a.refresh ? a.refresh : !0;
        a = a && null != a.type ? a.type : null;
        var c = [
        ],
        c = [
        ],
        l = [
        ],
        e = [
        ],
        h = d.options.dataModel.data;
        if (null == a || 'update' == a) l = this.rollbackUpdate(b, h);
        if (null == a || 'delete' == a) c = this.rollbackDelete(b, h);
        if (null == a || 'add' == a) e = this.rollbackAdd(b, h);
        c = c.concat(e, l);
        d._digestData({
            history: !1,
            allowInvalid: !0,
            checkEditable: !1,
            source: 'rollback',
            track: !1,
            rowList: c
        });
        f && d.refreshView()
    };
    n = n.pqGrid.prototype;
    n.getChanges = function (a) {
        this.blurEditor({
            force: !0
        });
        if (a) {
            var d = a.format;
            if (d) {
                if ('byVal' == d) return this.iUCData.getChangesValue(a);
                if ('raw' == d) return this.iUCData.getChangesRaw()
            }
        }
        return this.iUCData.getChanges()
    };
    n.rollback = function (a) {
        this.blurEditor({
            force: !0
        });
        this.iUCData.rollback(a)
    };
    n.isDirty = function (a) {
        return this.iUCData.isDirty(a)
    };
    n.commit = function (a) {
        this.iUCData.commit(a)
    };
    n.updateRow = function (a) {
        for (var d = a.rowList || [
            {
                rowIndx: a.rowIndx,
                newRow: a.newRow || a.row,
                rowData: a.rowData,
                rowIndxPage: a.rowIndxPage
            }
        ], b = [
        ], f = 0, c = d.length; f < c; f++) {
            var l = this.normalize(d[f]),
            e = l.newRow,
            h = l.rowData,
            g = {
            };
            if (h) {
                for (var k in e) g[k] = h[k];
                l.oldRow = g;
                l.type = 'update';
                b.push(l)
            }
        }
        if (!b.length || !1 === this._digestData({
            source: a.source || 'update',
            history: a.history,
            checkEditable: a.checkEditable,
            track: a.track,
            allowInvalid: a.allowInvalid,
            rowList: b
        })) return !1;
        !1 !== a.refresh && (1 < b.length ? this.refresh()  : this.refreshRow({
            rowIndx: b[0].rowIndx
        }))
    };
    n.getRecId = function (a) {
        a.dataIndx = this.options.dataModel.recIndx;
        a = this.getCellData(a);
        return null ==
        a ? null : a
    };
    n.getCellData = function (a) {
        var d = a.rowData || this.getRowData(a);
        a = a.dataIndx;
        return d ? d[a] : null
    };
    n.getRowData = function (a) {
        if (!a) return null;
        var d = a.rowData;
        if (null != d) return d;
        d = a.recId;
        if (null == d) {
            var d = a.rowIndx,
            d = null != d ? d : a.rowIndxPage + this.rowIndxOffset,
            b = this.get_p_data() [d];
            return b
        }
        b = this.options.dataModel;
        a = b.recIndx;
        for (var f = b.data, c = 0, l = f.length; c < l; c++) if (b = f[c], b[a] == d) return b;
        return null
    };
    n.deleteRow = function (a) {
        for (var d = a.rowList || [
            {
                rowIndx: a.rowIndx,
                rowIndxPage: a.rowIndxPage
            }
        ], b = [
        ], f = 0, c = d.length; f < c; f++) {
            var l = this.normalize(d[f]);
            l.oldRow = l.rowData;
            l.type = 'delete';
            b.push(l)
        }
        if (!b.length) return !1;
        this._digestData({
            source: a.source || 'delete',
            history: a.history,
            track: a.track,
            rowList: b
        });
        !1 !== a.refresh && this.refreshView()
    };
    n.addRow = function (a) {
        var d = a.rowList || [
            {
                rowIndx: a.rowIndx,
                rowIndxPage: a.rowIndxPage,
                newRow: a.newRow || a.rowData
            }
        ],
        b = [
        ],
        f = this.options.dataModel,
        c = f.data;
        null == c && (f.data = [
        ], c = f.data);
        for (var f = 0, l = d.length; f < l; f++) {
            var e = this.normalize(d[f]);
            e.type = 'add';
            b.push(e)
        }
        if (!b.length || !1 === this._digestData({
            source: a.source || 'add',
            history: a.history,
            track: a.track,
            checkEditable: a.checkEditable,
            rowList: b
        })) return !1;
        !1 !== a.refresh && this.refreshView();
        a = b[0].rowIndx;
        return null == a ? c.length - 1 : a
    }
}) (jQuery);
(function (k) {
    var n = function (a) {
        this.focusSelection = null
    };
    n.prototype.inViewRow = function (a) {
        var d = this.that,
        b = d.finalV;
        return a < d.options.freezeRows ? !0 : a >= d.initV && a <= b
    };
    var g = function (a) {
        this.that = a;
        this.options = a = a.options;
        this.selection = [
        ];
        this.hclass = ' pq-state-select ' + (a.bootstrap.on ? '' : 'ui-state-highlight')
    };
    k.paramquery.cRows = g;
    var c = function (a) {
        var d = a.options;
        this.that = a;
        this.selection = [
        ];
        this.hclass = 'pq-state-select ' + (d.bootstrap.on ? '' : 'ui-state-highlight')
    };
    k.paramquery.cCells = c;
    c = c.prototype = new n;
    n = g.prototype = new n;
    n.isSelected = function (a) {
        return (a = a.rowData || this.that.getRowData(a)) ? !0 === a.pq_rowselect : null
    };
    n.selectRange = function (a) {
        var d = a.range,
        b = d.r1,
        d = d.r2;
        a = a.evt;
        var f = [
        ];
        if (b > d) var c = b,
        b = d,
        d = c;
        for (; b <= d; b++) f.push({
            rowIndx: b
        });
        this.add({
            rows: f,
            evt: a
        })
    };
    c.removeAll = function (a) {
        var d = this.that;
        a = d.get_p_data();
        var b = this.hclass;
        if (a && a.length) for (d.$tbl && d.$tbl.children().children().children().removeClass(b), d = 0, b = a.length; d < b; d++) {
            var f = a[d];
            f && delete f.pq_cellselect
        }
    };
    n.removeAll = function (a) {
        a = a || {
        };
        var d = this.that,
        b = a.all,
        f = this.hclass,
        c = d.get_p_data();
        if (c && c.length) for (a.refresh && d.$tbl && d.$tbl.children().children().removeClass(f), c = b ? c : d.pdata, a = 0, d = c.length; a < d; a++) (b = c[a]) && delete b.pq_rowselect
    };
    c.isSelected = function (a) {
        var d = this.that,
        b = a.rowData || d.getRowData(a),
        f = a.dataIndx;
        a = a.colIndx;
        if (null == a && null == f || null == b) return null;
        f = null == f ? d.colModel[a].dataIndx : f;
        return !0 == (b.pq_cellselect && b.pq_cellselect[f])
    };
    n.getSelection = function () {
        for (var a = this.that, d = a.selection().address(), b = [
        ], f = 0, c = d.length; f < c; f++) {
            var l = d[f];
            if ('row' == l.type) for (var e = l.r2, l = l.r1; l <= e; l++) {
                var h = a.getRowData({
                    rowIndx: l
                });
                b.push({
                    rowIndx: l,
                    rowData: h
                })
            }
        }
        return b
    };
    c.getSelection = function () {
        for (var a = this.that, d = a.selection(), b = a.colModel, d = d.address(), f = [
        ], c = 0, l = d.length; c < l; c++) {
            var e = d[c],
            h = e.type;
            if ('block' == h || 'cell' == h || 'column' == h) for (var h = e.r2, g = e.c1, k = e.c2, e = e.r1; e <= h; e++) for (var n = a.getRowData({
                rowIndx: e
            }), p = g; p <= k; p++) f.push({
                rowIndx: e,
                rowData: n,
                colIndx: p,
                dataIndx: b[p].dataIndx
            })
        }
        return f
    };
    c.inViewCell = function (a, d) {
        var b = this.that,
        f = b.options.freezeCols;
        return this.inViewRow(a) ? d < f || d >= b.initH && d <= b.finalH : !1
    };
    c._add = function (a) {
        var d = this.that;
        a = d.normalize(a);
        var b = a.rowIndxPage,
        f = a.rowData,
        c,
        l = a.colIndx,
        e = a.dataIndx,
        h = this.isSelected({
            rowData: f,
            dataIndx: e
        });
        if (null == h) return !1;
        var g = d.iMerge.ismergedCell(a.rowIndx, l) || this.inViewCell(b, l);
        !1 === h && (g && (d = d.getCell({
            rowIndxPage: b,
            colIndx: l
        })) && d.addClass(this.hclass), c = (f.pq_cellselect = f.pq_cellselect || {
        }) [e] = !0);
        if (c) return a
    };
    n._add = function (a) {
        var d = this.that,
        b = d.normalize(a),
        f = b.rowIndxPage;
        a = b.rowData;
        var c = this.isSelected({
            rowData: a
        });
        b.rowIndxPage = f;
        if (null == c) return !1;
        b = this.inViewRow(f);
        !1 === c && (!a.pq_hidden && b && (d = d.getRow({
            rowIndxPage: f
        }), d.length && d.addClass(this.hclass)), a.pq_rowselect = !0)
    };
    c.add = function (a) {
        this._add(a)
    };
    n.add = function (a) {
        var d = a.rows;
        if (d && 'function' == typeof d.push) {
            a = 0;
            for (var b = d.length; a < b; a++) {
                var f = d[a];
                f.trigger = !1;
                this._add(f)
            }
        } else this._add(a)
    };
    n._remove = function (a) {
        var d = this.that,
        b = d.normalize(a);
        a = b.rowIndx;
        var f = b.rowIndxPage,
        c = b.rowData,
        b = b.$tr;
        if (this.isSelected({
            rowData: c
        })) return this.inViewRow(f) && (b = d.getRow({
            rowIndxPage: f
        })) && (b.removeClass(this.hclass), b.removeAttr('tabindex')),
        c.pq_rowselect = !1,
        {
            rowIndx: a,
            rowData: c
        }
    };
    n.remove = function (a) {
        var d = a.rows;
        if (d && 'function' == typeof d.push) {
            a = 0;
            for (var b = d.length; a < b; a++) {
                var f = d[a];
                f.trigger = !1;
                this._remove(f)
            }
        } else this._remove(a)
    };
    c.selectBlock = function (a) {
        var d = this.that,
        b = this.hclass,
        f = a.range,
        c = f.r1,
        l = f.c1,
        e = f.r2,
        f = f.c2,
        h = d.initH,
        g = d.finalH,
        n = d.options.freezeCols,
        t = [
        ],
        p = d.colModel,
        q = [
        ];
        a = a.remove ? !0 : !1;
        for (var x = l; x <= f; x++) t[x] = p[x].dataIndx;
        for (; c <= e; c++) if (p = d.normalize({
            rowIndx: c
        }), x = p.rowData, p = p.rowIndxPage, x) {
            var v = x.pq_cellselect = x.pq_cellselect || {
            };
            if (this.inViewRow(p)) for (x = l; x <= f; x++) {
                var u = t[x];
                if (a && v[u] || !a && !v[u]) {
                    if (x < n || x >= h && x <= g) {
                        var r = d.getCell({
                            rowIndxPage: p,
                            colIndx: x
                        });
                        r.length && q.push(r[0])
                    }
                    v[u] = a ? void 0 : !0
                }
            } else for (x = l; x <= f; x++) u = t[x],
            v[u] = a ? void 0 : !0
        }
        if (q.length) k(q) [a ? 'removeClass' : 'addClass'](b)
    }
}) (jQuery);
(function (k) {
    var n = !0;
    k(function () {
        var c = k('<input type=\'checkbox\' style=\'position:fixed;left:-50px;top:-50px;\'/>').appendTo(document.body);
        c[0].indeterminate = !0;
        c.on('change', function () {
            n = !1
        });
        c.click();
        c.remove()
    });
    var g = (k.paramquery.cCheckBoxColumn = function (c, a) {
        var d = this;
        this.that = c;
        this.options = c.options;
        this.column = a;
        a.cb = k.extend({
        }, {
            all: !1,
            header: !1,
            select: !1,
            check: !0,
            uncheck: !1
        }, a.cb);
        a._render = function (b) {
            var d = b.rowData;
            if (!d.pq_gtitle && !d.pq_gsummary) return '<input type=\'checkbox\' ' + (a.cb.check === b.cellData ? 'checked' : '') + ' />'
        };
        this.dataIndx = a.dataIndx;
        var b = c.element,
        f = c.eventNamespace;
        c.on('dataAvailable', function () {
            c.one('dataReady', function () {
                return d._onDataReady()
            })
        }).on('dataReady', function () {
            d.setValCBox()
        });
        b.on('change' + f, function (a) {
            var b = a.target;
            if ('checkbox' == b.type && k(b).closest('.pq-grid') [0] == this) return d.onCheckBoxChange(a)
        });
        c.on('cellKeyDown', function (a, b) {
            return d.onCellKeyDown(a, b)
        });
        c.on('refreshHeader', function (a, b) {
            return d.refreshHeader(a, b)
        })
    }).prototype = new k.paramquery.cClass;
    g.hasHeaderChkBox = function () {
        return this.column.cb.header
    };
    g.setValCBox = function () {
        if (this.hasHeaderChkBox()) {
            var c = this.that,
            a = this.options,
            d = this.dataIndx,
            b = this.column.cb,
            f = b.all,
            m = c.rowIndxOffset,
            m = 'remote' != a.pageModel.type && f ? 0 : m,
            a = f ? a.dataModel.data : c.pdata,
            f = null,
            l = 0,
            e = 0;
            if (a) {
                for (var h = 0, g = 0, k = a.length; g < k; g++) {
                    var n = a[g],
                    p = g + m;
                    c.isEditableRow({
                        rowIndx: p
                    }) && c.isEditableCell({
                        rowIndx: p,
                        dataIndx: d
                    }) && (h++, n[d] === b.check ? l++ : e++)
                }
                l == h && h ? f = !0 : e == h && (f = !1);
                this.$inp && this.$inp.pqval({
                    val: f
                })
            }
        }
    };
    g.onHeaderChange = function (c) {
        for (var a = k(c.target), d = this.that, b = this.column, f = b.dataIndx, m = d.options, l = b.cb, e = l.all, h = e ? m.dataModel.data : d.pdata, g = d.rowIndxOffset, g = 'remote' != m.pageModel.type && e ? 0 : g, m = [
        ], b = {
            column: b,
            dataIndx: f,
            source: 'header'
        }, a = a[0].checked, e = 0, n = h.length; e < n; e++) {
            var t = e + g,
            p = h[e],
            q = {
            },
            x = {
            };
            q[f] = a ? l.check : l.uncheck;
            x[f] = p[f];
            m.push({
                rowIndx: t,
                rowData: p,
                newRow: q,
                oldRow: x,
                type: 'update'
            })
        }
        f = {
            rowList: m,
            source: 'checkbox'
        };
        f.history = f.track = l.select ? !1 : null;
        b.check = a;
        b.rows = m;
        if (!1 === d._trigger('beforeCheck', c, b) || !1 === d._digestData(f)) return d.refreshHeader(),
        !1;
        d.refresh({
            header: !1
        });
        m = b.rows = f.rowList;
        d._trigger('check', c, b);
        l.select && d.selection({
            type: 'row',
            method: a ? 'add' : 'remove',
            rows: m
        })
    };
    g.refreshHeader = function (c, a) {
        var d = this;
        if (this.hasHeaderChkBox()) {
            var b = this.that;
            if (b.pdata && (b = b.getCellHeader({
                dataIndx: this.dataIndx
            }))) {
                var f = this.$inp = b.find('input');
                this.setValCBox();
                if (n) f.on('click', function (a) {
                    null == f.data('pq_value') && (f[0].checked = !0, f.data('pq_value', !0), d.onHeaderChange(a))
                });
                f.on('change', function (a) {
                    d.onHeaderChange(a)
                })
            }
        }
    };
    g._onDataReady = function () {
        var c = this.that,
        a = this.options,
        d = a.dataModel.data,
        a = 'remote' == a.pageModel.type ? c.rowIndxOffset : 0,
        b = this.column,
        f = b.cb,
        m = b.dataIndx;
        if (null != m && d) {
            for (var g = [
            ], e = 0, h = d.length; e < h; e++) {
                var k = d[e];
                k[m] === f.check && g.push({
                    rowIndx: e + a,
                    rowData: k
                })
            }
            if (!1 !== c._trigger('check', null, {
                rows: g,
                column: b,
                dataIndx: m,
                source: 'dataAvailable'
            }) && f.select) {
                for (e = 0; e < h; e++) k = d[e],
                k[m] === f.check && (k.pq_rowselect = !0);
                c.selection().refresh()
            }
        }
        this.setValCBox()
    };
    g.rowSelect = function (c, a) {
        var d = this.that,
        b = a.rows,
        f = a.rowData,
        m = this.dataIndx;
        if (b) for (var g = 0, e = b.length; g < e; g++) {
            var f = b[g],
            h = f.rowIndx,
            f = f.rowData;
            f[m] = !0;
            d.refreshCell({
                rowIndx: h,
                dataIndx: m
            })
        } else f && (f[m] = !0, h = a.rowIndx, d.refreshCell({
            rowIndx: h,
            dataIndx: m
        }));
        this.setValCBox()
    };
    g.rowUnSelect = function (c, a) {
        var d = this.that,
        b = a.rows,
        f = a.rowData,
        m = this.dataIndx;
        if (b) for (var g = 0, e = b.length; g < e; g++) {
            var f = b[g],
            h = f.rowIndx,
            f = f.rowData;
            f[m] = !1;
            d.refreshCell({
                rowIndx: h,
                dataIndx: m
            })
        } else f && (f[m] = !1, h = a.rowIndx, d.refreshCell({
            rowIndx: h,
            dataIndx: m
        }));
        this.setValCBox()
    };
    g.onCheckBoxChange = function (c) {
        var a = this.that,
        d = this.column.cb,
        b = k(c.target),
        f = b.closest('.pq-grid-cell');
        if (f.length) {
            var f = a.getCellIndices({
                $td: f
            }),
            f = a.normalize(f),
            m = f.rowData,
            g = f.rowIndx,
            e = f.dataIndx;
            if (e == this.dataIndx) {
                var b = b[0].checked,
                h = {
                },
                n = {
                };
                h[e] = b ? d.check : d.uncheck;
                n[e] = m[e];
                m = [
                    {
                        rowData: m,
                        rowIndx: g,
                        oldRow: n,
                        newRow: h,
                        type: 'update'
                    }
                ];
                f.check = b;
                f.rows = m;
                if (!1 === a._trigger('beforeCheck', c, f)) return a.refreshCell({
                    rowIndx: g,
                    dataIndx: e
                }),
                !1;
                m = {
                    source: 'checkbox',
                    rowList: m
                };
                m.history = m.track = d.select ? !1 : null;
                if (!1 === a._digestData(m)) return a.refreshCell({
                    rowIndx: g,
                    dataIndx: e
                }),
                !1;
                a.refreshRow({
                    rowIndx: g
                });
                m = f.rows = m.rowList;
                a._trigger('check', c, f);
                d.select && a.selection({
                    type: 'row',
                    method: b ? 'add' : 'remove',
                    rows: m
                });
                this.setValCBox()
            }
        }
    };
    g.onCellKeyDown = function (c, a) {
        if (a.dataIndx == this.dataIndx && (13 == c.keyCode || 32 == c.keyCode)) return k(c.originalEvent.target).find('input').click(),
        !1
    }
}) (jQuery);
(function () {
    for (var k = 0, n = [
        'moz',
        'webkit'
    ], g = 0; !window.requestAnimationFrame && g < n.length; g++) window.requestAnimationFrame = window[n[g] + 'RequestAnimationFrame'],
    window.cancelAnimationFrame = window[n[g] + 'CancelAnimationFrame'] || window[n[g] + 'CancelRequestAnimationFrame'];
    window.requestAnimationFrame || (window.requestAnimationFrame = function (c) {
        var a = (new Date).getTime(),
        a = Math.max(0, 16 - (a - k));
        return window.setTimeout(function () {
            k = (new Date).getTime();
            c()
        }, a)
    });
    window.cancelAnimationFrame || (window.cancelAnimationFrame = function (c) {
        clearTimeout(c)
    })
}) ();
(function (k) {
    function n(c) {
        this.that = c;
        var a = this;
        this.borderBottomExtra = this.borderBottom = this.borderLeftExtra = this.borderLeft = this.borderTopExtra = this.borderTop = this.borderRightExtra = this.borderRight = this.scrollLeft = this.scrollTop = 0;
        this.maxBorder = 5000;
        this.rowht = c.options.rowHeight;
        this.colwd = 60;
        c.on('contMouseDown', function (d, b) {
            return a._onContMouseDown(d, b)
        }).on('mouseDrag', function (d, b) {
            return a._onMouseDrag(d, b)
        }).on('mouseStop', function (d, b) {
            return a._onMouseStop(d, b)
        }).on('mousePQUp', function (d, b) {
            return a._onMousePQUp(d, b)
        }).on('rowMouseDown', function (d, b) {
            return a._onRowMouseDown(d, b)
        }).on('cellMouseDown', function (d, b) {
            return a._onCellMouseDown(d, b)
        }).on('refresh', function (a, b) {
            setTimeout(function () {
                c.element && c.focus()
            }, 0)
        }).on('cellMouseEnter', function (d, b) {
            return a._onCellMouseEnter(d, b)
        }).on('rowMouseEnter', function (d, b) {
            return a._onRowMouseEnter(d, b)
        })
    }
    k.paramquery.cMouseSelection = n;
    var g = n.prototype = new k.paramquery.cClass;
    g.inViewPort = function (c) {
        var a = this.that.iRefresh,
        d = a.getEContHt(),
        a = a.getEContWd() + 1;
        c = c[0];
        var b = this.scrollLeft;
        if (d >= c.offsetTop + c.offsetHeight + this.marginTop) if ('TD' == c.nodeName.toUpperCase()) {
            if (a >= c.offsetLeft + c.offsetWidth + b) return !0
        } else return !0
    };
    g._onCellMouseDown = function (c, a) {
        var d = this.that,
        b = a.rowIndx,
        f = d.iSelection,
        m = a.colIndx,
        g = d.options.selectionModel,
        e = g.mode;
        if ('cell' != g.type) d.focus(a);
         else if (null != m) return f = f.address() [0],
        c.shiftKey && 'single' != e && f ? (e = f.firstR, f = f.firstC, d.range({
            r1: e,
            c1: f,
            r2: b,
            c2: m,
            firstR: e,
            firstC: f
        }).select())  : (this.mousedown = {
            r1: b,
            c1: m
        }, d.range({
            r1: b,
            c1: m,
            firstR: b,
            firstC: m
        }).select()),
        d.focus(a),
        !0
    };
    g._onCellMouseEnter = function (c, a) {
        var d = this.that,
        b = d.options.selectionModel,
        f = b.type,
        b = b.mode;
        if (this.mousedown && 'single' != b) {
            if ('cell' == f) {
                var f = this.mousedown,
                b = f.r1,
                m = f.c1,
                g = a.rowIndx,
                e = a.colIndx;
                if (b == g && m == e || f.r2 == g && f.c2 == e) return;
                this.mousedown.r2 = g;
                this.mousedown.c2 = e;
                d.scrollCell({
                    rowIndx: g,
                    colIndx: e
                });
                d.range({
                    r1: b,
                    c1: m,
                    r2: g,
                    c2: e,
                    firstR: b,
                    firstC: m
                }).select()
            }
            d.focus(a)
        }
    };
    g._onRowMouseEnter = function (c, a) {
        var d = this.that,
        b = d.options.selectionModel,
        f = b.mode;
        'row' == b.type && this.mousedown && 'single' != f && (b = this.mousedown.r1, f = a.rowIndx, b == f ? d.range({
            r1: b,
            firstR: b
        }, !1).select()  : this.mousedown.r2 != f && (this.mousedown.r2 = f, d.scrollRow({
            rowIndx: f
        }), d.range({
            r1: b,
            r2: f,
            firstR: b
        }, !1).select()))
    };
    g._onRowMouseDown = function (c, a) {
        var d = this.that,
        b = a.rowIndx,
        f = d.iSelection,
        g;
        g = d.options.selectionModel;
        var l = k(c.originalEvent.target).hasClass('pq-grid-number-cell'),
        e = g.mode;
        if (('row' == g.type || g.row && l) && null != b) return g = d.iSelection.address(),
        c.shiftKey ? ((f = g.length) && 'row' == g[f - 1].type && (f = g[f - 1], f.r1 = f.firstR, f.r2 = b, f.c1 = f.c2 = f.type = void 0), d.range(g).select())  : (c.ctrlKey || c.metaKey) && 'single' != e ? (g = d.iRows.isSelected({
            rowIndx: b
        }), f[g ? 'removeRow' : 'add']({
            r1: b,
            firstR: b
        }))  : (this.mousedown = {
            r1: b,
            y1: c.pageY,
            x1: c.pageX
        }, d.range({
            r1: b,
            firstR: b
        }, !1).select()),
        l && setTimeout(function () {
            d.focus({
                rowIndxPage: a.rowIndxPage,
                colIndx: d.getFirstVisibleCI(!0)
            })
        }, 0),
        !0
    };
    g._onContMouseDown = function (c, a) {
        this.that.options.swipeModel.on && (this._stopSwipe(!0), this.swipedown = {
            x: c.pageX,
            y: c.pageY
        });
        return !0
    };
    g._onMousePQUp = function (c, a) {
        this.mousedown = null
    };
    g._stopSwipe = function (c) {
        c && (this.swipedownPrev = this.swipedown = null);
        window.clearInterval(this.intID);
        window.cancelAnimationFrame(this.intID);
        this.intID = null
    };
    g._onMouseStop = function (c, a) {
        var d = this,
        b = this.that;
        if (this.swipedownPrev) {
            var f = b.options.swipeModel,
            b = this.swipedownPrev,
            g = b.ts,
            l = (new Date).getTime() - g,
            e = c.pageX,
            h = c.pageY,
            k = e - b.x,
            n = h - b.y;
            if (Math.sqrt(k * k + n * n) / l > f.ratio) {
                var t = 0,
                p = f.repeat;
                d._stopSwipe();
                var q = function () {
                    t += f.speed;
                    p--;
                    d._onMouseDrag({
                        pageX: e + t * k / l,
                        pageY: h + t * n / l
                    });
                    0 < p ? d.intID = window.requestAnimationFrame(q)  : d._stopSwipe(!0)
                };
                q()
            } else d.swipedown = null,
            d.swipedownPrev = null
        }
    };
    g._onMouseDrag = function (c, a) {
        var d = this.that.options;
        if (this.swipedown) {
            var b = this.swipedown,
            f = b.x,
            g = b.y,
            l = c.pageX,
            e = c.pageY;
            this.swipedownPrev = {
                x: f,
                y: g,
                ts: (new Date).getTime()
            };
            var h = d.scrollModel.smooth;
            if (!d.virtualY || h) this.scrollVertSmooth(g, e),
            this.syncScrollBarVert();
            if (!d.virtualX || h) this.scrollHorSmooth(f, l),
            this.syncScrollBarHor();
            b.x = l;
            b.y = e
        }
        return !0
    };
    g.updateTableY = function (c) {
        if (0 == c) return !1;
        var a = this.that,
        d = this.getTableForVertScroll(),
        a = a.iRefresh.getEContHt();
        if (!d || !d.length) return !1;
        var b = d.data('offsetHeight') - 1,
        f = this.scrollTop - c;
        this.setScrollTop(0 > f ? 0 : 0 > c && 0 < a - b + f ? b - a : f, d, a);
        return !0
    };
    g.setScrollTop = function (c, a, d) {
        0 <= c && (this.scrollTop = c = Math.round(c), a.parent('div').scrollTop(c))
    };
    g.getScrollLeft = function (c) {
        return this.scrollLeft
    };
    g.getScrollTop = function (c) {
        return this.scrollTop
    };
    g.setScrollLeft = function (c, a, d, b) {
        0 <= c && (this.scrollLeft = c = Math.round(c), d = d ? d.parent()  : k(), d = d.add(a ? a.parent('div')  : k()), d.scrollLeft(c))
    };
    g.scrollVertSmooth = function (c, a) {
        c != a && this.updateTableY(a - c)
    };
    g.scrollHorSmooth = function (c, a) {
        if (c != a) {
            var d = this.that,
            b = d.options,
            f = a - c,
            g = this.getTableForHorScroll(),
            l = this.getTableHeaderForHorScroll(),
            d = d.iRefresh.getEContWd();
            if (g || l) {
                var e = g ? g : l,
                b = b.virtualX ? this.getScrollWidth(e)  : e.data('scrollWidth'),
                f = this.scrollLeft - f;
                this.setScrollLeft(0 > f ? 0 : 0 > b - d -
                f ? b - d : f, g, l, d)
            }
        }
    };
    g.syncViewWithScrollBarVert = function (c) {
        if (null != c) {
            var a = this.that,
            d = this.getTableForVertScroll();
            if (d && d.length) {
                a.options.editModel.indices && a.blurEditor({
                    force: !0
                });
                var b = d.data('offsetHeight'),
                a = a.iRefresh.getEContHt();
                if ((c *= b - a) || 0 === c) 0 > c && (c = 0),
                this.setScrollTop(c, d, a)
            }
        }
    };
    g.syncViewWithScrollBarHor = function (c) {
        if (null != c) {
            var a = this.that,
            d = this.getTableForHorScroll(),
            b = this.getTableHeaderForHorScroll();
            if (d || b) {
                var f = a.options;
                f.editModel.indices && a.blurEditor({
                    force: !0
                });
                var g = d ? d : b,
                f = f.virtualX ? this.getScrollWidth(g)  : g.data('scrollWidth'),
                a = a.iRefresh.getEContWd();
                c *= f - a;
                f && a && (0 > c && (c = 0), this.setScrollLeft(c, d, b, a))
            }
        }
    };
    g.resetMargins = function () {
        this.scrollTop = this.scrollLeft = 0
    };
    g.syncHeaderViewWithScrollBarHor = function (c) {
        if (null != c) {
            var a = this.that,
            d = this.getTableHeaderForHorScroll();
            if (d) {
                var b = a.options,
                f = b.freezeCols;
                b.editModel.indices && a.blurEditor({
                    force: !0
                });
                var b = d.data('scrollWidth'),
                g = a.iRefresh.getEContWd();
                c = a.calcWidthCols(f, c + f);
                b && g && (0 > c && (c = 0), d.css('marginLeft', - c))
            }
        }
    };
    g.syncScrollBarVert = function () {
        var c = this.that,
        a = this.getTableForVertScroll();
        if (a && a.length) {
            var a = a.data('offsetHeight'),
            d = c.iRefresh.getEContHt(),
            a = this.scrollTop / (a - d);
            0 <= a && 1 >= a && c.vscroll.widget().hasClass('pq-sb-vert') && c.vscroll.option('ratio', a)
        }
    };
    g.syncScrollBarHor = function () {
        var c = this.that,
        a = c.options,
        d = this.getTableForHorScroll(),
        b = this.getTableHeaderForHorScroll();
        if (d || b) d = d ? d : b,
        a = a.virtualX ? this.getScrollWidth(d)  : d.data('scrollWidth'),
        d = c.iRefresh.getEContWd(),
        a = this.scrollLeft / (a - d),
        0 <= a && 1 >= a && c.hscroll.widget().hasClass('pq-sb-horiz') && c.hscroll.option('ratio', a)
    };
    g.getTableForVertScroll = function () {
        var c = this.that,
        a = c.pqpanes;
        if ((c = c.$tbl) && c.length) return a.h && a.v ? c = k([c[2],
        c[3]])  : a.v ? c = k([c[0],
        c[1]])  : a.h && (c = k(c[1])),
        c
    };
    g.getTableForHorScroll = function () {
        var c = this.that,
        a = c.pqpanes,
        d = [
        ],
        b = c.$tbl;
        if (b && b.length) return a.h && a.v ? d.push(b[1], b[3])  : a.v ? d.push(b[1])  : a.h ? d.push(b[0], b[1])  : d.push(b[0]),
        c.tables.length && (c = c.tables[0].$tbl, a.v ? d.push(c[1])  :
        d.push(c[0])),
        k(d)
    };
    g.getTableHeaderForHorScroll = function () {
        var c = this.that,
        a = c.pqpanes;
        if ((c = c.$tbl_header) && c.length) return c = a.vH ? k(c[1])  : k(c[0]),
        c.parent()
    };
    g.scrollRowNonVirtual = function (c) {
        var a = this.that,
        d = a.options,
        b = c.rowIndxPage,
        f = c.rowIndx;
        c = a.iRefresh.getEContHt();
        b = null == b ? f - a.rowIndxOffset : b;
        d = parseInt(d.freezeRows);
        if (!(b < d)) {
            var d = a.get$Tbl(b),
            g = a.getRow({
                rowIndxPage: b
            }) [0];
            g && (a = d[0].offsetTop + 1, b = g.offsetHeight, f = this.getScrollTop(), g = g.offsetTop - 1, 0 > a + g - f ? (a = a + g + - 1, this.setScrollTop(0 >
            a ? 0 : a, d, c), this.syncScrollBarVert())  : g + b - f > c && (this.setScrollTop(b + g - c, d, c), this.syncScrollBarVert()))
        }
    };
    g.scrollColumnNonVirtual = function (c) {
        var a = this.that,
        d = c.colIndx,
        d = null == d ? a.getColIndx({
            dataIndx: c.dataIndx
        })  : d,
        b = a.options.freezeCols;
        if (!(d < b)) {
            c = a._calcRightEdgeCol(d).width;
            var d = a._calcRightEdgeCol(d - 1).width,
            b = a._calcRightEdgeCol(b - 1).width,
            f = this.getTableForHorScroll(),
            g = this.getTableHeaderForHorScroll(),
            a = a.iRefresh.getEContWd(),
            l = this.scrollLeft;
            c - l > a ? (this.setScrollLeft(c - a, f, g, a), this.syncScrollBarHor())  :
            d - b < l && (this.setScrollLeft(d - b, f, g, a), this.syncScrollBarHor())
        }
    }
}) (jQuery);
(function (k) {
    var n = null,
    g = !1,
    c = '',
    a = k.paramquery.pqGrid.prototype,
    d = a.options,
    b = {
        on: !0,
        header: !0,
        zIndex: 10000
    },
    f = {
        on: !0
    },
    m = {
        on: !0,
        compare: 'byVal',
        select: !0,
        validate: !0,
        allowInvalid: !0,
        type: 'replace'
    };
    d.pasteModel = d.pasteModel || m;
    d.copyModel = d.copyModel || b;
    d.cutModel = d.cutModel || f;
    a._setGlobalStr = function (a) {
        c = a
    };
    a.canPaste = function () {
        return c ? !0 : !1
    };
    a.copy = function () {
        n = new l(this);
        n.copy();
        n = null
    };
    a.paste = function (a) {
        n = new l(this);
        n.paste(a);
        n = null
    };
    a.cut = function () {
        n = new l(this);
        n.copy({
            cut: !0,
            source: 'cut'
        });
        n = null
    };
    a.clear = function () {
        this.iSelection.clear()
    };
    var l = function (a, b) {
        this.that = a
    },
    a = l.prototype;
    a.createClipBoard = function () {
        var a = k('#pq-grid-excel-div'),
        a = this.that.options.copyModel,
        b = k('#pq-grid-excel');
        0 == b.length && (a = k('<div id=\'pq-grid-excel-div\'  style=\'position:fixed;top:20px;left:20px;height:1px;width:1px;overflow:hidden;z-index:' + a.zIndex + ';\'/>').appendTo(document.body), b = k('<textarea id=\'pq-grid-excel\' autocomplete=\'off\' spellcheck=\'false\' style=\'overflow:hidden;height:10000px;width:10000px;opacity:0\' />').appendTo(a), b.css({
            opacity: 0
        }));
        b.select()
    };
    a.destroyClipBoard = function () {
        this.clearClipBoard();
        var a = this.that,
        b = k(window).scrollTop(),
        d = k(window).scrollLeft();
        a.focus();
        var a = k(window).scrollTop(),
        f = k(window).scrollLeft();
        b == a && d == f || window.scrollTo(d, b)
    };
    a.clearClipBoard = function () {
        k('#pq-grid-excel').val('')
    };
    a.copy = function (a) {
        return this.that.iSelection.copy(a)
    };
    a.paste = function (a) {
        a = a || {
        };
        var b = this.that,
        d = a.dest,
        f = a.clip,
        e = f ? f.length ? f.val()  : '' : c,
        e = e.replace(/\n$/, ''),
        f = e.split('\n'),
        g = f.length,
        m,
        l = b.colModel,
        n = b.readCell,
        r = b.options.pasteModel,
        y = 'row',
        s = !1,
        z = l.length;
        if (r.on && 0 != e.length && 0 != g) {
            e = {
                rows: f
            };
            if (!1 === b._trigger('beforePaste', null, e)) return !1;
            var C = r.type,
            B,
            D,
            E,
            y = (d ? b.range(d)  : b.selection())._areas;
            (E = y.length ? y[0] : null) && b.getRowData({
                rowIndx: E.r1
            }) ? (y = 'row' == E.type ? 'row' : 'cell', B = E.r1, D = E.r2, d = E.c1, E = E.c2)  : (y = 'cell', E = d = D = B = 0);
            var F,
            K;
            'replace' == C ? (F = B, K = D - B + 1 < g ? 'extend' : 'repeat')  : 'append' == C ? (F = D + 1, K = 'extend')  : 'prepend' == C && (F = B, K = 'extend');
            var M,
            g = 'extend' == K ? g : D - B + 1,
            L;
            B = 0;
            a = a.rowList || [
            ];
            for (var H = D = 0; H < g; H++) {
                var G = f[B],
                O = H + F,
                I = 'replace' == C ? b.getRowData({
                    rowIndx: O
                })  : null,
                J = I ? {
                }
                 : null,
                P = {
                };
                void 0 === G && 'repeat' === K && (B = 0, G = f[B]);
                B++;
                var N = G.split('\t');
                if (!m) if ('cell' == y) {
                    m = N.length;
                    M = E - d + 1 < N.length ? 'extend' : 'repeat';
                    m = 'extend' == M ? m : E - d + 1;
                    if (isNaN(m)) throw 'lenH NaN. assert failed.';
                    m + d > z && (m = z - d)
                } else m = z,
                d = 0;
                var U = 0,
                Q = 0,
                G = 0;
                L = m;
                for (var V = N.length, Q = 0; Q < L; Q++) {
                    U >= V && (U = 0);
                    var T = l[Q + d],
                    W = N[U],
                    R = T.dataIndx;
                    !1 === T.copy ? (G++, 'extend' == M && L + d < z && L++)  : (U++, P[R] = W, J && (J[R] = n(I, T)))
                }
                !1 ==
                k.isEmptyObject(P) && (N = 'update', null == I && (s = !0, N = 'add'), a.push({
                    newRow: P,
                    rowIndx: O,
                    rowData: I,
                    oldRow: J,
                    type: N
                }), D++)
            }
            b._digestData({
                rowList: a,
                source: 'paste',
                allowInvalid: r.allowInvalid,
                validate: r.validate
            });
            b[s ? 'refreshView' : 'refresh']();
            r.select && ('cell' == y ? b.range({
                r1: F,
                c1: d,
                r2: F + D - 1,
                c2: 'extend' == M ? d + m - 1 + G : E
            }).select()  : b.range({
                r1: F,
                r2: F + D - 1
            }).select());
            b._trigger('paste', null, e)
        }
    };
    k(document).unbind('.pqExcel').bind('keydown.pqExcel', function (a) {
        if (a.ctrlKey || a.metaKey) {
            var b = k(a.target);
            if (b.hasClass('pq-grid-row') || b.hasClass('pq-grid-cell') || b.is('#pq-grid-excel') || b.hasClass('pq-grid-cont')) {
                var d = b.closest('.pq-grid');
                if (n || b.length && d.length) {
                    if (!n) {
                        try {
                            var f = d.pqGrid('getInstance').grid;
                            if (f.option('selectionModel.native')) return !0
                        } catch (c) {
                            return !0
                        }
                        n = new l(f, b);
                        n.createClipBoard()
                    }
                    '67' == a.keyCode || '99' == a.keyCode ? n.copy({
                        clip: k('#pq-grid-excel')
                    })  : '88' == a.keyCode ? n.copy({
                        cut: !0,
                        clip: k('#pq-grid-excel')
                    })  : '86' == a.keyCode || '118' == a.keyCode ? (g = !0, n.clearClipBoard(), window.setTimeout(function () {
                        n && (n.paste({
                            clip: k('#pq-grid-excel')
                        }), n.destroyClipBoard(), n = null);
                        g = !1
                    }, 0))  : (b = k('#pq-grid-excel'), b.length && document.activeElement == b[0] && n.that._onKeyPressDown(a))
                }
            }
        } else if (b = a.keyCode, d = k.ui.keyCode, b == d.UP || b == d.DOWN || b == d.LEFT || b == d.RIGHT || b == d.PAGE_UP || b == d.PAGE_DOWN) {
            if (e) return !1;
            b = k(a.target);
            if (b.hasClass('pq-grid-row') || b.hasClass('pq-grid-cell')) e = !0
        }
    }).bind('keyup.pqExcel', function (a) {
        var b = a.keyCode;
        g || !n || a.ctrlKey || a.metaKey || - 1 == k.inArray(b, [
            17,
            91,
            93,
            224
        ]) || (n.destroyClipBoard(), n = null);
        e && (a = k(a.target), a.hasClass('pq-grid-row') || a.hasClass('pq-grid-cell') || (e = !1))
    });
    var e = !1
}) (jQuery);
(function (k) {
    var n = k.paramquery.pqGrid.prototype.options,
    g = {
        on: !0,
        checkEditable: !0,
        checkEditableAdd: !1,
        allowInvalid: !0
    };
    n.historyModel = n.historyModel || g;
    n = (k.paramquery.cHistory = function (c) {
        var a = this;
        this.that = c;
        this.options = c.options;
        this.records = [
        ];
        this.id = this.counter = 0;
        c.on('keyDown', function (d, b) {
            return a._onKeyDown(d, b)
        }).on('dataAvailable', function (d, b) {
            'filter' != b.source && a.reset()
        })
    }).prototype = new k.paramquery.cClass;
    n._onKeyDown = function (c, a) {
        var d = c.ctrlKey || c.metaKey;
        if (d && '90' == c.keyCode) return this.undo(),
        !1;
        if (d && '89' == c.keyCode) return this.redo(),
        !1
    };
    n.resetUndo = function () {
        if (0 == this.counter) return !1;
        this.counter = 0;
        this.that._trigger('history', null, {
            type: 'resetUndo',
            num_undo: 0,
            num_redo: this.records.length - this.counter,
            canUndo: !1,
            canRedo: !0
        })
    };
    n.reset = function () {
        if (0 == this.counter && 0 == this.records.length) return !1;
        this.records = [
        ];
        this.id = this.counter = 0;
        this.that._trigger('history', null, {
            num_undo: 0,
            num_redo: 0,
            type: 'reset',
            canUndo: !1,
            canRedo: !1
        })
    };
    n.increment = function () {
        var c = this.records,
        a = c.length;
        this.id = a ? c[a - 1].id + 1 : 0
    };
    n.push = function (c) {
        var a = this.canRedo(),
        d = this.records,
        b = this.counter;
        d.length > b && d.splice(b, d.length - b);
        d[b] = k.extend({
            id: this.id
        }, c);
        this.counter++;
        c = this.that;
        var f,
        g;
        1 == this.counter && (f = !0);
        a && this.counter == d.length && (g = !1);
        c._trigger('history', null, {
            type: 'add',
            canUndo: f,
            canRedo: g,
            num_undo: this.counter,
            num_redo: 0
        })
    };
    n.canUndo = function () {
        return 0 < this.counter ? !0 : !1
    };
    n.canRedo = function () {
        return this.counter < this.records.length ? !0 : !1
    };
    n.processCol = function (c, a) {
        var d = this.that;
        if (c.length) {
            var b = 'add' == c.type;
            d[(a ? b : !b) ? 'addColumn' : 'deleteColumn']({
                colList: c,
                history: !1
            })
        }
    };
    n.undo = function () {
        var c = this.canRedo(),
        a = this.that,
        d = !1,
        b = this.options.historyModel,
        f = this.records;
        if (0 < this.counter) this.counter--;
         else return !1;
        for (var g = f[this.counter], f = (f = g.rowList) ? f : [
        ], g = (g = g.colList) ? g : [
        ], l = [
        ], e = 0, h = f.length; e < h; e++) {
            var k = f[e],
            n = k.newRow,
            t = k.rowData,
            p = k.type,
            q = k.oldRow,
            k = k.rowIndx;
            'update' == p ? (k = a.getRowIndx({
                rowData: t
            }).rowIndx, l.push({
                type: p,
                rowIndx: k,
                rowData: t,
                oldRow: n,
                newRow: q
            }))  :
            'add' == p ? (d = !0, l.push({
                type: 'delete',
                rowData: n
            }))  : 'delete' == p && (d = !0, l.push({
                type: 'add',
                rowIndx: k,
                newRow: t
            }))
        }
        g.length ? this.processCol(g)  : (a._digestData({
            history: !1,
            source: 'undo',
            checkEditable: b.checkEditable,
            checkEditableAdd: b.checkEditableAdd,
            allowInvalid: b.allowInvalid,
            rowList: l
        }), a[d ? 'refreshView' : 'refresh']({
            source: 'undo'
        }));
        var x,
        v;
        !1 === c && (x = !0);
        0 == this.counter && (v = !1);
        a._trigger('history', null, {
            canUndo: v,
            canRedo: x,
            type: 'undo',
            num_undo: this.counter,
            num_redo: this.records.length - this.counter
        });
        return !0
    };
    n.redo = function () {
        var c = this.canUndo(),
        a = this.that,
        d = this.options.historyModel,
        b = this.counter,
        f = this.records;
        if (b == f.length) return !1;
        for (var g = !1, l = f[b], b = (b = l.rowList) ? b : [
        ], l = (l = l.colList) ? l : [
        ], e = [
        ], h = 0, k = b.length; h < k; h++) {
            var n = b[h],
            t = n.newRow,
            p = n.rowData,
            q = n.type,
            x = n.oldRow,
            n = n.rowIndx;
            'update' == q ? (n = a.getRowIndx({
                rowData: p
            }).rowIndx, e.push({
                type: q,
                rowIndx: n,
                rowData: p,
                oldRow: x,
                newRow: t
            }))  : 'add' == q ? (g = !0, e.push({
                type: 'add',
                rowIndx: n,
                newRow: t
            }))  : 'delete' == q && (g = !0, e.push({
                type: 'delete',
                rowData: p
            }))
        }
        l.length ? this.processCol(l, !0)  : (a._digestData({
            history: !1,
            source: 'redo',
            checkEditable: d.checkEditable,
            checkEditableAdd: d.checkEditableAdd,
            allowInvalid: d.allowInvalid,
            rowList: e
        }), a[g ? 'refreshView' : 'refresh']({
            source: 'redo'
        }));
        this.counter < f.length && this.counter++;
        var v,
        u;
        !1 == c && (v = !0);
        this.counter == this.records.length && (u = !1);
        a._trigger('history', null, {
            canUndo: v,
            canRedo: u,
            type: 'redo',
            num_undo: this.counter,
            num_redo: this.records.length - this.counter
        });
        return !0
    };
    k.paramquery.pqGrid.prototype.history = function (c) {
        return this.iHistory[c.method](c)
    }
}) (jQuery);
(function (k) {
    var n = k.paramquery;
    n.filter = function () {
        var a = {
            begin: {
                text: 'Begins With',
                TR: !0,
                string: !0
            },
            between: {
                text: 'Between',
                TR: !0,
                string: !0,
                date: !0,
                number: !0
            },
            notbegin: {
                text: 'Does not begin with',
                TR: !0,
                string: !0
            },
            contain: {
                text: 'Contains',
                TR: !0,
                string: !0
            },
            notcontain: {
                text: 'Does not contain',
                TR: !0,
                string: !0
            },
            equal: {
                text: 'Equal To',
                TR: !0,
                string: !0,
                bool: !0
            },
            notequal: {
                text: 'Not Equal To',
                TR: !0,
                string: !0
            },
            empty: {
                text: 'Empty',
                TR: !1,
                string: !0,
                bool: !0
            },
            notempty: {
                text: 'Not Empty',
                TR: !1,
                string: !0,
                bool: !0
            },
            end: {
                text: 'Ends With',
                TR: !0,
                string: !0
            },
            notend: {
                text: 'Does not end with',
                TR: !0,
                string: !0
            },
            less: {
                text: 'Less Than',
                TR: !0,
                number: !0,
                date: !0
            },
            lte: {
                text: 'Less than or equal',
                TR: !0,
                number: !0,
                date: !0
            },
            range: {
                TR: !0,
                string: !0,
                number: !0,
                date: !0
            },
            regexp: {
                TR: !0,
                string: !0,
                number: !0,
                date: !0
            },
            great: {
                text: 'Great Than',
                TR: !0,
                number: !0,
                date: !0
            },
            gte: {
                text: 'Greater than or equal',
                TR: !0,
                number: !0,
                date: !0
            }
        };
        return {
            conditions: a,
            getAllConditions: function () {
                var d = [
                ],
                b;
                for (b in a) d.push(b);
                return d
            }(),
            getConditions: function (d) {
                var b = [
                ],
                f;
                for (f in a) a[f][d] && b.push(f);
                return b
            },
            getTRConditions: function () {
                var d = [
                ],
                b;
                for (b in a) a[b].TR && d.push(b);
                return d
            }(),
            getWTRConditions: function () {
                var d = [
                ],
                b;
                for (b in a) a[b].TR || d.push(b);
                return d
            }()
        }
    }();
    n.filter.rules = {
    };
    n.filter.rules.en = {
        begin: 'Begins With',
        between: 'Between',
        notbegin: 'Does not begin with',
        contain: 'Contains',
        notcontain: 'Does not contain',
        equal: 'Equal To',
        notequal: 'Not Equal To',
        empty: 'Empty',
        notempty: 'Not Empty',
        end: 'Ends With',
        notend: 'Does not end with',
        less: 'Less Than',
        lte: 'Less than or equal',
        great: 'Great Than',
        gte: 'Greater than or equal'
    };
    var g = function (a) {
        this.that = a;
        a.on('load', function () {
            var d = a.options.dataModel.dataUF;
            d && (d.length = 0)
        })
    };
    n.cFilterData = g;
    var c = g.prototype;
    g.conditions = {
        equal: function (a, d) {
            if (a == d) return !0
        },
        contain: function (a, d) {
            if ( - 1 != a.indexOf(d)) return !0
        },
        notcontain: function (a, d) {
            if ( - 1 == a.indexOf(d)) return !0
        },
        empty: function (a) {
            if (0 == a.length) return !0
        },
        notempty: function (a) {
            if (0 < a.length) return !0
        },
        begin: function (a, d) {
            if (0 == (a + '').indexOf(d)) return !0
        },
        notbegin: function (a, d) {
            if (0 != a.indexOf(d)) return !0
        },
        end: function (a, d) {
            var b = a.lastIndexOf(d);
            if ( - 1 != b && b + d.length == a.length) return !0
        },
        notend: function (a, d) {
            var b = a.lastIndexOf(d);
            if ( - 1 == b || b + d.length != a.length) return !0
        },
        regexp: function (a, d) {
            if (d.test(a)) return d.lastIndex = 0,
            !0
        },
        notequal: function (a, d) {
            if (a != d) return !0
        },
        great: function (a, d) {
            if (a > d) return !0
        },
        gte: function (a, d) {
            if (a >= d) return !0
        },
        between: function (a, d, b) {
            if (a >= d && a <= b) return !0
        },
        range: function (a, d) {
            if ( - 1 != k.inArray(a, d)) return !0
        },
        less: function (a, d) {
            if (a < d) return !0
        },
        lte: function (a, d) {
            if (a <= d) return !0
        }
    };
    g.convert = function (a, d) {
        a = null == a ? '' : a;
        'string' == d ? a = k.trim(a).toUpperCase()  : 'date' == d ? a = Date.parse(a)  : 'integer' == d ? a = parseInt(a)  : 'float' == d ? a = parseFloat(a)  : 'bool' == d && (a = String(a).toLowerCase());
        return a
    };
    c.isMatchCellSingle = function (a, d) {
        var b = a.dataType,
        f = a.value,
        c = a.value2,
        l = a.cbFn,
        e = d[a.dataIndx],
        e = 'regexp' == a.condition ? null == e ? '' : e : g.convert(e, b);
        return l(e, f, c) ? !0 : !1
    };
    c.isMatchRow = function (a, d, b) {
        if (0 == d.length) return !0;
        for (var f = 0; f <
        d.length; f++) {
            var c = this.isMatchCell(d[f], a);
            if ('OR' == b && c) return !0;
            if ('AND' == b && !c) return !1
        }
        if ('AND' == b) return !0;
        if ('OR' == b) return !1
    };
    c.getQueryStringFilter = function () {
        var a = this.that,
        d = a.options,
        b = d.stringify,
        d = d.filterModel,
        f = d.mode,
        a = this.getFilterData({
            CM: a.colModel,
            location: 'remote'
        }),
        c = '';
        d && d.on && a && (a.length ? (d = {
            mode: f,
            data: a
        }, c = !1 === b ? d : JSON.stringify(d))  : c = '');
        return c
    };
    c.filterLocalData = function (a) {
        a = a || {
        };
        var d = this.that,
        b = a.apply,
        b = null == b ? !0 : b;
        a = this.getFilterData({
            CM: b ? d.colModel :
            a.CM
        });
        var f = d.options,
        c = f.dataModel,
        g = d.iSort,
        e = c.data,
        h = [
        ],
        k = [
        ],
        n = c.dataUF,
        t = f.filterModel,
        p = t.multiple,
        f = t ? t.mode : null;
        e || (e = c.data = [
        ]);
        n || (n = c.dataUF = [
        ]);
        !1 === b && (e = e.slice());
        if (n.length) {
            for (var q = 0, x = n.length; q < x; q++) e.push(n[q]);
            0 == g.readSorter().length && g.sortLocalData(e);
            n = c.dataUF = [
            ]
        } else if (a.length) g.saveOrder();
         else return {
            data: e,
            dataUF: n
        };
        this.isMatchCell = p ? this.isMatchCellMultiple : this.isMatchCellSingle;
        if (t.on && f && a && a.length) {
            if (e.length) for (q = 0, x = e.length; q < x; q++) g = e[q],
            this.isMatchRow(g, a, f) ? h.push(g)  : k.push(g);
            e = h;
            n = k;
            b && (c.data = e, c.dataUF = n)
        }
        b && (d._queueATriggers.filter = {
            ui: {
                type: 'local',
                filter: a
            }
        });
        return {
            data: e,
            dataUF: n
        }
    };
    c.getFilterData = function (a) {
        var d = a.CM;
        if (!d) throw 'CM N/A';
        var b = d.length,
        f = a.location;
        a = this.that.options.filterModel.multiple;
        for (var c = n.filter.getAllConditions, g = n.filter.getTRConditions, e = [
        ], h = n.cFilterData, w = function (a, b, d) {
            return 'function' == typeof a ? !0 : 'between' == a ? null != b && '' !== b || null != d && '' !== d ? !0 : !1 : - 1 != k.inArray(a, c) ? null != b && '' !== b || - 1 == k.inArray(a, g) ? !0 : !1 : !0
        }, A = function (a, b) {
            return 'remote' == f ? (null == a ? '' : a).toString()  : h.convert(a, b)
        }, t = 0; t < b; t++) {
            var p = d[t],
            q = p.dataIndx,
            x = p.dataType,
            x = x && 'function' != typeof x ? x : 'string',
            v = p.filter;
            if (a) {
                if ((v = p.filterModel) && v.on) {
                    for (var u = [
                    ], r = v.mode, y = v.filters, p = 0; p < y.length; p++) {
                        var v = y[p],
                        s = v.value,
                        z = v.condition;
                        w(z, s) && (s = A(s, x), u.push({
                            value: s,
                            condition: z
                        }))
                    }
                    e.push({
                        dataIndx: q,
                        mode: r,
                        dataType: x,
                        filters: u
                    })
                }
            } else if (v && v.on && (s = v.value, u = v.value2, z = v.condition, w(z, s, u))) {
                if ('between' == z) '' === s || null ==
                s ? (z = 'lte', s = A(u, x))  : '' === u || null == u ? (z = 'gte', s = A(s, x))  : (s = A(s, x), u = A(u, x));
                 else if ('regexp' == z) if ('remote' == f) s = s.toString();
                 else {
                    if ('string' == typeof s) try {
                        var C = v.modifiers,
                        C = C ? C : 'gi',
                        s = new RegExp(s, C)
                    } catch (B) {
                        s = /.*/
                    }
                } else if ('range' == z) if (null == s) continue;
                 else if ('string' == typeof s) s = A(s, x),
                s = s.split(/\s*,\s*/);
                 else {
                    if (s && 'function' == typeof s.push) {
                        if (0 == s.length) continue;
                        s = s.slice();
                        p = 0;
                        for (v = s.length; p < v; p++) s[p] = A(s[p], x)
                    }
                } else s = A(s, x);
                e.push({
                    dataIndx: q,
                    value: s,
                    value2: u,
                    condition: z,
                    dataType: x,
                    cbFn: 'remote' == f ? '' : 'function' == typeof z ? z : h.conditions[z]
                })
            }
        }
        return e
    }
}) (jQuery);
(function (k) {
    k = (k.paramquery.cSort = function (g) {
        this.that = g;
        this.sorters = [
        ];
        this.tmpPrefix = 'pq_tmp_';
        this.cancel = !1
    }).prototype;
    k.cancelSort = function () {
        this.cancel = !0
    };
    k.resumeSort = function () {
        this.cancel = !1
    };
    k.readSorter = function () {
        var g = this.that,
        c = g.options,
        a = c.groupModel,
        d,
        g = g.columns,
        b = 0,
        f,
        m,
        l = [
        ];
        if (a.on) for (d = a.dataIndx, f = d.length, m = a.dir; b < f; b++) a = d[b],
        l.push({
            dataIndx: a,
            dir: m[b] ? m[b] : 'up'
        });
        d = c.sortModel;
        c = d.sorter;
        d = d.single;
        if (c && (f = c.length)) {
            for (; f--; ) null == g[c[f].dataIndx] && c.splice(f, 1);
            d && c.length && (c = [
                c[0]
            ]);
            l = l.concat(c)
        }
        return l = pq.arrayUnique(l, 'dataIndx')
    };
    k.setSingle = function (g) {
        this.single = g
    };
    k.getSingle = function () {
        return this.single
    };
    k.readSingle = function () {
        return this.that.options.sortModel.single
    };
    k.writeSingle = function (g) {
        this.that.options.sortModel.single = g
    };
    k.setCancel = function (g) {
        this.cancel = g
    };
    k.getCancel = function () {
        return this.cancel
    };
    k.readCancel = function () {
        return this.that.options.sortModel.cancel
    };
    k.writeCancel = function (g) {
        this.that.options.sortModel.cancel = g
    };
    k.writeSorter = function (g) {
        var c = this.that.options,
        a = c.sortModel,
        d = c.groupModel,
        c = d.dataIndx,
        b = d.dir;
        if (d.on) {
            for (d = 0; d < c.length; d++) {
                var f = g[d];
                if (c[d] != f.dataIndx) throw 'gDataIndx!=sorter.dataIndx';
                b[d] = f.dir
            }
            g.splice(0, c.length)
        }
        a.sorter = g
    };
    k.refreshSorter = function (g) {
        g = g || {
        };
        var c = g.sorter,
        a = c[0].dataIndx,
        d = c[0].dir,
        b = g.single,
        c = g.cancel,
        f = this.that.options.groupModel,
        m = f.dataIndx,
        l = f.on ? m.length : 0,
        e = - 1;
        g = this.readSorter();
        if (null == b) throw 'sort single N/A';
        if (f.on) for (f = 0; f < l; f++) m[f] == a && (e = f);
        - 1 < e ? g[e].dir = 'up' === g[e].dir ? 'down' : 'up' : null != a && (b ? g[l] && g[l].dataIndx == a ? (a = g[l].dir, a = 'up' === a ? 'down' : c && 'down' === a ? '' : 'up', '' === a ? g.length-- : g[l].dir = a)  : g[l] = {
            dataIndx: a,
            dir: d ? d : 'up'
        }
         : (l = this.inSorters(g, a), - 1 < l ? (a = g[l].dir, 'up' == a ? g[l].dir = 'down' : c && 'down' == a ? g.splice(l, 1)  : 1 == g.length ? g[l].dir = 'up' : g.splice(l, 1))  : g.push({
            dataIndx: a,
            dir: 'up'
        })));
        return g
    };
    k.saveOrder = function (g) {
        var c = this.that.options.dataModel;
        g = c.data;
        if (!(!g || !g.length || c.dataUF && c.dataUF.length || this.getSorter().length && null != g[0].pq_order)) for (var c = 0, a = g.length; c < a; c++) g[c].pq_order = c
    };
    k.getQueryStringSort = function () {
        if (this.cancel) return '';
        var g = this.sorters,
        c = this.that.options.stringify;
        return g.length ? !1 === c ? g : JSON.stringify(g)  : ''
    };
    k.getSorter = function () {
        return this.sorters
    };
    k.setSorter = function (g) {
        this.sorters = g.slice(0)
    };
    k.inSorters = function (g, c) {
        for (var a = - 1, d = 0; d < g.length; d++) if (g[d].dataIndx == c) {
            a = d;
            break
        }
        return a
    };
    k.sortLocalData = function (g) {
        for (var c = this.that, a = c.colModel, d = this.sorters, b = 0; b < d.length; b++) {
            var f = d[b],
            m = c.getColIndx({
                dataIndx: f.dataIndx
            }),
            m = a[m],
            l = m.sortType;
            f.dataType = m.dataType;
            f.sortType = l
        }
        d.length || (d = [
            {
                dataIndx: 'pq_order',
                dir: 'up',
                dataType: 'integer'
            }
        ]);
        return this._sortLocalData(d, g)
    };
    k._sortLocalData = function (g, c) {
        if (null == c) return [];
        if (0 == c.length || !g || !g.length) return c;
        var a = this,
        d = a.tmpPrefix,
        b = a.that.options.sortModel,
        f = b.useCache,
        m = b.ignoreCase;
        (function () {
            for (var b = [
            ], e = [
            ], h = [
            ], k = g.length, A = 0; A < k; A++) {
                var t = g[A],
                p = t.dataIndx,
                q = 'up' == t.dir ? 1 : - 1,
                x = t.sortType,
                t = (t = t.dataType) ? t :
                'string',
                t = 'string' == t && m ? 'stringi' : t,
                v = f && 'date' == t,
                u = v ? d + p : p;
                e[A] = u;
                h[A] = q;
                b[A] = x ? function (a, b) {
                    return function (d, f, e, c) {
                        return b(d, f, e, c, a)
                    }
                }(x, n.sort_sortType)  : 'integer' == t ? n.sort_number : 'float' == t ? n.sort_number : 'function' == typeof t ? function (a, b) {
                    return function (d, f, e, c) {
                        return b(d, f, e, c, a)
                    }
                }(t, n.sort_dataType)  : 'date' == t ? n['sort_date' + (v ? '_fast' : '')] : 'bool' == t ? n.sort_bool : 'stringi' == t ? n.sort_locale : n.sort_string;
                v && a.useCache(c, t, p, u)
            }
            c = c.sort(function (a, d) {
                for (var f = 0, c = 0; c < k && (f = b[c](a, d, e[c], h[c]), 0 == f); c++);
                return f
            });
            v && setTimeout(a.removeCache(g, c), 0)
        }) ();
        return c
    };
    k.useCache = function (g, c, a, d) {
        c = n['get_' + c];
        for (var b = g.length; b--; ) {
            var f = g[b];
            f[d] = c(f[a])
        }
    };
    k.removeCache = function (g, c) {
        var a = this.tmpPrefix;
        return function () {
            for (var d = g.length; d--; ) {
                var b = a + g[d].dataIndx,
                f = c.length;
                if (f && c[0].hasOwnProperty(b)) for (; f--; ) delete c[f][b]
            }
        }
    };
    var n = {
        get_date: function (g) {
            var c;
            return g ? isNaN(c = Date.parse(g)) ? 0 : c : 0
        },
        sort_number: function (g, c, a, d) {
            g = g[a];
            c = c[a];
            return ((g ? 1 * g : 0) - (c ? 1 * c : 0)) * d
        },
        sort_date: function (g, c, a, d) {
            g = g[a];
            c = c[a];
            g = g ? Date.parse(g)  : 0;
            c = c ? Date.parse(c)  : 0;
            return (g - c) * d
        },
        sort_date_fast: function (g, c, a, d) {
            return (g[a] - c[a]) * d
        },
        sort_dataType: function (g, c, a, d, b) {
            return b(g[a], c[a]) * d
        },
        sort_sortType: function (g, c, a, d, b) {
            return b(g, c, a) * d
        },
        sort_string: function (g, c, a, d) {
            g = g[a];
            c = c[a];
            a = 0;
            g = g ? g : '';
            c = c ? c : '';
            g > c ? a = 1 : g < c && (a = - 1);
            return a * d
        },
        sort_locale: function (g, c, a, d) {
            g = g[a];
            c = c[a];
            return (g ? g : '').localeCompare(c ? c : '') * d
        },
        sort_bool: function (g, c, a, d) {
            g = g[a];
            c = c[a];
            a = 0;
            if (g && !c || !1 ===
            g && null === c) a = 1;
             else if (c && !g || !1 === c && null === g) a = - 1;
            return a * d
        }
    };
    pq.sortObj = n
}) (jQuery);
(function (k) {
    function n(a) {
        this.that = a;
        this.mc = null;
        var b = this,
        f = a.options;
        this.DM = f.dataModel;
        a.on('dataReady columnOrder groupShowHide', function (a, d) {
            f.mergeCells && 'pager' !== d.source && b.init()
        })
    }
    function g(a, b, f) {
        var c = 0,
        g = a.length;
        for (f = f > g ? g : f; b < f; b++) !0 !== a[b].hidden && c++;
        return c
    }
    function c(a, b, f) {
        var c = 0,
        g = a.length;
        for (f = f > g ? g : f; b < f; b++) !0 !== a[b].pq_hidden && c++;
        return c
    }
    k.paramquery.cMerge = n;
    var a = n.prototype = new k.paramquery.cClass;
    a.init = function () {
        for (var a = this.that, b = a.colModel, f = a.options.mergeCells || [
        ], m = a.get_p_data(), l = [
        ], e = [
        ], h = 0, k = f.length; h < k; h++) {
            var n = f[h],
            t = n.r1,
            p = t,
            q = m[t],
            x = n.c1,
            v = x,
            u = b[x],
            r = n.rc,
            y = n.cc;
            if (u && q) {
                if (u.hidden) a: {
                    for (v = x; v < x + y; v++) {
                        u = b[v];
                        if (!u) {
                            v = - 1;
                            break a
                        }
                        if (!u.hidden) break a
                    }
                    v = void 0
                }
                u = g(b, x, x + y);
                if (q.pq_hidden) a: {
                    for (p = t; p < t + r; p++) {
                        q = m[p];
                        if (!q) {
                            p = - 1;
                            break a
                        }
                        if (!q.pq_hidden) break a
                    }
                    p = void 0
                }
                q = c(m, t, t + r);
                if (!(1 > q || 1 > u)) for (l.push({
                    r1: t,
                    c1: x,
                    rc: r,
                    cc: y,
                    e_rc: q,
                    e_cc: u
                }), e[p] = e[p] || [
                ], e[p][v] = {
                    show: !0,
                    rowspan: q,
                    colspan: u,
                    o_rowspan: r,
                    o_colspan: y,
                    style: n.style,
                    cls: n.cls,
                    attr: n.attr,
                    r1: t,
                    c1: x,
                    v_r1: p,
                    v_c1: v
                }, n = {
                    show: !1,
                    r1: t,
                    c1: x,
                    v_r1: p,
                    v_c1: v
                }, q = t; q < t + r; q++) for (e[q] = e[q] || [
                ], u = x; u < x + y; u++) if (q != p || u != v) e[q][u] = n
            }
        }
        a._mergeCells = 0 < e.length;
        this.mc = e;
        this.mc2 = l
    };
    a.isHidden = function (a, b) {
        var f,
        c = this.mc;
        return c && c[a] && (f = c[a][b]) && !f.show ? !0 : !1
    };
    a.setData = function (a, b, f) {
        var c,
        g = this.mc;
        g[a] && (c = g[a][b]) && (c.data = f)
    };
    a.getData = function (a, b, f) {
        var c,
        g = this.mc;
        if (g[a] && (c = g[a][b])) return (a = c.data) ? a[f] : null
    };
    a.removeData = function (a, b, f) {
        var c,
        g = this.mc;
        g && g[a] && (c = g[a][b]) && (a = c.data) && (a[f] = null)
    };
    a.ismergedCell = function (a, b) {
        var f = this.mc,
        c;
        return f && f[a] && (c = f[a][b]) ? (f = f[c.v_r1][c.v_c1], a == f.r1 && b == f.c1 ? {
            rowspan: f.o_rowspan,
            colspan: f.o_colspan
        }
         : !0)  : !1
    };
    a.isRootCell = function (a, b, f) {
        var c = this.mc,
        g;
        if (c && c[a] && (g = c[a][b])) {
            if ('o' == f) return a == g.r1 && b == g.c1;
            var e = g.v_r1;
            g = g.v_c1;
            if ('a' == f) return f = c[e][g],
            f.a_r1 == a && f.a_c1 == b;
            if (e == a && g == b) return f = c[e][g],
            {
                rowspan: f.rowspan,
                colspan: f.colspan
            }
        }
    };
    a.getRootCell = function (a, b, f) {
        var c = this.that,
        g = this.mc,
        e;
        if (g && g[a] && (e = g[a][b])) {
            'a' ==
            f ? (a = e.v_r1, b = e.v_c1, f = g[a][b], f.a_r1 && (a = f.a_r1, b = f.a_c1))  : 'o' == f ? (a = e.r1, b = e.c1)  : (a = e.v_r1, b = e.v_c1);
            f = c.colModel[b];
            var g = c.rowIndxOffset,
            h = a - g;
            0 > h && (h = 0, a = g);
            return {
                rowIndxPage: h,
                colIndx: b,
                column: f,
                dataIndx: f.dataIndx,
                rowData: c.pdata[h],
                rowIndx: a,
                rowspan: e.rowspan,
                colspan: e.colspan
            }
        }
        return c.normalize({
            rowIndx: a,
            colIndx: b
        })
    };
    a.inflateRange = function (a, b, f, c) {
        var g = this.that,
        e = !1,
        h = g.options,
        h = h.groupModel.on ? g.rowIndxOffset + g.pdata.length - 1 : h.dataModel.data.length - 1,
        g = g.colModel.length - 1,
        k = this.mc2;
        if (!k) return [a,
        b,
        f,
        c];
        var n = 0,
        t = k.length;
        a: for (; n < t; n++) {
            var p = k[n],
            q = p.r1,
            x = p.c1,
            v = q + p.rc - 1,
            p = x + p.cc - 1,
            v = v > h ? h : v,
            p = p > g ? g : p,
            u = q <= f && v > f,
            r = x < b && p >= b,
            y = x <= c && p > c;
            if ((q < a && v >= a || u) && p >= b && x <= c || (r || y) && v >= a && q <= f) {
                e = !0;
                a = q < a ? q : a;
                b = x < b ? x : b;
                f = v > f ? v : f;
                c = p > c ? p : c;
                break a
            }
        }
        return e ? this.inflateRange(a, b, f, c)  : [
            a,
            b,
            f,
            c
        ]
    };
    k.paramquery.pqGrid.prototype.calcVisibleRows = c;
    a.renderCell = function (a) {
        var b = this.that,
        f = a.rowIndx,
        m = a.rowIndxPage,
        l = a.colIndx,
        e,
        h = this.mc,
        k;
        if (h[f] && (k = h[f][l])) {
            var n = k.v_r1,
            t = k.v_c1;
            e = k.r1;
            var p = k.c1,
            q = b.options,
            x = b.colModel,
            v = b.rowIndxOffset,
            u = q.freezeCols,
            r = (q = q.freezeRows) ? q + v : 0,
            y = b.initH,
            s = b.initV;
            if (k.show || l == t && m == s && n >= r || l == t && f == s && n >= r || f == n && l == y && t >= u || f == s && l == y && t >= u && n >= r) {
                var z = e - v,
                m = b.pdata,
                b = b.get_p_data(),
                C = g(x, 0, u);
                k = c(m, 0, q);
                e = {
                    rowData: b[e],
                    rowIndx: e,
                    colIndx: p,
                    column: x[p],
                    rowIndxPage: z
                };
                h = h[n][t];
                p = h.colspan;
                z = h.rowspan;
                u && l < u && l + p > C ? (t = p - g(x, u, y), x = g(x, l, u), p = Math.max(t, x))  : p -= g(x, t, l);
                q && f < r && f + z > k + v ? (n = z - c(m, q, s), v = c(m, f - v, q), z = Math.max(n, v))  : z -= c(b, n, f);
                h.a_r1 = f;
                h.a_c1 = l;
                e.rowspan = z;
                e.colspan = p;
                e.style = h.style;
                e.attr = h.attr;
                e.cls = h.cls
            } else return null
        }
        return e ? e : a
    };
    a.getMergeCells = function (a, b, f) {
        for (var c = this.that, g = c.options.mergeCells, e, h, c = c.rowIndxOffset, k = c + f, n = [
        ], t = g ? g.length : 0, p = 0; p < t; p++) if (f = g[p], e = f.r1, h = f.c1, !b || e >= c && e < k) b && (e -= c),
        e += a,
        n.push({
            r1: e,
            c1: h,
            r2: e + f.rc - 1,
            c2: h + f.cc - 1
        });
        return n
    }
}) (jQuery);
(function () {
    var k = window.pq = window.pq || {
    };
    k.extend = function (a, f, d) {
        var c = function () {
        };
        c.prototype = a.prototype;
        var c = f.prototype = new c,
        e = a.prototype,
        h;
        for (h in d) {
            var g = e[h],
            k = d[h];
            c[h] = g ? function (a, b) {
                return function () {
                    this._super = function () {
                        return a.apply(this, arguments)
                    };
                    var f = b.apply(this, arguments);
                    this._super = void 0;
                    return f
                }
            }(g, k)  : k
        }
        c.constructor = f;
        c._base = a;
        c._bp = function (a) {
            var b = arguments;
            Array.prototype.shift.call(b);
            return e[a].apply(this, b)
        }
    };
    var n = k.Range = function (a, f, d, c) {
        if (null == a) throw 'invalid param';
        this.that = a;
        if (!1 == this instanceof n) return new n(a, f, d, c);
        this._type = d ? d : 'range';
        this.init(f, c)
    },
    g = n.prototype;
    g._areas = [
    ];
    g.init = function (a, f) {
        f = !1 !== f;
        if (a) if ('function' == typeof a.push) for (var d = 0, c = a.length; d < c; d++) this.init(a[d], f);
         else if (d = this._normal(a, f)) c = this._areas,
        c.length ? c.push(d)  : this._areas = [
            d
        ]
    };
    g.address = function () {
        this.dirty && this.refresh();
        return this._areas
    };
    g.areas = function (a) {
        this.dirty && this.refresh();
        var f = this.that,
        d = this._areas,
        d = null == a ? d : d[a];
        return k.Range(f, d, 'area')
    };
    g.merge = function (a) {
        a = a || {
        };
        var f = this.that,
        d = f.options.mergeCells,
        c,
        e,
        h = this._areas[0];
        h && (c = h.r2 - h.r1 + 1, e = h.c2 - h.c1 + 1, 1 < c || 1 < e) && (h.rc = c, h.cc = e, d.push(h), !1 !== a.refresh && f.refreshView())
    };
    g.unmerge = function (a) {
        a = a || {
        };
        var d = this.that,
        c = d.options.mergeCells,
        g = this._areas[0];
        if (g) {
            for (var e = 0; e < c.length; e++) {
                var h = c[e];
                if (h.r1 == g.r1 && h.c1 == g.c1) {
                    c.splice(e, 1);
                    break
                }
            }
            !1 !== a.refresh && d.refreshView()
        }
    };
    g.hide = function (a) {
        a = a || {
        };
        for (var d = this.that, c = d.colModel, g = d.get_p_data(), e = this._areas, h = 0, k = e.length; h <
        k; h++) {
            var n = e[h],
            t = n.type,
            p = n.r1,
            q = n.r2,
            x = n.c1,
            n = n.c2;
            if ('column' == t) for (t = x; t <= n; t++) c[t].hidden = !0;
             else if ('row' == t) for (t = p; t <= q; t++) g[t].pq_hidden = !0
        }
        !1 !== a.refresh && d.refreshView()
    };
    g.unhide = function (a) {
        a = a || {
        };
        for (var d = this.that, c = d.colModel, g = d.get_p_data(), e = this._areas, h = 0, k = e.length; h < k; h++) {
            var n = e[h],
            t = n.type,
            p = n.r1,
            q = n.r2,
            x = n.c1,
            n = n.c2;
            if ('column' == t) for (t = x; t <= n; t++) c[t].hidden = !1;
             else if ('row' == t) for (t = p; t <= q; t++) g[t].pq_hidden = !1
        }
        !1 !== a.refresh && d.refreshView()
    };
    g.select = function () {
        var a = this.that,
        d = a.iSelection,
        c = d._areas[0],
        g = this._areas,
        e = g[0];
        if (!e) return this;
        var h = e.r1,
        k = e.c1;
        if (d.dirty || 1 != g.length || 'block' != g[0].type || !c || 'cell' != c.type && 'block' != c.type || h != c.r1 || k != c.c1) for (d.removeAll({
            trigger: !1
        }), h = 0, k = g.length; h < k; h++) d.add(g[h], !1);
         else {
            var n = c.r1,
            t = c.c1,
            p = c.r2,
            c = c.c2,
            q = e.r2,
            e = e.c2,
            a = a.iCells;
            if (q == p && e == c) return this;
            e > c ? a.selectBlock({
                range: {
                    r1: h,
                    c1: c + 1,
                    r2: q,
                    c2: e
                }
            })  : e < c && a.selectBlock({
                range: {
                    r1: Math.max(h, n),
                    c1: e + 1,
                    r2: Math.max(q, p),
                    c2: c
                },
                remove: !0
            });
            q > p ? a.selectBlock({
                range: {
                    r1: p +
                    1,
                    c1: k,
                    r2: q,
                    c2: e
                }
            })  : q < p && a.selectBlock({
                range: {
                    r1: q + 1,
                    c1: Math.max(k, t),
                    r2: p,
                    c2: Math.max(e, c)
                },
                remove: !0
            });
            d._areas = g
        }
        d._trigger();
        return this
    };
    g.resize = function (a, d) {
        var c = this._areas[0];
        return n(this.that, {
            r1: c.r1,
            c1: c.c1,
            rc: a,
            cc: d
        })
    };
    g.cut = function (a) {
        a = a || {
        };
        a.cut = !0;
        return this.copy(a)
    };
    g.copy = function (a) {
        a = a || {
        };
        this.dirty && this.refresh();
        var d = this.that,
        c = a.dest,
        g = a.cut ? !0 : !1,
        e = null == a.copy ? !0 : a.copy,
        h = a.source || (g ? 'cut' : 'copy'),
        k = null == a.history ? !0 : a.history,
        n = null == a.allowInvalid ? !0 : a.allowInvalid,
        t = [
        ],
        p = [
        ],
        q = d.get_p_data(),
        x = d.colModel,
        v = d.readCell,
        u = d.iMerge,
        r = this._areas;
        if (r.length) {
            var y = this._areas[0],
            s = y.type,
            z = y.r1,
            C = y.c1,
            B = 'cell' == s ? z : y.r2,
            y = 'cell' == s ? C : y.c2,
            D = 0;
            do {
                for (; z <= B; z++) {
                    for (var E = [
                    ], F = q[z], K = {
                    }, M = {
                    }, L = C; L <= y; L++) {
                        var H = x[L],
                        G = H.dataIndx;
                        if (!1 !== H.copy) {
                            var O = F[G];
                            e && E.push(v(F, H, u, z, L));
                            g && (K[G] = void 0, M[G] = O)
                        }
                    }
                    g && t.push({
                        rowIndx: z,
                        rowData: F,
                        oldRow: M,
                        newRow: K,
                        type: 'update'
                    });
                    E = E.join('\t');
                    p.push(E)
                }
                D++;
                y = r[D];
                if ('row' == s && y && 'row' == y.type) z = y.r1,
                C = y.c1,
                B = y.r2,
                y = y.c2;
                 else break
            } while (1);
            e && (E = p.join('\n'), a.clip ? (a = a.clip, a.val(E), a.select())  : d._setGlobalStr(E));
            c ? d.paste({
                dest: c,
                rowList: t,
                history: k,
                allowInvalid: n
            })  : g && !1 !== d._digestData({
                rowList: t,
                source: h,
                history: k,
                allowInvalid: n
            }) && d.refresh({
                source: 'cut'
            })
        }
    };
    g.clear = function () {
        return this.copy({
            copy: !1,
            cut: !0,
            source: 'clear'
        })
    };
    g.add = function (a) {
        this.init(a)
    };
    g._countArea = function (a) {
        var d = a.r1,
        c = a.c1,
        g = a.r2,
        e = a.c2;
        return 'cell' == a.type ? 1 : (g - d + 1) * (e - c + 1)
    };
    g.count = function () {
        this.dirty && this.refresh();
        for (var a = 'range' == this._type, d = this._areas, c = 0, g = d.length, e = 0; e < g; e++) c += a ? this._countArea(d[e])  : 1;
        return c
    };
    g.rows = function (a) {
        this.dirty && this.refresh();
        var d = this.that,
        c = [
        ],
        g = this._areas[0];
        if (g) {
            var e = g.r1,
            h = g.c1,
            n = g.r2,
            A = g.c2,
            g = g.type,
            n = null == a ? n : e + a;
            for (a = null == a ? e : e + a; a <= n; a++) c.push({
                r1: a,
                c1: h,
                r2: a,
                c2: A,
                type: g
            })
        }
        return k.Range(d, c, 'row')
    };
    g.columns = function (a) {
        this.dirty && this.refresh();
        var d = this.that,
        c = [
        ],
        g = this._areas[0];
        if (g) {
            var e = g.r1,
            h = g.c1,
            n = g.r2,
            A = g.c2,
            g = g.type,
            A = null == a ? A : h + a;
            for (a = null == a ? h : h + a; a <= A; a++) c.push({
                r1: e,
                c1: a,
                r2: n,
                c2: a,
                type: g
            })
        }
        return k.Range(d, c, 'column')
    };
    g.cell = function (a, d) {
        this.dirty && this.refresh();
        var c = this.that,
        g = [
        ],
        e = this._areas[0];
        e && (g = e.r1 + a, e = e.c1 + d, g = [
            g,
            e,
            g,
            e
        ]);
        return k.Range(c, g, 'cell')
    };
    g.item = function (a) {
        this.dirty && this.refresh();
        for (var d = 0, c = !1, g = this._areas, e = 0, h = g.length; e < h; e++) {
            var k = g[e],
            n = this._countArea(k);
            if (d + n > a) {
                c = !0;
                a -= d;
                break
            } else d += n
        }
        if (c) {
            if (k) var t = k.r1,
            p = k.c1,
            d = k.c2 - p + 1,
            t = t + Math.floor(a / d),
            p = p + a % d;
            return {
                r1: t,
                c1: p
            }
        }
    };
    g._normal = function (a, d) {
        if (a.type) return a;
        if ('function' == a.push) {
            for (var c = [
            ], g = 0, e = a.length; g < e; g++) {
                var h = this._normal(a[g], d);
                h && c.push(h)
            }
            return c
        }
        var c = this.that,
        k = c.get_p_data().length - 1,
        n = c.colModel.length - 1,
        g = a.r1,
        e = a.c1,
        g = g > k ? k : g,
        e = e > n ? n : e,
        t = a.rc,
        p = a.cc,
        h = a.r2,
        q = a.c2,
        h = t ? g + t - 1 : h > k ? k : h,
        q = p ? e + p - 1 : q > n ? n : q;
        if (0 > n || 0 > k) return null;
        g > h && (t = g, g = h, h = t);
        e > q && (t = e, e = q, q = t);
        if (null != g || null != e) return null == g ? (g = 0, h = k, q = null == q ? e : q, k = 'column')  : null == e ? (e = 0, h = null == h ? g : h, q = n, k = 'row')  : null == h ? (k = 'cell', h = g, q = e)  : k = 'block',
        d && (c = c.iMerge.inflateRange(g, e, h, q), g = c[0], e = c[1], h = c[2], q = c[3]),
        a.r1 = g,
        a.c1 = e,
        a.r2 = h,
        a.c2 = q,
        a.type = a.type || k,
        a
    };
    g.value = function (a) {
        a = a || {
        };
        a = a.val;
        this.dirty && this.refresh();
        var d = this.that,
        c = d.colModel,
        g = [
        ],
        e = this._areas;
        if (void 0 === a && e.length) {
            var h = e[0],
            k = h.r1,
            n = h.c1;
            return d.getCellData({
                rowIndx: k,
                colIndx: n
            })
        }
        for (var t = 0; t < e.length; t++) for (var h = e[t], k = h.r1, n = h.c1, p = h.r2, h = h.c2; k <= p; k++) {
            for (var q = d.normalize({
                rowIndx: k
            }), x = q.rowData, q = q.rowIndx, v = {
            }, u = {
            }, r = n; r <= h; r++) {
                var y = c[r].dataIndx;
                u[y] = a;
                v[y] = x[y]
            }
            g.push({
                rowData: x,
                rowIndx: q,
                type: 'update',
                newRow: u,
                oldRow: v
            })
        }
        g.length && (d._digestData({
            rowList: g,
            source: 'range'
        }), d.refresh())
    };
    var c = k.Selection = function (a, d) {
        if (null == a) throw 'invalid param';
        if (!1 == this instanceof c) return new c(a, d);
        this.that = a;
        var g = this;
        a.on('dataReady columnOrder addColumn deleteColumn', function (a, b) {
            'pager' != b.source && g.renew()
        });
        this._base(a, d)
    },
    a = {
        renew: function () {
            var a = this._areas,
            d = a.length;
            if (1 == d) {
                if (a = a[0], a = this._adjust(a)) this.removeAll({
                    trigger: !1
                }),
                this.add(a, !1)
            } else 1 < d && (this.dirty = !0)
        },
        isDirty: function () {
            return this.dirty
        }
    },
    d = function (a) {
        a.shiftKey && 'pqGrid:mousePQUp' != a.type || (this._trigger('selectEnd', null, {
            selection: this.selection()
        }), this.off('mousePQUp', d), this.off('keyUp', d))
    };
    a._trigger = function () {
        var a = this.that;
        this.dirty && this.refresh();
        a._trigger('selectChange', null, {
            selection: this
        });
        a.off('mousePQUp', d);
        a.off('keyUp', d);
        a.on('mousePQUp', d);
        a.on('keyUp', d)
    };
    a.removeAll = function (a) {
        a = a || {
        };
        var d = this.that;
        d.iCells.removeAll({
            refresh: !0
        });
        d.iRows.removeAll({
            refresh: !0,
            all: !0
        });
        this._areas = [
        ];
        !1 !== a.trigger && this._trigger()
    };
    g.indexOf = function (a) {
        this.dirty && this.refresh();
        a = this._normal(a);
        var d = a.type,
        c = a.r1,
        g = a.c1,
        e = a.r2;
        a = a.c2;
        for (var h = this._areas, k = 0, n = h.length; k < n; k++) {
            var t = h[k],
            p = t;
            if (d == t.type && c >= p.r1 && e <= p.r2 && g == p.c1 && a == p.c2) return k
        }
        return - 1
    };
    a.add = function (a, d) {
        var c = this.that,
        g = this._normal(a, !0),
        e = c.iCells,
        c = c.iRows,
        h = g.r1,
        k = g.c1,
        n = g.r2,
        t = g.type;
        0 <= this.indexOf(g) || ('row' == t ? (e = this._areas, e.length && (e = e[e.length - 1], t = e.type, 'row' == t && h <= e.r2 && (this.dirty = !0)), n > h ? c.selectRange({
            range: g
        })  : c.add({
            rowIndx: h
        }))  : 'column' == t || 'block' == t ? e.selectBlock({
            range: g
        })  : 'cell' == t && e.add({
            rowIndx: h,
            colIndx: k
        }), this._super(g), !1 !== d && this._trigger())
    };
    a._adjust = function (a) {
        var d = this.that,
        c = d.get_p_data().length - 1,
        d = d.colModel.length - 1,
        g = a.r1,
        e = a.c1,
        h = a.r2,
        k = a.c2,
        h = h > c ? c : h,
        k = k > d ? d : k;
        if (0 > d || 0 > c || g > h || e > k) return null;
        a.r1 = g;
        a.r2 = h;
        a.c1 = e;
        a.c2 = k;
        return a
    };
    g.removeRow = function (a, d) {
        var c = a.r1,
        g = a.r2,
        e = this._areas,
        h = this._areas[d],
        k = h.r1,
        n = h.r2;
        c == k && g == n ?
        e.splice(d, 1)  : c > k ? (h.r2 = c - 1, g < n && (c = this._normal({
            r1: g + 1,
            r2: n
        }), e.splice(d + 1, 0, c)))  : g < n && (c > k && (c = this._normal({
            r1: g + 1,
            r2: n
        }), e.splice(d, 0, c)), h.r1 = g + 1)
    };
    a.removeRow = function (a, d) {
        var c = this.that,
        g = this._normal(a),
        e = this.indexOf(g);
        - 1 < e && 'row' == g.type && g.r1 == g.r2 && (c.iRows.remove({
            rowIndx: g.r1
        }), this._super(a, e), !1 !== d && this._trigger())
    };
    a.selectAll = function (a) {
        a = a || {
        };
        var d = this.that,
        c = a.all,
        g = c ? 0 : d.rowIndxOffset,
        e = d.colModel.length - 1,
        h = g + (c ? d.options.dataModel.data.length - 1 : d.pdata.length - 1);
        'cell' ==
        a.type ? (a = {
            r1: g,
            c1: 0
        }, a.r2 = h, a.c2 = e, d.range(a).select())  : (a = {
            r1: g
        }, a.r2 = h, c || this.removeRows({
            all: !1,
            trigger: !1
        }), d.iRows.selectRange({
            range: a
        }), d = c ? [
        ] : this._areas, d.push({
            r1: g,
            c1: 0,
            r2: h,
            c2: e,
            type: 'row'
        }), this._areas = d, this._trigger());
        return this
    };
    a.removeRows = function (a) {
        a = a || {
        };
        var d = a.all;
        this.that.iRows.removeAll({
            refresh: !0,
            all: a.all
        });
        d ? this._areas = [
        ] : this.refresh();
        !1 !== a.trigger && this._trigger()
    };
    a.refresh = function () {
        for (var a = this.that, d = [
        ], c = a.colModel.length - 1, a = a.get_p_data(), g = 0, e = a.length; g <
        e; g++) {
            var h = a[g],
            k;
            h && (h.pq_cellselect = void 0, h.pq_rowselect ? k ? k.r2 = g : k = {
                r1: g,
                r2: g,
                c1: 0,
                c2: c,
                type: 'row'
            }
             : k && (d.push(k), k = null))
        }
        k && d.push(k);
        this.dirty = !1;
        this._areas = d
    };
    k.extend(n, c, a)
}) ();
(function (k) {
    function n(a, d, b, c) {
        a.push('<li data-option=\'', b, '\' class=\'pq-menu-item\'>', '<label>', '<input type=\'checkbox\' ', d[b] ? 'checked' : '', '/>', c['strGroup_' + b], '</label></li>')
    }
    var g = k.paramquery;
    pq.aggregate = {
        sum: function (a) {
            for (var d = 0, b = a.length, c; b--; ) c = a[b],
            null != c && (d += c - 0);
            return d
        },
        avg: function (a, d) {
            return this.sum(a, d, !0) / a.length
        },
        max: function (a, d) {
            var b;
            b = d.dataType;
            'float' == b || 'integer' == b ? b = Math.max.apply(Math, a)  : 'date' == b ? (a.sort(function (a, b) {
                a = Date.parse(a);
                b = Date.parse(b);
                isNaN(a) && (a = 0);
                isNaN(b) && (b = 0);
                return b - a
            }), b = a[0])  : (a.sort(), b = a[a.length - 1]);
            return b
        },
        min: function (a, d) {
            var b;
            b = d.dataType;
            var c,
            g;
            if ('integer' == b || 'float' == b) b = Math.min.apply(Math, a);
             else if ('date' == b) {
                g = a.length;
                for (b = [
                ]; g--; ) (c = a[g]) && b.push({
                    dateO: c,
                    dateP: Date.parse(c)
                });
                b.sort(function (a, b) {
                    return a.dateP - b.dateP
                });
                b = b.length ? b[0].dateO : void 0
            } else a.sort(),
            b = a[0];
            return b
        },
        count: function (a) {
            return a.length
        }
    };
    var c = (g.cGroupView = function (a) {
        this.that = a;
        a.options.groupModel.on && this.init()
    }).prototype;
    c.init = function () {
        var a,
        d,
        b,
        c;
        this._init || (this.mc = [
        ], this.tree = [
        ], this.summaryData = [
        ], c = this.that, a = c.options, d = a.groupModel, a = a.bootstrap, b = (a = a.on) ? 'glyphicon ' : 'ui-icon ', this.groupRemoveIcon = 'pq-group-remove ' + b + (a ? 'glyphicon-remove' : 'ui-icon-close'), this.toggleIcon = 'pq-group-toggle ' + b, c.on('cellClick', this.onCellClick(this)).on('cellKeyDown', this.onCellKeyDown(this, d)).on(!0, 'cellMouseDown', this.onCellMouseDown()).on('change', this.onChange(this, d)).on('dataReady', this.onDataReady(this, c)).on('beforeSortDone', this.onBeforeSort(this, c)).on('columnDragDone', this.onColumnDrag(this)).on('columnOrder', this.onColumnOrder(this)), this._init = !0)
    };
    c.onCellClick = function (a) {
        return function (d, b) {
            b.rowData.pq_gtitle && k(d.originalEvent.target).hasClass('pq-group-icon') && a.toggle(b.rowIndxPage)
        }
    };
    c.onChange = function (a, d) {
        return function () {
            a.saveState(d.refreshOnChange)
        }
    };
    c.onCellMouseDown = function () {
        return function (a, d) {
            d.rowData.pq_gtitle && k(a.originalEvent.target).hasClass('pq-group-icon') && a.stopImmediatePropagation()
        }
    };
    c.onCellKeyDown = function (a, d) {
        return function (b, c) {
            if (c.rowData.pq_gtitle && 0 <= k.inArray(c.dataIndx, d.dataIndx) && b.keyCode == k.ui.keyCode.ENTER) return a.toggle(c.rowIndxPage),
            !1
        }
    };
    c.showRows = function () {
        for (var a = this.that.options.dataModel.data, c = 0, b = a.length; c < b; c++) a[c].pq_hidden = !1
    };
    c.removeGroup = function (a, c) {
        for (var b = this.that.options.groupModel.dataIndx, f = 0; f < b.length; f++) if (a == b[f]) {
            b.splice(f, 1);
            break
        }
        b.length || (this.showRows(), this.mc.length = 0);
        !1 !== c && this.refreshFull()
    };
    c.addGroup = function (a, c) {
        var b = this.that.options.groupModel;
        b.dataIndx = b.dataIndx || [
        ];
        null != a && - 1 == k.inArray(a, b.dataIndx) && (b.dataIndx.push(a), this.refreshFull())
    };
    c._initHeadSortable = function () {
        this.$header.sortable({
            axis: 'x',
            distance: 3,
            tolerance: 'pointer',
            cancel: '.pq-group-menu',
            stop: this.onSortable(this, this.that.options)
        })
    };
    c.onColumnDrag = function (a) {
        return function (c, b) {
            var f = b.column.colModel;
            f && f.length ? a.acceptDrop = !1 : a._initHeadDroppable()
        }
    };
    c._initHeadDroppable = function () {
        var a = this,
        c = a.that,
        b = a.$header;
        b && (b.droppable({
            accept: function (b) {
                return a.acceptDrop
            },
            tolerance: 'pointer',
            hoverClass: 'pq-drop-hover',
            drop: a.onDrop(c, a)
        }), a.acceptDrop = !0)
    };
    c.onDrop = function (a, c) {
        return function (b, f) {
            var g = 1 * f.draggable.attr('pq-col-indx');
            c.addGroup(a.colModel[g].dataIndx);
            c.acceptDrop = !1
        }
    };
    c.onSortable = function (a, c) {
        return function () {
            for (var b = [
            ], f = c.groupModel, g = f.dataIndx, l = [
            ], e = !1, h = k(this).find('.pq-group-item'), n = 0; n < h.length; n++) {
                var A = k(h[n]),
                t = A.data('indx'),
                A = A.data('dir');
                g[n] != t && (e = !0);
                b.push(t);
                l.push(A)
            }
            e && (f.dataIndx = b, f.dir = l, a.refreshFull())
        }
    };
    c._initHeader = function (a, c) {
        if (this.$header) {
            var b = this.$header,
            f = b.find('.pq-group-item');
            b.data('uiSortable') || this._initHeadSortable();
            f.length || b.append('<span class=\'pq-group-placeholder\'>' + a.strGroup_header + '</span>');
            c.headerMenu && this._initHeaderMenu()
        }
    };
    c.createHeader = function () {
        for (var a = this, c = a.that, b = a.$header, f = c.options, g = f.bootstrap, l = c.columns, e = g.on, h = f.groupModel, n = h.dataIndx, A = n.length; A--; ) null == l[n[A]] && n.splice(A, 1);
        A = n.length;
        if (h.header && h.on) {
            b ? b.empty()  : (b = a.$header = k('<div class=\'pq-group-header ui-helper-clearfix\' ></div>').appendTo(c.$top), b.on('click', '.pq-group-item', function (b) {
                b = k(b.target);
                var c = k(this).data('indx');
                b.hasClass('pq-group-remove') ? a.removeGroup(c)  : a.groupToggle(c)
            }));
            if (A) {
                for (var c = [
                ], t = 0; t < A; t++) {
                    var p = n[t],
                    q = l[p],
                    x = e ? g.groupModel.icon : h.icon;
                    c.push('<div class=\'pq-group-item\' data-indx=\'', p, '\' data-dir=\'', h.dir[t], '\'>', '<span class=\'', a.toggleIcon, h.collapsed[t] ? x[1] : x[0], '\' ></span>', q.pqtitle || ('string' ==
                    typeof q.title ? q.title : p), '<span class=\'', a.groupRemoveIcon, '\' ></span></div>')
                }
                b[0].innerHTML = c.join('')
            }
            a._initHeader(f, h)
        } else b && (b.remove(), a.$header = null)
    };
    c._initHeaderMenu = function () {
        for (var a = this.that, c = a.options, b = this.$header, f = [
            '<ul class=\'pq-group-menu\'><li>',
            a.BS_on ? '<span class=\'glyphicon glyphicon-chevron-left\'></span>' : '',
            '<ul>'
        ], g = c.groupModel, l = g.menuItems, e = 0, h = l.length; e < h; e++) n(f, g, l[e], c);
        f.push('</ul></li></ul>');
        b = k(f.join('')).appendTo(b);
        b.menu({
            icons: {
                submenu: 'ui-icon-carat-1-w'
            },
            position: {
                my: 'right top',
                at: 'left top'
            }
        });
        b.change(function (b) {
            if ('INPUT' == b.target.nodeName) {
                b = k(b.target).closest('li').data('option');
                var e = {
                };
                e[b] = !c.groupModel[b];
                e.refresh = !0;
                a.groupOption(e)
            }
        })
    };
    c.setOption = function () {
        this._init && (this.refreshColumns(), this.summaryData.length = 0, this.tree.length = 0, this._initmerge())
    };
    c.onDataReady = function (a, c) {
        return function () {
            a.tree.length = 0;
            var b = c.options.groupModel;
            b.on && (b.dataIndx.length ? (a.refreshColumns(), a._groupData(), a._initcollapsed(), a._initmerge())  :
            b.grandSummary && (a.refreshColumns(), a._groupData()));
            a.createHeader()
        }
    };
    c.onColumnOrder = function (a) {
        return function () {
            a._initmerge()
        }
    };
    c.pq_gc_ = function () {
        return 'pq_gc_'
    };
    c.onBeforeSort = function (a, c) {
        return function (b) {
            if (!b.isDefaultPrevented()) {
                var f = c.options,
                g = f.groupModel;
                if (g.on) {
                    b = c.columns;
                    for (var k = [
                    ], f = f.dataModel.data || [
                    ], e = [
                    ], h, n, A = g.dataIndx, t = A.length; t--; ) {
                        var p = A[t];
                        h = b[p];
                        var q = h.groupChange;
                        if (q) for (k.push(h), g = a.pq_gc_() + p, e.push(g), h.sortType = a.sortType(g), n = f.length; n--; ) h = f[n],
                        h[g] = q(h[p])
                    }
                    c.one('sort', function () {
                        if (t = k.length) for (; t--; ) k[t].sortType = void 0
                    })
                }
            }
        }
    };
    c.sortType = function (a) {
        return function (c, b, f) {
            return c[a] != b[a] ? c[f] - b[f] : 0
        }
    };
    c.groupToggle = function (a) {
        var c = this.that.options.groupModel,
        b = c.collapsed;
        a = k.inArray(a, c.dataIndx);
        b[a] = !b[a];
        this.trigger(null, a);
        this.refreshView()
    };
    c.expandIndx = function (a) {
        var c = this.that,
        b = !0 == a.close;
        a = a.indx.split(',');
        var f = a.length,
        g = this.tree,
        k,
        e,
        h;
        k = 0;
        var n,
        c = c.pdata;
        if (!(f > g.length)) {
            for (var A = 0; A < f; A++) {
                n = 1 * a[A] + k;
                k = g[A][n];
                if (!k) {
                    if (0 == A) return;
                    break
                }
                k = k.rip;
                if (!b || b && A == f - 1) e = c[k],
                e.pq_close != b && (h = e, e.pq_close = b);
                e = g[A + 1];
                var t = void 0;
                if (e) {
                    do t = e[n].rip,
                    n++;
                    while (t < k);
                    k = n - 1
                } else k = void 0
            }
            h && (this.trigger(h), this.saveState(!0))
        }
    };
    c._editorSummary = function (a, c) {
        var b = a.summaryOptions;
        return function (a) {
            var g = a.rowData;
            if (g.pq_gsummary || g.pq_gtitle) {
                var g = pq.aggregate,
                l = a.column,
                e = l.summary,
                e = e ? e.edit : null,
                h = l.dataType,
                l = [
                    ''
                ];
                if ( - 1 < k.inArray(a.dataIndx, c.dataIndx) || !c.summaryEdit && !e || !1 === e) return !1;
                'integer' == h || 'float' == h ? h = 'number' : 'date' !== h && (h = 'string');
                e = b[h].split(',');
                a = k.inArray;
                for (var n in g) - 1 < a(n, e) && l.push(n);
                return 1 == l.length ? !1 : {
                    type: 'select',
                    prepend: c.prepend,
                    options: c.options || l,
                    valueIndx: c.valueIndx,
                    labelIndx: c.labelIndx,
                    init: c.init || function (a) {
                        var b = a.column.summary,
                        c;
                        b || (b = a.column.summary = {
                        });
                        c = b.type;
                        setTimeout(function () {
                            a.$cell.find('select').val(c)
                        }, 100)
                    },
                    getData: c.getData || function (a) {
                        var b = a.column;
                        a = a.$cell.find('select').val();
                        b.summary.type = a;
                        this.one('beforeValidate', function (a, b) {
                            b.allowInvalid = !0;
                            b.track = !1;
                            b.history = !1
                        });
                        return a
                    }
                }
            }
        }
    };
    c._renderTitle = function (a, c) {
        var b = this.that,
        f = a.bootstrap,
        g = f.on,
        f = g ? f.groupModel.icon : c.icon,
        k = g ? [
            'glyphicon ' + f[0],
            'glyphicon ' + f[1]
        ] : [
            'ui-icon ' + f[0],
            'ui-icon ' + f[1]
        ];
        return function (a) {
            var f = a.rowData,
            g,
            m,
            n;
            if (f.pq_gtitle && null != a.cellData) return g = f.pq_close,
            m = f.pq_level,
            n = c.title,
            n = n[m] ? n[m] : c.titleDefault,
            n = 'function' === typeof n ? n.call(b, a)  : n.replace('{0}', a.cellData).replace('{1}', f.pq_items),
            {
                text: (a.Export ? '' : '<span class=\'pq-group-icon ' +
                k[g ? 1 : 0] + '\'></span>') + n,
                cls: 'pq-group-title-cell'
            }
        }
    };
    c._renderSummary = function (a) {
        var c = this.that;
        return function (b) {
            var f = b.rowData,
            g,
            k;
            if (f.pq_gsummary || f.pq_gtitle) {
                f = b.column;
                g = f.summary.type;
                k = a.summaryTitle[g];
                if ('function' == typeof k) return k.call(c, b);
                g = b.formatVal;
                null == g && (g = b.cellData, g = null == g ? '' : g);
                'number' != typeof g || f.format || parseInt(g) === g || (g = g.toFixed(2));
                return k ? k.replace('{0}', g)  : g
            }
        }
    };
    c.refreshColumns = function () {
        for (var a = this.that, c = a.options, b = c.groupModel, f = b.on, g = b.fixCols, k, e, h, n, A = b.dataIndx, t = A.length, p = c.colModel, q = p.length; q--; ) h = p[q],
        h._render && (h._render == h._renderGT ? (delete h._renderGT, delete h._render)  : h._render == h._renderGS && (delete h._renderGS, delete h._render)),
        h._nodrag && (delete h._nodrag, delete h._nodrop),
        f && (n = h.summary) && n.type && (e = e || this._renderSummary(c), h._render = h._renderGS = e);
        c.geditor = f ? this._editorSummary(c, b)  : void 0;
        if (f) for (q = t - 1; 0 <= q; q--) h = a.getColumn({
            dataIndx: A[q]
        }),
        k = k || this._renderTitle(c, b),
        h._renderGT = h._render = k;
        if (g && f) for (q = 0; q < t; q++) c = a.getColIndx({
            dataIndx: A[q]
        }),
        h = p[c],
        h._nodrag = h._nodrop = !0,
        c != q && (a.iDragColumns.moveColumn(c, q, !0), a.iColModel.init())
    };
    c.refreshFull = function () {
        this.refreshColumns();
        this.that.sort()
    };
    c.refreshView = function () {
        this.that.refreshView()
    };
    c.expandAll = function (a) {
        a = a || {
        };
        a = !0 == a.close;
        var c = this.that.options.groupModel,
        b = c.collapsed,
        c = c.dataIndx,
        f;
        for (f = 0; f < c.length; f++) b[f] = a;
        this.trigger(null, null, !0);
        this.refreshFull()
    };
    c.showHideRows = function (a, c, b, f) {
        for (var g = [
        ], k = this.that.pdata, e = k.length; a <
        e; a++) {
            var h = k[a];
            if (h.pq_gsummary) if (h.pq_level < c) break;
             else h.pq_hidden = b;
             else if (h.pq_gtitle) {
                var n = h.pq_close;
                n && g.push({
                    indx: a,
                    level: h.pq_level
                });
                if (h.pq_level <= c) break;
                 else h.pq_hidden = f && !n ? !0 : b
            } else h.pq_hidden = b
        }
        return g
    };
    c.trigger = function (a, c, b) {
        var f = this.that,
        g = f.options.groupModel,
        k = {
        };
        a ? (c = a.pq_level, b = a[g.dataIndx[c]], a = a.pq_close, k = {
            level: c,
            close: a,
            group: b
        })  : b ? (a = g.collapsed[0], k = {
            all: !0,
            close: a
        })  : null != c && (a = g.collapsed[c], k = {
            level: c,
            close: a
        });
        f._trigger('group', null, k)
    };
    c.toggle = function (a) {
        a = this.that.pdata[a];
        a.pq_close = a.pq_close ? !1 : !0;
        this.trigger(a);
        this.saveState(!0)
    };
    c.saveState = function (a) {
        var c = this.that,
        b = c.options.groupModel;
        if (b.on && b.dataIndx.length) {
            for (var b = c.pdata, f = b.length, g = Array(f), k = 0; k < f; k++) g[k] = b[k];
            this.pdata = g;
            a && c.refreshView()
        }
    };
    c._initmerge = function () {
        for (var a = this.that, c = a.options, b = c.groupModel.merge, f = this.tree, g = a.rowIndxOffset, k, e, h, n, A, t = a.colModel.length, p = [
        ], q = a.pdata, x = 0; x < f.length; x++) {
            k = f[x];
            h = a.getColIndx({
                dataIndx: c.groupModel.dataIndx[x]
            });
            for (var v = 0, u = k.length; v < u; v++) {
                e = k[v];
                n = e.rip;
                if (null == n) break;
                b ? (e = e.rip2, A = e - n, e = n + g, p.push({
                    r1: e,
                    rc: A,
                    c1: h,
                    cc: 1
                }))  : (e = n + g, n = q[n], n.pq_close || p.push({
                    r1: e,
                    rc: 1,
                    c1: h,
                    cc: t - h
                }))
            }
        }
        p.length ? (this.mc = c.mergeCells = p, a.iMerge.init())  : this.mc.length && (this.mc.length = 0, a.iMerge.init())
    };
    c._initcollapsed = function () {
        var a = this.that,
        c = a.options.groupModel.merge,
        b = this.pdata,
        a = a.pdata,
        f,
        g,
        k,
        e;
        if (a) {
            for (var h = 0, n = a.length; h < n; h++) f = a[h],
            g = f.pq_gtitle,
            void 0 !== g && (g = f.pq_level, e = null, b && (k = (k = b[h]) ? k.pq_close :
            null, null != k && (e = f.pq_close = k)), null == e && (e = f.pq_close), e ? this.showHideRows(h + 1, g, !0)  : c && (f.pq_hidden = !0));
            delete this.pdata
        }
    };
    c._groupChange = function (a) {
        var c = k.trim,
        b = this.pq_gc_();
        return function (f, g, k) {
            if (k.groupChange) return f = f[b + g],
            null != f ? f : '';
            f = c(f[g]);
            return a ? f.toUpperCase()  : f
        }
    };
    c._groupData = function () {
        var a = this.that,
        c = pq.aggregate,
        b = a.pdata,
        f = a.options,
        g = f.groupModel,
        l = g.merge,
        e = g.grandSummary,
        h = k.inArray,
        n = a.colModel,
        A = n.length,
        t = this._groupChange(g.ignoreCase),
        p = b.length,
        q = g.dataIndx,
        x = q.length,
        v = g.collapsed || [
        ],
        u = [
        ],
        r = {
        },
        y = a.columns,
        s = [
        ],
        z,
        g = g.showSummary || [
        ],
        C = [
        ];
        if (b && 0 < p) {
            for (var B = x - 1; 0 <= B; B--) g[B] = null != g[B] ? g[B] : !1,
            v[B] = null != v[B] ? v[B] : !1,
            C[B] = (C[B + 1] ? C[B + 1] : 0) + g[B],
            s[B] = y[q[B]];
            for (z = 0; z < A; z++) {
                var D = n[z],
                E = D.dataIndx,
                F = D.summary;
                F && F.type && - 1 == h(E, q) && (u.push({
                    column: D
                }), r[E] = Array(p - 1))
            }
            z = u.length;
            h = [
            ];
            n = [
            ];
            A = [
            ];
            y = [
            ];
            for (B = 0; B < x; B++) y[B] = null,
            A[B] = '',
            n[B] = [
            ];
            for (var K = 0; K <= p; K++) {
                for (var M = b[K], E = !1, L = null, B = 0; B < x; B++) {
                    A[B] = K < p ? t(M, q[B], s[B])  : '';
                    if (y[B] != A[B] || K == p) E = !0,
                    null == L && (L = B);
                    if (E) {
                        var D = n[B],
                        H = D[D.length - 1];
                        H && (H.rip2 = h.length + C[B]);
                        D.push({
                            rowIndx: K,
                            title: A[B]
                        })
                    }
                }
                if (E) {
                    if (0 < K) for (B = x - 1; B >= L; B--) {
                        for (var H = {
                        }, D = n[B], G = D.length - 2 ? D[D.length - 2].rip : B, O = D.length - 2 ? D[D.length - 2].rowIndx : 0, I = D[D.length - 1].rowIndx, J = 0; J < z; J++) {
                            var D = u[J].column,
                            F = D.summary,
                            F = F.type,
                            E = D.dataIndx,
                            P = '',
                            P = r[E].slice(O, I),
                            P = c[F](P, D);
                            H[E] = P
                        }
                        if (g[B]) {
                            var D = {
                                pq_gsummary: !0,
                                pq_level: B,
                                pq_rowcls: 'pq-summary-row'
                            },
                            N;
                            for (N in H) D[N] = H[N];
                            h.push(D)
                        }
                        D = h[G];
                        for (N in H) D[N] = H[N];
                        l && (D.pq_rowcls = 'pq-summary-row');
                        D.pq_items = I - O
                    }
                    if (K == p) break;
                    for (B = 0; B < x; B++) y[B] = A[B];
                    for (B = L; B < x; B++) D = {
                        pq_gtitle: !0,
                        pq_level: B,
                        pq_close: v[B]
                    },
                    D[q[B]] = A[B],
                    E = h.push(D),
                    D = n[B],
                    D[D.length - 1].rip = E - 1
                }
                if (K == p) break;
                M.pq_hidden = !1;
                h.push(M);
                for (B = 0; B < z; B++) D = u[B].column,
                E = D.dataIndx,
                r[E][K] = M[E]
            }
            this.tree = n;
            a.pdata = h
        } else a.dataGM = null;
        if (e) {
            H = {
                pq_grandsummary: !0,
                pq_gsummary: !0
            };
            for (J = 0; J < z; J++) D = u[J].column,
            F = D.summary,
            F = F.type,
            E = D.dataIndx,
            P = r[E],
            P = c[F](P, D),
            H[E] = P;
            this.summaryData = f.summaryData = [
                H
            ]
        } else this.summaryData.length = 0
    };
    g = g.pqGrid.prototype;
    g.group = function (a) {
        this.iGroupView[a.indx ? 'expandIndx' : 'expandAll'](a)
    };
    g.groupOption = function (a) {
        var c = a.dataIndx,
        b = c ? c.length : 0,
        c = !1,
        f = this.iGroupView,
        g = this.options,
        l = g.groupModel,
        e = l.dataIndx,
        h = a.on || null == a.on && l.on;
        h && f.init();
        h && (b || e.length) && (c = !0);
        if (l.on && e.length && (!1 === a.on || 0 === b)) for (b = g.dataModel.data, g = 0, e = b.length; g < e; g++) b[g].pq_hidden = !1;
        k.extend(l, a);
        f.setOption();
        if (!1 !== a.refresh) this[c ? 'sort' : 'refreshView']()
    }
}) (jQuery);
